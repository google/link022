/*
Package ocstruct is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /usr/local/google/home/boleifu/go/src/github.com/openconfig/ygot/ygen/commongen.go
using the following YANG input files:
	- ../models/wifi-office.yang
Imported modules were sourced from:
	- /usr/local/google/home/boleifu/workspace/ESDN/openconfig/public/release/models/...
	- /usr/local/google/home/boleifu/workspace/ESDN/openconfig/yang/standard/ietf/RFC/...
	- /usr/local/google/home/boleifu/workspace/ESDN/openconfig/wifi/...
*/
package ocstruct

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled.
func Unmarshal(data []byte, destStruct ygot.GoStruct) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree)
}

// Office represents the /office YANG schema element.
type Office struct {
	AuthServerConfig	*WifiOffice_AuthServerConfig	`path:"auth-server-config" module:"wifi-office"`
	OfficeAp	map[string]*WifiOffice_OfficeAp	`path:"office-ap" module:"wifi-office"`
	OfficeName	*string	`path:"office-name" module:"wifi-office"`
	Vendor	map[string]*WifiOffice_Vendor	`path:"vendor" module:"wifi-office"`
	VendorConfig	map[string]*WifiOffice_VendorConfig	`path:"vendor-config" module:"wifi-office"`
}

// IsYANGGoStruct ensures that Office implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Office) IsYANGGoStruct() {}


// NewOfficeAp creates a new entry in the OfficeAp list of the
// Office struct. The keys of the list are populated from the input
// arguments.
func (t *Office) NewOfficeAp(Hostname string) (*WifiOffice_OfficeAp, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OfficeAp == nil {
		t.OfficeAp = make(map[string]*WifiOffice_OfficeAp)
	}

	key := Hostname

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OfficeAp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OfficeAp", key)
	}

	t.OfficeAp[key] = &WifiOffice_OfficeAp{
		Hostname: &Hostname,
	}

	return t.OfficeAp[key], nil
}

// NewVendor creates a new entry in the Vendor list of the
// Office struct. The keys of the list are populated from the input
// arguments.
func (t *Office) NewVendor(VendorName string) (*WifiOffice_Vendor, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vendor == nil {
		t.Vendor = make(map[string]*WifiOffice_Vendor)
	}

	key := VendorName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vendor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vendor", key)
	}

	t.Vendor[key] = &WifiOffice_Vendor{
		VendorName: &VendorName,
	}

	return t.Vendor[key], nil
}

// NewVendorConfig creates a new entry in the VendorConfig list of the
// Office struct. The keys of the list are populated from the input
// arguments.
func (t *Office) NewVendorConfig(ConfigKey string) (*WifiOffice_VendorConfig, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VendorConfig == nil {
		t.VendorConfig = make(map[string]*WifiOffice_VendorConfig)
	}

	key := ConfigKey

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VendorConfig[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VendorConfig", key)
	}

	t.VendorConfig[key] = &WifiOffice_VendorConfig{
		ConfigKey: &ConfigKey,
	}

	return t.VendorConfig[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *Office) Validate() error {
	if err := ytypes.Validate(SchemaTree["Office"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Office) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_AuthServerConfig represents the /wifi-office/auth-server-config YANG schema element.
type WifiOffice_AuthServerConfig struct {
	AcctPort	*uint16	`path:"acct-port" module:"wifi-office"`
	Address	*string	`path:"address" module:"wifi-office"`
	AuthPort	*uint16	`path:"auth-port" module:"wifi-office"`
	Name	*string	`path:"name" module:"wifi-office"`
	RetransmitAttempts	*uint8	`path:"retransmit-attempts" module:"wifi-office"`
	SecretKey	*string	`path:"secret-key" module:"wifi-office"`
	SourceAddress	*string	`path:"source-address" module:"wifi-office"`
	Timeout	*uint16	`path:"timeout" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_AuthServerConfig implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_AuthServerConfig) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_AuthServerConfig) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_AuthServerConfig"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_AuthServerConfig) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp represents the /wifi-office/office-ap YANG schema element.
type WifiOffice_OfficeAp struct {
	Hostname	*string	`path:"hostname" module:"wifi-office"`
	Radios	*WifiOffice_OfficeAp_Radios	`path:"radios" module:"wifi-office"`
	Ssids	*WifiOffice_OfficeAp_Ssids	`path:"ssids" module:"wifi-office"`
	Vendor	*string	`path:"vendor" module:"wifi-office"`
	VendorConfig	map[string]*WifiOffice_OfficeAp_VendorConfig	`path:"vendor-config" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp) IsYANGGoStruct() {}


// NewVendorConfig creates a new entry in the VendorConfig list of the
// WifiOffice_OfficeAp struct. The keys of the list are populated from the input
// arguments.
func (t *WifiOffice_OfficeAp) NewVendorConfig(ConfigKey string) (*WifiOffice_OfficeAp_VendorConfig, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VendorConfig == nil {
		t.VendorConfig = make(map[string]*WifiOffice_OfficeAp_VendorConfig)
	}

	key := ConfigKey

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VendorConfig[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VendorConfig", key)
	}

	t.VendorConfig[key] = &WifiOffice_OfficeAp_VendorConfig{
		ConfigKey: &ConfigKey,
	}

	return t.VendorConfig[key], nil
}

// ΛListKeyMap returns the keys of the WifiOffice_OfficeAp struct, which is a YANG list entry.
func (t *WifiOffice_OfficeAp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Hostname == nil {
		return nil, fmt.Errorf("nil value for key Hostname")
	}

	return map[string]interface{}{
		"hostname": *t.Hostname,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Radios represents the /wifi-office/office-ap/radios YANG schema element.
type WifiOffice_OfficeAp_Radios struct {
	Radio	map[uint8]*WifiOffice_OfficeAp_Radios_Radio	`path:"radio" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Radios implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Radios) IsYANGGoStruct() {}


// NewRadio creates a new entry in the Radio list of the
// WifiOffice_OfficeAp_Radios struct. The keys of the list are populated from the input
// arguments.
func (t *WifiOffice_OfficeAp_Radios) NewRadio(Id uint8) (*WifiOffice_OfficeAp_Radios_Radio, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Radio == nil {
		t.Radio = make(map[uint8]*WifiOffice_OfficeAp_Radios_Radio)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Radio[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Radio", key)
	}

	t.Radio[key] = &WifiOffice_OfficeAp_Radios_Radio{
		Id: &Id,
	}

	return t.Radio[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Radios) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Radios"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Radios) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Radios_Radio represents the /wifi-office/office-ap/radios/radio YANG schema element.
type WifiOffice_OfficeAp_Radios_Radio struct {
	Config	*WifiOffice_OfficeAp_Radios_Radio_Config	`path:"config" module:"wifi-office"`
	Id	*uint8	`path:"id" module:"wifi-office"`
	Neighbors	*WifiOffice_OfficeAp_Radios_Radio_Neighbors	`path:"neighbors" module:"wifi-office"`
	State	*WifiOffice_OfficeAp_Radios_Radio_State	`path:"state" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Radios_Radio implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Radios_Radio) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the WifiOffice_OfficeAp_Radios_Radio struct, which is a YANG list entry.
func (t *WifiOffice_OfficeAp_Radios_Radio) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Radios_Radio) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Radios_Radio"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Radios_Radio) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Radios_Radio_Config represents the /wifi-office/office-ap/radios/radio/config YANG schema element.
type WifiOffice_OfficeAp_Radios_Radio_Config struct {
	AllowedChannels	[]uint8	`path:"allowed-channels" module:"wifi-office"`
	AntennaGain	*int8	`path:"antenna-gain" module:"wifi-office"`
	Channel	*uint8	`path:"channel" module:"wifi-office"`
	ChannelWidth	*uint8	`path:"channel-width" module:"wifi-office"`
	Dca	*bool	`path:"dca" module:"wifi-office"`
	Dtp	*bool	`path:"dtp" module:"wifi-office"`
	DtpMax	*uint8	`path:"dtp-max" module:"wifi-office"`
	DtpMin	*uint8	`path:"dtp-min" module:"wifi-office"`
	Enabled	*bool	`path:"enabled" module:"wifi-office"`
	Id	*uint8	`path:"id" module:"wifi-office"`
	OperatingFrequency	E_OpenconfigWifiTypes_OPERATING_FREQUENCY	`path:"operating-frequency" module:"wifi-office"`
	Scanning	*bool	`path:"scanning" module:"wifi-office"`
	ScanningDeferClients	*uint8	`path:"scanning-defer-clients" module:"wifi-office"`
	ScanningDeferTraffic	*bool	`path:"scanning-defer-traffic" module:"wifi-office"`
	ScanningDwellTime	*uint16	`path:"scanning-dwell-time" module:"wifi-office"`
	ScanningInterval	*uint8	`path:"scanning-interval" module:"wifi-office"`
	TransmitPower	*uint8	`path:"transmit-power" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Radios_Radio_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Radios_Radio_Config) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Radios_Radio_Config) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Radios_Radio_Config"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Radios_Radio_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Radios_Radio_Neighbors represents the /wifi-office/office-ap/radios/radio/neighbors YANG schema element.
type WifiOffice_OfficeAp_Radios_Radio_Neighbors struct {
	Neighbor	map[string]*WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor	`path:"neighbor" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Radios_Radio_Neighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Radios_Radio_Neighbors) IsYANGGoStruct() {}


// NewNeighbor creates a new entry in the Neighbor list of the
// WifiOffice_OfficeAp_Radios_Radio_Neighbors struct. The keys of the list are populated from the input
// arguments.
func (t *WifiOffice_OfficeAp_Radios_Radio_Neighbors) NewNeighbor(Bssid string) (*WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor)
	}

	key := Bssid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor{
		Bssid: &Bssid,
	}

	return t.Neighbor[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Radios_Radio_Neighbors) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Radios_Radio_Neighbors"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Radios_Radio_Neighbors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor represents the /wifi-office/office-ap/radios/radio/neighbors/neighbor YANG schema element.
type WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor struct {
	Bssid	*string	`path:"bssid" module:"wifi-office"`
	State	*WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor_State	`path:"state" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor struct, which is a YANG list entry.
func (t *WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Bssid == nil {
		return nil, fmt.Errorf("nil value for key Bssid")
	}

	return map[string]interface{}{
		"bssid": *t.Bssid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor_State represents the /wifi-office/office-ap/radios/radio/neighbors/neighbor/state YANG schema element.
type WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor_State struct {
	Bssid	*string	`path:"bssid" module:"wifi-office"`
	Channel	*uint16	`path:"channel" module:"wifi-office"`
	PrimaryChannel	*uint16	`path:"primary-channel" module:"wifi-office"`
	Rssi	*int8	`path:"rssi" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor_State) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor_State"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Radios_Radio_Neighbors_Neighbor_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Radios_Radio_State represents the /wifi-office/office-ap/radios/radio/state YANG schema element.
type WifiOffice_OfficeAp_Radios_Radio_State struct {
	AllowedChannels	[]uint8	`path:"allowed-channels" module:"wifi-office"`
	AntennaGain	*int8	`path:"antenna-gain" module:"wifi-office"`
	BaseRadioMac	*string	`path:"base-radio-mac" module:"wifi-office"`
	Channel	*uint8	`path:"channel" module:"wifi-office"`
	ChannelChangeReason	E_OpenconfigWifiTypes_CHANGE_REASON_TYPE	`path:"channel-change-reason" module:"wifi-office"`
	ChannelWidth	*uint8	`path:"channel-width" module:"wifi-office"`
	Counters	*WifiOffice_OfficeAp_Radios_Radio_State_Counters	`path:"counters" module:"wifi-office"`
	Dca	*bool	`path:"dca" module:"wifi-office"`
	DfsHitTime	*uint64	`path:"dfs-hit-time" module:"wifi-office"`
	Dtp	*bool	`path:"dtp" module:"wifi-office"`
	DtpMax	*uint8	`path:"dtp-max" module:"wifi-office"`
	DtpMin	*uint8	`path:"dtp-min" module:"wifi-office"`
	Enabled	*bool	`path:"enabled" module:"wifi-office"`
	Id	*uint8	`path:"id" module:"wifi-office"`
	OperatingFrequency	E_OpenconfigWifiTypes_OPERATING_FREQUENCY	`path:"operating-frequency" module:"wifi-office"`
	RxDot11ChannelUtilization	*uint8	`path:"rx-dot11-channel-utilization" module:"wifi-office"`
	RxNoiseChannelUtilization	*uint8	`path:"rx-noise-channel-utilization" module:"wifi-office"`
	Scanning	*bool	`path:"scanning" module:"wifi-office"`
	ScanningDeferClients	*uint8	`path:"scanning-defer-clients" module:"wifi-office"`
	ScanningDeferTraffic	*bool	`path:"scanning-defer-traffic" module:"wifi-office"`
	ScanningDwellTime	*uint16	`path:"scanning-dwell-time" module:"wifi-office"`
	ScanningInterval	*uint8	`path:"scanning-interval" module:"wifi-office"`
	TotalChannelUtilization	*uint8	`path:"total-channel-utilization" module:"wifi-office"`
	TransmitPower	*uint8	`path:"transmit-power" module:"wifi-office"`
	TxDot11ChannelUtilization	*uint8	`path:"tx-dot11-channel-utilization" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Radios_Radio_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Radios_Radio_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Radios_Radio_State) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Radios_Radio_State"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Radios_Radio_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Radios_Radio_State_Counters represents the /wifi-office/office-ap/radios/radio/state/counters YANG schema element.
type WifiOffice_OfficeAp_Radios_Radio_State_Counters struct {
	FailedFcsFrames	*uint64	`path:"failed-fcs-frames" module:"wifi-office"`
	NoiseFloor	*int8	`path:"noise-floor" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Radios_Radio_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Radios_Radio_State_Counters) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Radios_Radio_State_Counters) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Radios_Radio_State_Counters"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Radios_Radio_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids represents the /wifi-office/office-ap/ssids YANG schema element.
type WifiOffice_OfficeAp_Ssids struct {
	Ssid	map[string]*WifiOffice_OfficeAp_Ssids_Ssid	`path:"ssid" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids) IsYANGGoStruct() {}


// NewSsid creates a new entry in the Ssid list of the
// WifiOffice_OfficeAp_Ssids struct. The keys of the list are populated from the input
// arguments.
func (t *WifiOffice_OfficeAp_Ssids) NewSsid(Name string) (*WifiOffice_OfficeAp_Ssids_Ssid, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ssid == nil {
		t.Ssid = make(map[string]*WifiOffice_OfficeAp_Ssids_Ssid)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ssid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ssid", key)
	}

	t.Ssid[key] = &WifiOffice_OfficeAp_Ssids_Ssid{
		Name: &Name,
	}

	return t.Ssid[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid represents the /wifi-office/office-ap/ssids/ssid YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid struct {
	BandSteering	*WifiOffice_OfficeAp_Ssids_Ssid_BandSteering	`path:"band-steering" module:"wifi-office"`
	Clients	*WifiOffice_OfficeAp_Ssids_Ssid_Clients	`path:"clients" module:"wifi-office"`
	Config	*WifiOffice_OfficeAp_Ssids_Ssid_Config	`path:"config" module:"wifi-office"`
	Dot11R	*WifiOffice_OfficeAp_Ssids_Ssid_Dot11R	`path:"dot11r" module:"wifi-office"`
	Dot11V	*WifiOffice_OfficeAp_Ssids_Ssid_Dot11V	`path:"dot11v" module:"wifi-office"`
	Dot1XTimers	*WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers	`path:"dot1x-timers" module:"wifi-office"`
	Name	*string	`path:"name" module:"wifi-office"`
	State	*WifiOffice_OfficeAp_Ssids_Ssid_State	`path:"state" module:"wifi-office"`
	Wmm	*WifiOffice_OfficeAp_Ssids_Ssid_Wmm	`path:"wmm" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the WifiOffice_OfficeAp_Ssids_Ssid struct, which is a YANG list entry.
func (t *WifiOffice_OfficeAp_Ssids_Ssid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_BandSteering represents the /wifi-office/office-ap/ssids/ssid/band-steering YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_BandSteering struct {
	Config	*WifiOffice_OfficeAp_Ssids_Ssid_BandSteering_Config	`path:"config" module:"wifi-office"`
	State	*WifiOffice_OfficeAp_Ssids_Ssid_BandSteering_State	`path:"state" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_BandSteering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_BandSteering) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_BandSteering) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_BandSteering"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_BandSteering) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_BandSteering_Config represents the /wifi-office/office-ap/ssids/ssid/band-steering/config YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_BandSteering_Config struct {
	BandSteering	*bool	`path:"band-steering" module:"wifi-office"`
	SteeringRssi	*int8	`path:"steering-rssi" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_BandSteering_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_BandSteering_Config) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_BandSteering_Config) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_BandSteering_Config"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_BandSteering_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_BandSteering_State represents the /wifi-office/office-ap/ssids/ssid/band-steering/state YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_BandSteering_State struct {
	BandSteering	*bool	`path:"band-steering" module:"wifi-office"`
	SteeringRssi	*int8	`path:"steering-rssi" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_BandSteering_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_BandSteering_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_BandSteering_State) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_BandSteering_State"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_BandSteering_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Clients represents the /wifi-office/office-ap/ssids/ssid/clients YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Clients struct {
	Client	map[string]*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client	`path:"client" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Clients implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Clients) IsYANGGoStruct() {}


// NewClient creates a new entry in the Client list of the
// WifiOffice_OfficeAp_Ssids_Ssid_Clients struct. The keys of the list are populated from the input
// arguments.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Clients) NewClient(Mac string) (*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Client == nil {
		t.Client = make(map[string]*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client)
	}

	key := Mac

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Client[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Client", key)
	}

	t.Client[key] = &WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client{
		Mac: &Mac,
	}

	return t.Client[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Clients) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Clients"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Clients) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client represents the /wifi-office/office-ap/ssids/ssid/clients/client YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client struct {
	ClientCapabilities	*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientCapabilities	`path:"client-capabilities" module:"wifi-office"`
	ClientConnection	*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientConnection	`path:"client-connection" module:"wifi-office"`
	ClientRf	*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf	`path:"client-rf" module:"wifi-office"`
	Dot11KNeighbors	*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_Dot11KNeighbors	`path:"dot11k-neighbors" module:"wifi-office"`
	Mac	*string	`path:"mac" module:"wifi-office"`
	State	*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_State	`path:"state" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client struct, which is a YANG list entry.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Mac == nil {
		return nil, fmt.Errorf("nil value for key Mac")
	}

	return map[string]interface{}{
		"mac": *t.Mac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientCapabilities represents the /wifi-office/office-ap/ssids/ssid/clients/client/client-capabilities YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientCapabilities struct {
	State	*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientCapabilities_State	`path:"state" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientCapabilities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientCapabilities) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientCapabilities) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientCapabilities"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientCapabilities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientCapabilities_State represents the /wifi-office/office-ap/ssids/ssid/clients/client/client-capabilities/state YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientCapabilities_State struct {
	ChannelSupport	[]uint8	`path:"channel-support" module:"wifi-office"`
	ClientCapabilities	[]E_OpenconfigWifiTypes_CLIENT_CAPABILITIES	`path:"client-capabilities" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientCapabilities_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientCapabilities_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientCapabilities_State) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientCapabilities_State"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientCapabilities_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientConnection represents the /wifi-office/office-ap/ssids/ssid/clients/client/client-connection YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientConnection struct {
	State	*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientConnection_State	`path:"state" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientConnection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientConnection) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientConnection) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientConnection"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientConnection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientConnection_State represents the /wifi-office/office-ap/ssids/ssid/clients/client/client-connection/state YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientConnection_State struct {
	ClientState	E_OpenconfigWifiTypes_CLIENT_STATE	`path:"client-state" module:"wifi-office"`
	ConnectionTime	*uint16	`path:"connection-time" module:"wifi-office"`
	Hostname	*string	`path:"hostname" module:"wifi-office"`
	Ipv4Address	*string	`path:"ipv4-address" module:"wifi-office"`
	Ipv6Address	*string	`path:"ipv6-address" module:"wifi-office"`
	OperatingSystem	*string	`path:"operating-system" module:"wifi-office"`
	Username	*string	`path:"username" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientConnection_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientConnection_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientConnection_State) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientConnection_State"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientConnection_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf represents the /wifi-office/office-ap/ssids/ssid/clients/client/client-rf YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf struct {
	State	*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State	`path:"state" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State represents the /wifi-office/office-ap/ssids/ssid/clients/client/client-rf/state YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State struct {
	ConnectionMode	E_WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode	`path:"connection-mode" module:"wifi-office"`
	Frequency	*uint8	`path:"frequency" module:"wifi-office"`
	PhyRate	*uint16	`path:"phy-rate" module:"wifi-office"`
	Rssi	*int8	`path:"rssi" module:"wifi-office"`
	Snr	*uint8	`path:"snr" module:"wifi-office"`
	Ss	*uint8	`path:"ss" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_Dot11KNeighbors represents the /wifi-office/office-ap/ssids/ssid/clients/client/dot11k-neighbors YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_Dot11KNeighbors struct {
	State	*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State	`path:"state" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_Dot11KNeighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_Dot11KNeighbors) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_Dot11KNeighbors) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_Dot11KNeighbors"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_Dot11KNeighbors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State represents the /wifi-office/office-ap/ssids/ssid/clients/client/dot11k-neighbors/state YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State struct {
	ChannelLoadReport	*uint8	`path:"channel-load-report" module:"wifi-office"`
	NeighborAntenna	*uint8	`path:"neighbor-antenna" module:"wifi-office"`
	NeighborBssid	*string	`path:"neighbor-bssid" module:"wifi-office"`
	NeighborChannel	*uint8	`path:"neighbor-channel" module:"wifi-office"`
	NeighborRssi	*int8	`path:"neighbor-rssi" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_State represents the /wifi-office/office-ap/ssids/ssid/clients/client/state YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_State struct {
	Counters	*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_State_Counters	`path:"counters" module:"wifi-office"`
	Mac	*string	`path:"mac" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_State) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_State"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_State_Counters represents the /wifi-office/office-ap/ssids/ssid/clients/client/state/counters YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_State_Counters struct {
	RxBytes	*uint64	`path:"rx-bytes" module:"wifi-office"`
	RxRetries	*uint64	`path:"rx-retries" module:"wifi-office"`
	TxBytes	*uint64	`path:"tx-bytes" module:"wifi-office"`
	TxRetries	*uint64	`path:"tx-retries" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_State_Counters) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_State_Counters) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_State_Counters"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Config represents the /wifi-office/office-ap/ssids/ssid/config YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Config struct {
	AdvertiseApname	*bool	`path:"advertise-apname" module:"wifi-office"`
	BasicDataRates	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"basic-data-rates" module:"wifi-office"`
	BroadcastFilter	*bool	`path:"broadcast-filter" module:"wifi-office"`
	Csa	*bool	`path:"csa" module:"wifi-office"`
	DhcpRequired	*bool	`path:"dhcp-required" module:"wifi-office"`
	Dot11K	*bool	`path:"dot11k" module:"wifi-office"`
	Dva	*bool	`path:"dva" module:"wifi-office"`
	Enabled	*bool	`path:"enabled" module:"wifi-office"`
	GtkTimeout	*uint16	`path:"gtk-timeout" module:"wifi-office"`
	Hidden	*bool	`path:"hidden" module:"wifi-office"`
	Ipv6NdpFilter	*bool	`path:"ipv6-ndp-filter" module:"wifi-office"`
	Ipv6NdpFilterTimer	*uint16	`path:"ipv6-ndp-filter-timer" module:"wifi-office"`
	MulticastFilter	*bool	`path:"multicast-filter" module:"wifi-office"`
	Name	*string	`path:"name" module:"wifi-office"`
	Okc	*bool	`path:"okc" module:"wifi-office"`
	OperatingFrequency	E_OpenconfigWifiTypes_OPERATING_FREQUENCY	`path:"operating-frequency" module:"wifi-office"`
	Opmode	E_WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode	`path:"opmode" module:"wifi-office"`
	PtkTimeout	*uint16	`path:"ptk-timeout" module:"wifi-office"`
	QbssLoad	*bool	`path:"qbss-load" module:"wifi-office"`
	ServerGroup	*string	`path:"server-group" module:"wifi-office"`
	StationIsolation	*bool	`path:"station-isolation" module:"wifi-office"`
	SupportedDataRates	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"supported-data-rates" module:"wifi-office"`
	VlanId	*uint16	`path:"vlan-id" module:"wifi-office"`
	Wpa2Psk	*string	`path:"wpa2-psk" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Config) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Config) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Config"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Dot11R represents the /wifi-office/office-ap/ssids/ssid/dot11r YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Dot11R struct {
	Config	*WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config	`path:"config" module:"wifi-office"`
	State	*WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_State	`path:"state" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Dot11R implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Dot11R) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Dot11R) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Dot11R"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Dot11R) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config represents the /wifi-office/office-ap/ssids/ssid/dot11r/config YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config struct {
	Dot11R	*bool	`path:"dot11r" module:"wifi-office"`
	Dot11RDomainid	*uint16	`path:"dot11r-domainid" module:"wifi-office"`
	Dot11RMethod	E_WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod	`path:"dot11r-method" module:"wifi-office"`
	Dot11RR1KeyTimeout	*uint16	`path:"dot11r-r1key-timeout" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_State represents the /wifi-office/office-ap/ssids/ssid/dot11r/state YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_State struct {
	Dot11R	*bool	`path:"dot11r" module:"wifi-office"`
	Dot11RDomainid	*uint16	`path:"dot11r-domainid" module:"wifi-office"`
	Dot11RMethod	E_WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod	`path:"dot11r-method" module:"wifi-office"`
	Dot11RR1KeyTimeout	*uint16	`path:"dot11r-r1key-timeout" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_State) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_State"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Dot11V represents the /wifi-office/office-ap/ssids/ssid/dot11v YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Dot11V struct {
	Config	*WifiOffice_OfficeAp_Ssids_Ssid_Dot11V_Config	`path:"config" module:"wifi-office"`
	State	*WifiOffice_OfficeAp_Ssids_Ssid_Dot11V_State	`path:"state" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Dot11V implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Dot11V) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Dot11V) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Dot11V"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Dot11V) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Dot11V_Config represents the /wifi-office/office-ap/ssids/ssid/dot11v/config YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Dot11V_Config struct {
	Dot11VBssidle	*bool	`path:"dot11v-bssidle" module:"wifi-office"`
	Dot11VBssidleTimeout	*uint16	`path:"dot11v-bssidle-timeout" module:"wifi-office"`
	Dot11VBsstransition	*bool	`path:"dot11v-bsstransition" module:"wifi-office"`
	Dot11VDms	*bool	`path:"dot11v-dms" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Dot11V_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Dot11V_Config) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Dot11V_Config) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Dot11V_Config"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Dot11V_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Dot11V_State represents the /wifi-office/office-ap/ssids/ssid/dot11v/state YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Dot11V_State struct {
	Dot11VBssidle	*bool	`path:"dot11v-bssidle" module:"wifi-office"`
	Dot11VBssidleTimeout	*uint16	`path:"dot11v-bssidle-timeout" module:"wifi-office"`
	Dot11VBsstransition	*bool	`path:"dot11v-bsstransition" module:"wifi-office"`
	Dot11VDms	*bool	`path:"dot11v-dms" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Dot11V_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Dot11V_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Dot11V_State) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Dot11V_State"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Dot11V_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers represents the /wifi-office/office-ap/ssids/ssid/dot1x-timers YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers struct {
	Config	*WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers_Config	`path:"config" module:"wifi-office"`
	State	*WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers_State	`path:"state" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers_Config represents the /wifi-office/office-ap/ssids/ssid/dot1x-timers/config YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers_Config struct {
	BlacklistTime	*uint16	`path:"blacklist-time" module:"wifi-office"`
	MaxAuthFailures	*uint8	`path:"max-auth-failures" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers_Config) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers_Config) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers_Config"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers_State represents the /wifi-office/office-ap/ssids/ssid/dot1x-timers/state YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers_State struct {
	BlacklistTime	*uint16	`path:"blacklist-time" module:"wifi-office"`
	MaxAuthFailures	*uint8	`path:"max-auth-failures" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers_State) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers_State"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Dot1XTimers_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_State represents the /wifi-office/office-ap/ssids/ssid/state YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_State struct {
	AdvertiseApname	*bool	`path:"advertise-apname" module:"wifi-office"`
	BasicDataRates	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"basic-data-rates" module:"wifi-office"`
	BroadcastFilter	*bool	`path:"broadcast-filter" module:"wifi-office"`
	BssChannelUtilization	*uint8	`path:"bss-channel-utilization" module:"wifi-office"`
	Bssid	*string	`path:"bssid" module:"wifi-office"`
	Counters	*WifiOffice_OfficeAp_Ssids_Ssid_State_Counters	`path:"counters" module:"wifi-office"`
	Csa	*bool	`path:"csa" module:"wifi-office"`
	DhcpRequired	*bool	`path:"dhcp-required" module:"wifi-office"`
	Dot11K	*bool	`path:"dot11k" module:"wifi-office"`
	Dva	*bool	`path:"dva" module:"wifi-office"`
	Enabled	*bool	`path:"enabled" module:"wifi-office"`
	GtkTimeout	*uint16	`path:"gtk-timeout" module:"wifi-office"`
	Hidden	*bool	`path:"hidden" module:"wifi-office"`
	Ipv6NdpFilter	*bool	`path:"ipv6-ndp-filter" module:"wifi-office"`
	Ipv6NdpFilterTimer	*uint16	`path:"ipv6-ndp-filter-timer" module:"wifi-office"`
	MulticastFilter	*bool	`path:"multicast-filter" module:"wifi-office"`
	Name	*string	`path:"name" module:"wifi-office"`
	Okc	*bool	`path:"okc" module:"wifi-office"`
	OperatingFrequency	E_OpenconfigWifiTypes_OPERATING_FREQUENCY	`path:"operating-frequency" module:"wifi-office"`
	Opmode	E_WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode	`path:"opmode" module:"wifi-office"`
	PtkTimeout	*uint16	`path:"ptk-timeout" module:"wifi-office"`
	QbssLoad	*bool	`path:"qbss-load" module:"wifi-office"`
	RxBssDot11ChannelUtilization	*uint8	`path:"rx-bss-dot11-channel-utilization" module:"wifi-office"`
	ServerGroup	*string	`path:"server-group" module:"wifi-office"`
	StationIsolation	*bool	`path:"station-isolation" module:"wifi-office"`
	SupportedDataRates	[]E_OpenconfigWifiTypes_DATA_RATE	`path:"supported-data-rates" module:"wifi-office"`
	TxBssDot11ChannelUtilization	*uint8	`path:"tx-bss-dot11-channel-utilization" module:"wifi-office"`
	VlanId	*uint16	`path:"vlan-id" module:"wifi-office"`
	Wpa2Psk	*string	`path:"wpa2-psk" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_State) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_State"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_State_Counters represents the /wifi-office/office-ap/ssids/ssid/state/counters YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_State_Counters struct {
	NumAssociatedClients	*uint8	`path:"num-associated-clients" module:"wifi-office"`
	RxBytesData	*uint64	`path:"rx-bytes-data" module:"wifi-office"`
	RxControl	*uint64	`path:"rx-control" module:"wifi-office"`
	RxDataDist	*WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxDataDist	`path:"rx-data-dist" module:"wifi-office"`
	RxDataWmm	*WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxDataWmm	`path:"rx-data-wmm" module:"wifi-office"`
	RxMcs	*WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxMcs	`path:"rx-mcs" module:"wifi-office"`
	RxMgmt	*uint64	`path:"rx-mgmt" module:"wifi-office"`
	RxRetries	*uint64	`path:"rx-retries" module:"wifi-office"`
	RxRetriesData	*uint64	`path:"rx-retries-data" module:"wifi-office"`
	RxRetriesSubframe	*uint64	`path:"rx-retries-subframe" module:"wifi-office"`
	TxBytesData	*uint64	`path:"tx-bytes-data" module:"wifi-office"`
	TxControl	*uint64	`path:"tx-control" module:"wifi-office"`
	TxDataDist	*WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxDataDist	`path:"tx-data-dist" module:"wifi-office"`
	TxDataWmm	*WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxDataWmm	`path:"tx-data-wmm" module:"wifi-office"`
	TxMcs	*WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxMcs	`path:"tx-mcs" module:"wifi-office"`
	TxMgmt	*uint64	`path:"tx-mgmt" module:"wifi-office"`
	TxRetries	*uint64	`path:"tx-retries" module:"wifi-office"`
	TxRetriesData	*uint64	`path:"tx-retries-data" module:"wifi-office"`
	TxRetriesSubframe	*uint64	`path:"tx-retries-subframe" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_State_Counters) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_State_Counters) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_State_Counters"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxDataDist represents the /wifi-office/office-ap/ssids/ssid/state/counters/rx-data-dist YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxDataDist struct {
	Rx_0_64	*uint64	`path:"rx-0-64" module:"wifi-office"`
	Rx_1025_2048	*uint64	`path:"rx-1025-2048" module:"wifi-office"`
	Rx_129_256	*uint64	`path:"rx-129-256" module:"wifi-office"`
	Rx_131073_262144	*uint64	`path:"rx-131073-262144" module:"wifi-office"`
	Rx_16385_32768	*uint64	`path:"rx-16385-32768" module:"wifi-office"`
	Rx_2049_4096	*uint64	`path:"rx-2049-4096" module:"wifi-office"`
	Rx_257_512	*uint64	`path:"rx-257-512" module:"wifi-office"`
	Rx_262145_524288	*uint64	`path:"rx-262145-524288" module:"wifi-office"`
	Rx_32769_65536	*uint64	`path:"rx-32769-65536" module:"wifi-office"`
	Rx_4097_8192	*uint64	`path:"rx-4097-8192" module:"wifi-office"`
	Rx_513_1024	*uint64	`path:"rx-513-1024" module:"wifi-office"`
	Rx_524289_1048576	*uint64	`path:"rx-524289-1048576" module:"wifi-office"`
	Rx_65_128	*uint64	`path:"rx-65-128" module:"wifi-office"`
	Rx_65537_131072	*uint64	`path:"rx-65537-131072" module:"wifi-office"`
	Rx_8193_16384	*uint64	`path:"rx-8193-16384" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxDataDist implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxDataDist) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxDataDist) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxDataDist"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxDataDist) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxDataWmm represents the /wifi-office/office-ap/ssids/ssid/state/counters/rx-data-wmm YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxDataWmm struct {
	Be	*uint64	`path:"be" module:"wifi-office"`
	Bk	*uint64	`path:"bk" module:"wifi-office"`
	Vi	*uint64	`path:"vi" module:"wifi-office"`
	Vo	*uint64	`path:"vo" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxDataWmm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxDataWmm) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxDataWmm) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxDataWmm"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxDataWmm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxMcs represents the /wifi-office/office-ap/ssids/ssid/state/counters/rx-mcs YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxMcs struct {
	Mcs0	*uint64	`path:"mcs0" module:"wifi-office"`
	Mcs1	*uint64	`path:"mcs1" module:"wifi-office"`
	Mcs2	*uint64	`path:"mcs2" module:"wifi-office"`
	Mcs3	*uint64	`path:"mcs3" module:"wifi-office"`
	Mcs4	*uint64	`path:"mcs4" module:"wifi-office"`
	Mcs5	*uint64	`path:"mcs5" module:"wifi-office"`
	Mcs6	*uint64	`path:"mcs6" module:"wifi-office"`
	Mcs7	*uint64	`path:"mcs7" module:"wifi-office"`
	Mcs8	*uint64	`path:"mcs8" module:"wifi-office"`
	Mcs9	*uint64	`path:"mcs9" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxMcs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxMcs) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxMcs) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxMcs"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_RxMcs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxDataDist represents the /wifi-office/office-ap/ssids/ssid/state/counters/tx-data-dist YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxDataDist struct {
	Tx_0_64	*uint64	`path:"tx-0-64" module:"wifi-office"`
	Tx_1025_2048	*uint64	`path:"tx-1025-2048" module:"wifi-office"`
	Tx_129_256	*uint64	`path:"tx-129-256" module:"wifi-office"`
	Tx_131073_262144	*uint64	`path:"tx-131073-262144" module:"wifi-office"`
	Tx_16385_32768	*uint64	`path:"tx-16385-32768" module:"wifi-office"`
	Tx_2049_4096	*uint64	`path:"tx-2049-4096" module:"wifi-office"`
	Tx_257_512	*uint64	`path:"tx-257-512" module:"wifi-office"`
	Tx_262145_524288	*uint64	`path:"tx-262145-524288" module:"wifi-office"`
	Tx_32769_65536	*uint64	`path:"tx-32769-65536" module:"wifi-office"`
	Tx_4097_8192	*uint64	`path:"tx-4097-8192" module:"wifi-office"`
	Tx_513_1024	*uint64	`path:"tx-513-1024" module:"wifi-office"`
	Tx_524289_1048576	*uint64	`path:"tx-524289-1048576" module:"wifi-office"`
	Tx_65_128	*uint64	`path:"tx-65-128" module:"wifi-office"`
	Tx_65537_131072	*uint64	`path:"tx-65537-131072" module:"wifi-office"`
	Tx_8193_16384	*uint64	`path:"tx-8193-16384" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxDataDist implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxDataDist) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxDataDist) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxDataDist"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxDataDist) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxDataWmm represents the /wifi-office/office-ap/ssids/ssid/state/counters/tx-data-wmm YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxDataWmm struct {
	Be	*uint64	`path:"be" module:"wifi-office"`
	Bk	*uint64	`path:"bk" module:"wifi-office"`
	Vi	*uint64	`path:"vi" module:"wifi-office"`
	Vo	*uint64	`path:"vo" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxDataWmm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxDataWmm) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxDataWmm) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxDataWmm"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxDataWmm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxMcs represents the /wifi-office/office-ap/ssids/ssid/state/counters/tx-mcs YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxMcs struct {
	Mcs0	*uint64	`path:"mcs0" module:"wifi-office"`
	Mcs1	*uint64	`path:"mcs1" module:"wifi-office"`
	Mcs2	*uint64	`path:"mcs2" module:"wifi-office"`
	Mcs3	*uint64	`path:"mcs3" module:"wifi-office"`
	Mcs4	*uint64	`path:"mcs4" module:"wifi-office"`
	Mcs5	*uint64	`path:"mcs5" module:"wifi-office"`
	Mcs6	*uint64	`path:"mcs6" module:"wifi-office"`
	Mcs7	*uint64	`path:"mcs7" module:"wifi-office"`
	Mcs8	*uint64	`path:"mcs8" module:"wifi-office"`
	Mcs9	*uint64	`path:"mcs9" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxMcs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxMcs) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxMcs) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxMcs"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_State_Counters_TxMcs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Wmm represents the /wifi-office/office-ap/ssids/ssid/wmm YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Wmm struct {
	Config	*WifiOffice_OfficeAp_Ssids_Ssid_Wmm_Config	`path:"config" module:"wifi-office"`
	State	*WifiOffice_OfficeAp_Ssids_Ssid_Wmm_State	`path:"state" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Wmm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Wmm) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Wmm) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Wmm"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Wmm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Wmm_Config represents the /wifi-office/office-ap/ssids/ssid/wmm/config YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Wmm_Config struct {
	TrustDscp	*bool	`path:"trust-dscp" module:"wifi-office"`
	WmmBeRemark	[]uint8	`path:"wmm-be-remark" module:"wifi-office"`
	WmmBkRemark	[]uint8	`path:"wmm-bk-remark" module:"wifi-office"`
	WmmViRemark	[]uint8	`path:"wmm-vi-remark" module:"wifi-office"`
	WmmVoRemark	[]uint8	`path:"wmm-vo-remark" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Wmm_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Wmm_Config) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Wmm_Config) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Wmm_Config"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Wmm_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_Ssids_Ssid_Wmm_State represents the /wifi-office/office-ap/ssids/ssid/wmm/state YANG schema element.
type WifiOffice_OfficeAp_Ssids_Ssid_Wmm_State struct {
	TrustDscp	*bool	`path:"trust-dscp" module:"wifi-office"`
	WmmBeRemark	[]uint8	`path:"wmm-be-remark" module:"wifi-office"`
	WmmBkRemark	[]uint8	`path:"wmm-bk-remark" module:"wifi-office"`
	WmmViRemark	[]uint8	`path:"wmm-vi-remark" module:"wifi-office"`
	WmmVoRemark	[]uint8	`path:"wmm-vo-remark" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_Ssids_Ssid_Wmm_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_Ssids_Ssid_Wmm_State) IsYANGGoStruct() {}


// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_Ssids_Ssid_Wmm_State) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_Ssids_Ssid_Wmm_State"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_Ssids_Ssid_Wmm_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_OfficeAp_VendorConfig represents the /wifi-office/office-ap/vendor-config YANG schema element.
type WifiOffice_OfficeAp_VendorConfig struct {
	ConfigKey	*string	`path:"config-key" module:"wifi-office"`
	ConfigValue	*string	`path:"config-value" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_OfficeAp_VendorConfig implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_OfficeAp_VendorConfig) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the WifiOffice_OfficeAp_VendorConfig struct, which is a YANG list entry.
func (t *WifiOffice_OfficeAp_VendorConfig) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ConfigKey == nil {
		return nil, fmt.Errorf("nil value for key ConfigKey")
	}

	return map[string]interface{}{
		"config-key": *t.ConfigKey,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_OfficeAp_VendorConfig) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_OfficeAp_VendorConfig"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_OfficeAp_VendorConfig) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_Vendor represents the /wifi-office/vendor YANG schema element.
type WifiOffice_Vendor struct {
	VendorName	*string	`path:"vendor-name" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_Vendor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_Vendor) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the WifiOffice_Vendor struct, which is a YANG list entry.
func (t *WifiOffice_Vendor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VendorName == nil {
		return nil, fmt.Errorf("nil value for key VendorName")
	}

	return map[string]interface{}{
		"vendor-name": *t.VendorName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_Vendor) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_Vendor"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_Vendor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// WifiOffice_VendorConfig represents the /wifi-office/vendor-config YANG schema element.
type WifiOffice_VendorConfig struct {
	ConfigKey	*string	`path:"config-key" module:"wifi-office"`
	ConfigValue	*string	`path:"config-value" module:"wifi-office"`
}

// IsYANGGoStruct ensures that WifiOffice_VendorConfig implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*WifiOffice_VendorConfig) IsYANGGoStruct() {}


// ΛListKeyMap returns the keys of the WifiOffice_VendorConfig struct, which is a YANG list entry.
func (t *WifiOffice_VendorConfig) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ConfigKey == nil {
		return nil, fmt.Errorf("nil value for key ConfigKey")
	}

	return map[string]interface{}{
		"config-key": *t.ConfigKey,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *WifiOffice_VendorConfig) Validate() error {
	if err := ytypes.Validate(SchemaTree["WifiOffice_VendorConfig"], s); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *WifiOffice_VendorConfig) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E_OpenconfigWifiTypes_CHANGE_REASON_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigWifiTypes_CHANGE_REASON_TYPE. An additional value named
// OpenconfigWifiTypes_CHANGE_REASON_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigWifiTypes_CHANGE_REASON_TYPE int64

// IsYANGGoEnum ensures that OpenconfigWifiTypes_CHANGE_REASON_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigWifiTypes_CHANGE_REASON_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigWifiTypes_CHANGE_REASON_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigWifiTypes_CHANGE_REASON_TYPE.
func (E_OpenconfigWifiTypes_CHANGE_REASON_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigWifiTypes_CHANGE_REASON_TYPE_UNSET corresponds to the value UNSET of OpenconfigWifiTypes_CHANGE_REASON_TYPE
	OpenconfigWifiTypes_CHANGE_REASON_TYPE_UNSET E_OpenconfigWifiTypes_CHANGE_REASON_TYPE = 0
	// OpenconfigWifiTypes_CHANGE_REASON_TYPE_BETTER_CHANNEL corresponds to the value BETTER_CHANNEL of OpenconfigWifiTypes_CHANGE_REASON_TYPE
	OpenconfigWifiTypes_CHANGE_REASON_TYPE_BETTER_CHANNEL E_OpenconfigWifiTypes_CHANGE_REASON_TYPE = 1
	// OpenconfigWifiTypes_CHANGE_REASON_TYPE_DFS corresponds to the value DFS of OpenconfigWifiTypes_CHANGE_REASON_TYPE
	OpenconfigWifiTypes_CHANGE_REASON_TYPE_DFS E_OpenconfigWifiTypes_CHANGE_REASON_TYPE = 2
	// OpenconfigWifiTypes_CHANGE_REASON_TYPE_ERRORS corresponds to the value ERRORS of OpenconfigWifiTypes_CHANGE_REASON_TYPE
	OpenconfigWifiTypes_CHANGE_REASON_TYPE_ERRORS E_OpenconfigWifiTypes_CHANGE_REASON_TYPE = 3
	// OpenconfigWifiTypes_CHANGE_REASON_TYPE_NOISE corresponds to the value NOISE of OpenconfigWifiTypes_CHANGE_REASON_TYPE
	OpenconfigWifiTypes_CHANGE_REASON_TYPE_NOISE E_OpenconfigWifiTypes_CHANGE_REASON_TYPE = 4
)


// E_OpenconfigWifiTypes_CLIENT_CAPABILITIES is a derived int64 type which is used to represent
// the enumerated node OpenconfigWifiTypes_CLIENT_CAPABILITIES. An additional value named
// OpenconfigWifiTypes_CLIENT_CAPABILITIES_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigWifiTypes_CLIENT_CAPABILITIES int64

// IsYANGGoEnum ensures that OpenconfigWifiTypes_CLIENT_CAPABILITIES implements the yang.GoEnum
// interface. This ensures that OpenconfigWifiTypes_CLIENT_CAPABILITIES can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigWifiTypes_CLIENT_CAPABILITIES) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigWifiTypes_CLIENT_CAPABILITIES.
func (E_OpenconfigWifiTypes_CLIENT_CAPABILITIES) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigWifiTypes_CLIENT_CAPABILITIES_UNSET corresponds to the value UNSET of OpenconfigWifiTypes_CLIENT_CAPABILITIES
	OpenconfigWifiTypes_CLIENT_CAPABILITIES_UNSET E_OpenconfigWifiTypes_CLIENT_CAPABILITIES = 0
	// OpenconfigWifiTypes_CLIENT_CAPABILITIES_DOT_11R corresponds to the value DOT_11R of OpenconfigWifiTypes_CLIENT_CAPABILITIES
	OpenconfigWifiTypes_CLIENT_CAPABILITIES_DOT_11R E_OpenconfigWifiTypes_CLIENT_CAPABILITIES = 1
	// OpenconfigWifiTypes_CLIENT_CAPABILITIES_DOT_11V corresponds to the value DOT_11V of OpenconfigWifiTypes_CLIENT_CAPABILITIES
	OpenconfigWifiTypes_CLIENT_CAPABILITIES_DOT_11V E_OpenconfigWifiTypes_CLIENT_CAPABILITIES = 2
	// OpenconfigWifiTypes_CLIENT_CAPABILITIES_MU_BEAMFORMEE corresponds to the value MU_BEAMFORMEE of OpenconfigWifiTypes_CLIENT_CAPABILITIES
	OpenconfigWifiTypes_CLIENT_CAPABILITIES_MU_BEAMFORMEE E_OpenconfigWifiTypes_CLIENT_CAPABILITIES = 3
	// OpenconfigWifiTypes_CLIENT_CAPABILITIES_MU_BEAMFORMER corresponds to the value MU_BEAMFORMER of OpenconfigWifiTypes_CLIENT_CAPABILITIES
	OpenconfigWifiTypes_CLIENT_CAPABILITIES_MU_BEAMFORMER E_OpenconfigWifiTypes_CLIENT_CAPABILITIES = 4
)


// E_OpenconfigWifiTypes_CLIENT_STATE is a derived int64 type which is used to represent
// the enumerated node OpenconfigWifiTypes_CLIENT_STATE. An additional value named
// OpenconfigWifiTypes_CLIENT_STATE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigWifiTypes_CLIENT_STATE int64

// IsYANGGoEnum ensures that OpenconfigWifiTypes_CLIENT_STATE implements the yang.GoEnum
// interface. This ensures that OpenconfigWifiTypes_CLIENT_STATE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigWifiTypes_CLIENT_STATE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigWifiTypes_CLIENT_STATE.
func (E_OpenconfigWifiTypes_CLIENT_STATE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigWifiTypes_CLIENT_STATE_UNSET corresponds to the value UNSET of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_UNSET E_OpenconfigWifiTypes_CLIENT_STATE = 0
	// OpenconfigWifiTypes_CLIENT_STATE_ASSOCIATED corresponds to the value ASSOCIATED of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_ASSOCIATED E_OpenconfigWifiTypes_CLIENT_STATE = 1
	// OpenconfigWifiTypes_CLIENT_STATE_AUTHENTICATED corresponds to the value AUTHENTICATED of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_AUTHENTICATED E_OpenconfigWifiTypes_CLIENT_STATE = 2
	// OpenconfigWifiTypes_CLIENT_STATE_BLACKLISTED corresponds to the value BLACKLISTED of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_BLACKLISTED E_OpenconfigWifiTypes_CLIENT_STATE = 3
	// OpenconfigWifiTypes_CLIENT_STATE_DHCP_FAILURE corresponds to the value DHCP_FAILURE of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_DHCP_FAILURE E_OpenconfigWifiTypes_CLIENT_STATE = 4
	// OpenconfigWifiTypes_CLIENT_STATE_DHCP_REQD corresponds to the value DHCP_REQD of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_DHCP_REQD E_OpenconfigWifiTypes_CLIENT_STATE = 5
	// OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_FAILURE_REJECT corresponds to the value L2AUTH_FAILURE_REJECT of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_FAILURE_REJECT E_OpenconfigWifiTypes_CLIENT_STATE = 6
	// OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_FAILURE_TIMEOUT corresponds to the value L2AUTH_FAILURE_TIMEOUT of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_FAILURE_TIMEOUT E_OpenconfigWifiTypes_CLIENT_STATE = 7
	// OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_REQD corresponds to the value L2AUTH_REQD of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_REQD E_OpenconfigWifiTypes_CLIENT_STATE = 8
	// OpenconfigWifiTypes_CLIENT_STATE_L3AUTH_FAILURE corresponds to the value L3AUTH_FAILURE of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_L3AUTH_FAILURE E_OpenconfigWifiTypes_CLIENT_STATE = 9
	// OpenconfigWifiTypes_CLIENT_STATE_L3AUTH_REQD corresponds to the value L3AUTH_REQD of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_L3AUTH_REQD E_OpenconfigWifiTypes_CLIENT_STATE = 10
	// OpenconfigWifiTypes_CLIENT_STATE_POWERSAVE corresponds to the value POWERSAVE of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_POWERSAVE E_OpenconfigWifiTypes_CLIENT_STATE = 11
)


// E_OpenconfigWifiTypes_DATA_RATE is a derived int64 type which is used to represent
// the enumerated node OpenconfigWifiTypes_DATA_RATE. An additional value named
// OpenconfigWifiTypes_DATA_RATE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigWifiTypes_DATA_RATE int64

// IsYANGGoEnum ensures that OpenconfigWifiTypes_DATA_RATE implements the yang.GoEnum
// interface. This ensures that OpenconfigWifiTypes_DATA_RATE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigWifiTypes_DATA_RATE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigWifiTypes_DATA_RATE.
func (E_OpenconfigWifiTypes_DATA_RATE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigWifiTypes_DATA_RATE_UNSET corresponds to the value UNSET of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_UNSET E_OpenconfigWifiTypes_DATA_RATE = 0
	// OpenconfigWifiTypes_DATA_RATE_RATE_11MB corresponds to the value RATE_11MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_11MB E_OpenconfigWifiTypes_DATA_RATE = 1
	// OpenconfigWifiTypes_DATA_RATE_RATE_12MB corresponds to the value RATE_12MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_12MB E_OpenconfigWifiTypes_DATA_RATE = 2
	// OpenconfigWifiTypes_DATA_RATE_RATE_18MB corresponds to the value RATE_18MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_18MB E_OpenconfigWifiTypes_DATA_RATE = 3
	// OpenconfigWifiTypes_DATA_RATE_RATE_1MB corresponds to the value RATE_1MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_1MB E_OpenconfigWifiTypes_DATA_RATE = 4
	// OpenconfigWifiTypes_DATA_RATE_RATE_24MB corresponds to the value RATE_24MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_24MB E_OpenconfigWifiTypes_DATA_RATE = 5
	// OpenconfigWifiTypes_DATA_RATE_RATE_2MB corresponds to the value RATE_2MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_2MB E_OpenconfigWifiTypes_DATA_RATE = 6
	// OpenconfigWifiTypes_DATA_RATE_RATE_36MB corresponds to the value RATE_36MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_36MB E_OpenconfigWifiTypes_DATA_RATE = 7
	// OpenconfigWifiTypes_DATA_RATE_RATE_48MB corresponds to the value RATE_48MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_48MB E_OpenconfigWifiTypes_DATA_RATE = 8
	// OpenconfigWifiTypes_DATA_RATE_RATE_5_5MB corresponds to the value RATE_5_5MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_5_5MB E_OpenconfigWifiTypes_DATA_RATE = 9
	// OpenconfigWifiTypes_DATA_RATE_RATE_54MB corresponds to the value RATE_54MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_54MB E_OpenconfigWifiTypes_DATA_RATE = 10
	// OpenconfigWifiTypes_DATA_RATE_RATE_6MB corresponds to the value RATE_6MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_6MB E_OpenconfigWifiTypes_DATA_RATE = 11
	// OpenconfigWifiTypes_DATA_RATE_RATE_9MB corresponds to the value RATE_9MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_9MB E_OpenconfigWifiTypes_DATA_RATE = 12
)


// E_OpenconfigWifiTypes_OPERATING_FREQUENCY is a derived int64 type which is used to represent
// the enumerated node OpenconfigWifiTypes_OPERATING_FREQUENCY. An additional value named
// OpenconfigWifiTypes_OPERATING_FREQUENCY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigWifiTypes_OPERATING_FREQUENCY int64

// IsYANGGoEnum ensures that OpenconfigWifiTypes_OPERATING_FREQUENCY implements the yang.GoEnum
// interface. This ensures that OpenconfigWifiTypes_OPERATING_FREQUENCY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigWifiTypes_OPERATING_FREQUENCY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigWifiTypes_OPERATING_FREQUENCY.
func (E_OpenconfigWifiTypes_OPERATING_FREQUENCY) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigWifiTypes_OPERATING_FREQUENCY_UNSET corresponds to the value UNSET of OpenconfigWifiTypes_OPERATING_FREQUENCY
	OpenconfigWifiTypes_OPERATING_FREQUENCY_UNSET E_OpenconfigWifiTypes_OPERATING_FREQUENCY = 0
	// OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_2GHZ corresponds to the value FREQ_2GHZ of OpenconfigWifiTypes_OPERATING_FREQUENCY
	OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_2GHZ E_OpenconfigWifiTypes_OPERATING_FREQUENCY = 1
	// OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_2_5_GHZ corresponds to the value FREQ_2_5_GHZ of OpenconfigWifiTypes_OPERATING_FREQUENCY
	OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_2_5_GHZ E_OpenconfigWifiTypes_OPERATING_FREQUENCY = 2
	// OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_5GHZ corresponds to the value FREQ_5GHZ of OpenconfigWifiTypes_OPERATING_FREQUENCY
	OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_5GHZ E_OpenconfigWifiTypes_OPERATING_FREQUENCY = 3
)


// E_WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode is a derived int64 type which is used to represent
// the enumerated node WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode. An additional value named
// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode int64

// IsYANGGoEnum ensures that WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode implements the yang.GoEnum
// interface. This ensures that WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode can be identified as a
// mapped type for a YANG enumeration.
func (E_WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode.
func (E_WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_UNSET corresponds to the value UNSET of WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_UNSET E_WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 0
	// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_A corresponds to the value A of WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_A E_WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 1
	// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_B corresponds to the value B of WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_B E_WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 2
	// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_G corresponds to the value G of WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_G E_WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 3
	// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_N corresponds to the value N of WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_N E_WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 4
	// WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_AC corresponds to the value AC of WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_AC E_WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 5
)


// E_WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode is a derived int64 type which is used to represent
// the enumerated node WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode. An additional value named
// WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode int64

// IsYANGGoEnum ensures that WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode implements the yang.GoEnum
// interface. This ensures that WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode can be identified as a
// mapped type for a YANG enumeration.
func (E_WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode.
func (E_WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode_UNSET corresponds to the value UNSET of WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode
	WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode_UNSET E_WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode = 0
	// WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode_OPEN corresponds to the value OPEN of WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode
	WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode_OPEN E_WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode = 1
	// WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode_WPA2_PERSONAL corresponds to the value WPA2_PERSONAL of WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode
	WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode_WPA2_PERSONAL E_WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode = 2
	// WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode_WPA2_ENTERPRISE corresponds to the value WPA2_ENTERPRISE of WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode
	WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode_WPA2_ENTERPRISE E_WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode = 3
)


// E_WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod is a derived int64 type which is used to represent
// the enumerated node WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod. An additional value named
// WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod int64

// IsYANGGoEnum ensures that WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod implements the yang.GoEnum
// interface. This ensures that WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod can be identified as a
// mapped type for a YANG enumeration.
func (E_WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod.
func (E_WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod_UNSET corresponds to the value UNSET of WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod
	WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod_UNSET E_WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod = 0
	// WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod_OVA corresponds to the value OVA of WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod
	WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod_OVA E_WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod = 1
	// WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod_ODS corresponds to the value ODS of WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod
	WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod_ODS E_WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod = 2
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_OpenconfigWifiTypes_CHANGE_REASON_TYPE": {
		1: {Name: "BETTER-CHANNEL", DefiningModule: "openconfig-wifi-types"},
		2: {Name: "DFS", DefiningModule: "openconfig-wifi-types"},
		3: {Name: "ERRORS", DefiningModule: "openconfig-wifi-types"},
		4: {Name: "NOISE", DefiningModule: "openconfig-wifi-types"},
	},
	"E_OpenconfigWifiTypes_CLIENT_CAPABILITIES": {
		1: {Name: "DOT_11R", DefiningModule: "openconfig-wifi-types"},
		2: {Name: "DOT_11V", DefiningModule: "openconfig-wifi-types"},
		3: {Name: "MU_BEAMFORMEE", DefiningModule: "openconfig-wifi-types"},
		4: {Name: "MU_BEAMFORMER", DefiningModule: "openconfig-wifi-types"},
	},
	"E_OpenconfigWifiTypes_CLIENT_STATE": {
		1: {Name: "ASSOCIATED", DefiningModule: "openconfig-wifi-types"},
		2: {Name: "AUTHENTICATED", DefiningModule: "openconfig-wifi-types"},
		3: {Name: "BLACKLISTED", DefiningModule: "openconfig-wifi-types"},
		4: {Name: "DHCP_FAILURE", DefiningModule: "openconfig-wifi-types"},
		5: {Name: "DHCP_REQD", DefiningModule: "openconfig-wifi-types"},
		6: {Name: "L2AUTH_FAILURE_REJECT", DefiningModule: "openconfig-wifi-types"},
		7: {Name: "L2AUTH_FAILURE_TIMEOUT", DefiningModule: "openconfig-wifi-types"},
		8: {Name: "L2AUTH_REQD", DefiningModule: "openconfig-wifi-types"},
		9: {Name: "L3AUTH_FAILURE", DefiningModule: "openconfig-wifi-types"},
		10: {Name: "L3AUTH_REQD", DefiningModule: "openconfig-wifi-types"},
		11: {Name: "POWERSAVE", DefiningModule: "openconfig-wifi-types"},
	},
	"E_OpenconfigWifiTypes_DATA_RATE": {
		1: {Name: "RATE_11MB", DefiningModule: "openconfig-wifi-types"},
		2: {Name: "RATE_12MB", DefiningModule: "openconfig-wifi-types"},
		3: {Name: "RATE_18MB", DefiningModule: "openconfig-wifi-types"},
		4: {Name: "RATE_1MB", DefiningModule: "openconfig-wifi-types"},
		5: {Name: "RATE_24MB", DefiningModule: "openconfig-wifi-types"},
		6: {Name: "RATE_2MB", DefiningModule: "openconfig-wifi-types"},
		7: {Name: "RATE_36MB", DefiningModule: "openconfig-wifi-types"},
		8: {Name: "RATE_48MB", DefiningModule: "openconfig-wifi-types"},
		9: {Name: "RATE_5.5MB", DefiningModule: "openconfig-wifi-types"},
		10: {Name: "RATE_54MB", DefiningModule: "openconfig-wifi-types"},
		11: {Name: "RATE_6MB", DefiningModule: "openconfig-wifi-types"},
		12: {Name: "RATE_9MB", DefiningModule: "openconfig-wifi-types"},
	},
	"E_OpenconfigWifiTypes_OPERATING_FREQUENCY": {
		1: {Name: "FREQ_2GHZ", DefiningModule: "openconfig-wifi-types"},
		2: {Name: "FREQ_2_5_GHZ", DefiningModule: "openconfig-wifi-types"},
		3: {Name: "FREQ_5GHZ", DefiningModule: "openconfig-wifi-types"},
	},
	"E_WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode": {
		1: {Name: "A"},
		2: {Name: "B"},
		3: {Name: "G"},
		4: {Name: "N"},
		5: {Name: "AC"},
	},
	"E_WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode": {
		1: {Name: "OPEN"},
		2: {Name: "WPA2_PERSONAL"},
		3: {Name: "WPA2_ENTERPRISE"},
	},
	"E_WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod": {
		1: {Name: "OVA"},
		2: {Name: "ODS"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x9d, 0x6d, 0x53, 0xdb, 0xc8,
		0xd2, 0xf7, 0xdf, 0xf3, 0x29, 0x28, 0xd7, 0xb9, 0xaa, 0xc2, 0xb9, 0x32, 0xc1, 0xb2, 0x2d, 0x63,
		0x78, 0xb3, 0xe5, 0x10, 0x67, 0x37, 0xf7, 0x26, 0x90, 0x05, 0x76, 0xf7, 0xde, 0x4d, 0x38, 0x2e,
		0x21, 0x8f, 0x41, 0x85, 0x2d, 0x79, 0xa5, 0x31, 0x81, 0x93, 0xf0, 0xdd, 0xaf, 0x92, 0xfc, 0x8c,
		0x9f, 0x34, 0x33, 0x2d, 0x5b, 0x92, 0xff, 0x79, 0x01, 0x04, 0xa4, 0xb6, 0x34, 0xd3, 0xd3, 0xbf,
		0xee, 0x9e, 0x9e, 0x99, 0xef, 0x7b, 0xfb, 0xfb, 0xfb, 0xfb, 0x85, 0x33, 0xab, 0xcb, 0x0b, 0x27,
		0xfb, 0x05, 0xaf, 0xdd, 0x76, 0x6c, 0x5e, 0x78, 0x3d, 0xf8, 0xed, 0xaf, 0x8e, 0xdb, 0x2a, 0x9c,
		0xec, 0x1b, 0xc3, 0xff, 0x9e, 0x7a, 0x6e, 0xdb, 0xb9, 0x2d, 0x9c, 0xec, 0x17, 0x87, 0xbf, 0x78,
		0xe7, 0xf8, 0x85, 0x93, 0xfd, 0x81, 0x88, 0xe8, 0x17, 0x56, 0x5f, 0xdc, 0xb1, 0x80, 0xfb, 0x0f,
		0xdc, 0x67, 0xf6, 0xe8, 0xea, 0xc9, 0xdf, 0x67, 0x3e, 0x6a, 0xc1, 0xb5, 0xaf, 0x67, 0xaf, 0x9c,
		0xfd, 0xf8, 0xf1, 0xaf, 0x5f, 0x3e, 0xc6, 0xf8, 0x0f, 0x9f, 0x7d, 0xde, 0x76, 0x1e, 0xe7, 0x3e,
		0x71, 0xe6, 0x53, 0xbf, 0x39, 0x6d, 0x87, 0xcd, 0xbc, 0xe5, 0xcc, 0x65, 0x97, 0x5e, 0xdf, 0xb7,
		0xf9, 0x42, 0x11, 0x83, 0x47, 0xe2, 0x4f, 0xdf, 0x3c, 0x3f, 0x7c, 0xaa, 0x42, 0x6f, 0xf0, 0x69,
		0xaf, 0x17, 0x5f, 0xf8, 0x8b, 0x15, 0xd4, 0xfd, 0xdb, 0x7e, 0x97, 0xbb, 0xa2, 0x70, 0xb2, 0x2f,
		0xfc, 0x3e, 0x5f, 0x72, 0xe1, 0xd4, 0x55, 0x33, 0x0f, 0x37, 0x77, 0xf5, 0xf3, 0xcc, 0x6f, 0x9e,
		0x5f, 0xbc, 0xfb, 0xcb, 0xae, 0x98, 0x74, 0x89, 0x6d, 0x0b, 0xd6, 0xf3, 0x7c, 0xb1, 0xfc, 0xa5,
		0xc6, 0x3d, 0x32, 0xbe, 0x74, 0xc9, 0xb3, 0xbe, 0xe3, 0x6d, 0xab, 0xdf, 0x89, 0x1e, 0xd5, 0xa8,
		0x19, 0xe5, 0x65, 0x97, 0x0d, 0xfb, 0xad, 0xb8, 0xe4, 0xcf, 0xcb, 0xfa, 0x6f, 0x7c, 0xc1, 0xd5,
		0x53, 0x6f, 0x79, 0x17, 0xcc, 0x3c, 0x71, 0xf8, 0xb0, 0xcc, 0xed, 0x77, 0x6f, 0xb8, 0xbf, 0xe4,
		0x61, 0xa6, 0x1f, 0xa8, 0xba, 0xe2, 0x92, 0x0b, 0xcb, 0xbd, 0x0d, 0x45, 0x7e, 0x59, 0x7a, 0x49,
		0xf8, 0xef, 0xfb, 0xca, 0xbf, 0x46, 0x82, 0x3e, 0x39, 0xee, 0xca, 0x67, 0x97, 0x68, 0xa9, 0xb9,
		0xcb, 0xff, 0xb0, 0x3a, 0x7d, 0x2e, 0x71, 0xfd, 0x7b, 0xdf, 0xb2, 0x85, 0xe3, 0xb9, 0xef, 0x9c,
		0x5b, 0x47, 0x04, 0xe1, 0x8d, 0x6b, 0xef, 0x7b, 0x7e, 0x1d, 0xe3, 0x15, 0xad, 0xc7, 0xc4, 0x5f,
		0xb1, 0x6a, 0x9a, 0x65, 0x33, 0xc1, 0xd7, 0xdc, 0x53, 0xfb, 0xeb, 0xf5, 0x5e, 0xbc, 0xeb, 0x17,
		0x34, 0x63, 0xc1, 0x6a, 0xb5, 0x7c, 0x1e, 0x04, 0x31, 0xc6, 0xe1, 0xf0, 0xc2, 0xad, 0x0f, 0x2f,
		0xa7, 0xc7, 0x56, 0x3f, 0xcb, 0x8c, 0x99, 0x3e, 0x5e, 0x71, 0xcd, 0xf0, 0x33, 0xb5, 0x47, 0xd7,
		0xe4, 0xc9, 0x1e, 0x2a, 0x31, 0x9e, 0x6d, 0xee, 0x19, 0x6b, 0x31, 0xae, 0xfd, 0x6c, 0x09, 0xc1,
		0x7d, 0x77, 0xed, 0xe3, 0x8e, 0x6f, 0x78, 0xf5, 0xea, 0x4b, 0x91, 0x1d, 0x5f, 0xff, 0xf8, 0x62,
		0xb0, 0xe3, 0xeb, 0xc1, 0x8f, 0x46, 0xf4, 0x6d, 0xf0, 0x73, 0xe9, 0x4b, 0x91, 0x55, 0x46, 0x3f,
		0x9b, 0x5f, 0x8a, 0xcc, 0xbc, 0x3e, 0xf8, 0xfa, 0xf5, 0xcd, 0xc1, 0xf7, 0xf2, 0xb3, 0xfc, 0x8d,
		0xaf, 0xfe, 0xe7, 0xcb, 0xd7, 0xaf, 0xbd, 0xef, 0x67, 0xcf, 0xe1, 0xd7, 0x8f, 0xcf, 0xd7, 0xff,
		0x7b, 0xf0, 0x53, 0x61, 0xed, 0x53, 0x5e, 0xef, 0x69, 0x0c, 0x79, 0xb9, 0x5e, 0xa9, 0xa6, 0xa8,
		0x57, 0x4e, 0x7e, 0x84, 0x6d, 0x67, 0xb1, 0x76, 0x9d, 0xbd, 0xbf, 0xfe, 0x5e, 0x7c, 0x5d, 0x79,
		0x3e, 0x38, 0x39, 0x78, 0xf5, 0xf2, 0x77, 0x27, 0x07, 0xdf, 0x8b, 0xaf, 0xcd, 0xe7, 0x57, 0xaf,
		0x16, 0xfc, 0xe5, 0xa7, 0x45, 0x32, 0x0e, 0x7e, 0xbc, 0x7a, 0xf5, 0x6a, 0xd8, 0x1f, 0x33, 0x7d,
		0xf4, 0xa5, 0x68, 0x5c, 0xff, 0x14, 0xfd, 0x38, 0xf8, 0x3a, 0xee, 0xe5, 0x58, 0x17, 0x1f, 0x2c,
		0xec, 0xdb, 0xd7, 0xb1, 0x55, 0xf0, 0x3f, 0x27, 0xd7, 0xff, 0x7b, 0x72, 0xf0, 0xbd, 0xfa, 0x3c,
		0xfa, 0x39, 0xfa, 0x7a, 0xf0, 0xe3, 0xd5, 0x9b, 0x7f, 0x7f, 0xfd, 0xfa, 0xe6, 0xcd, 0xbf, 0x0f,
		0x06, 0x0f, 0x3e, 0xbc, 0xee, 0xdf, 0x83, 0xbf, 0xfe, 0x74, 0x72, 0x32, 0xf7, 0xab, 0x83, 0x57,
		0xff, 0xf3, 0x86, 0x42, 0xad, 0x92, 0x31, 0xa2, 0xa1, 0xd7, 0x18, 0xd3, 0x9d, 0x19, 0x5f, 0x1a,
		0xcb, 0x9d, 0x29, 0xc1, 0x9d, 0x81, 0x3b, 0x03, 0x77, 0x26, 0xf6, 0x48, 0x74, 0x07, 0x4a, 0xbb,
		0x66, 0x10, 0x46, 0x57, 0x6d, 0x7d, 0x60, 0x05, 0xc2, 0x77, 0xdc, 0xdb, 0x38, 0x4e, 0x4c, 0x4d,
		0xa3, 0x45, 0x7c, 0x2e, 0x7c, 0xcb, 0x0d, 0xba, 0x8e, 0x60, 0x21, 0xac, 0xba, 0x3d, 0x11, 0xc3,
		0xd9, 0x5b, 0x74, 0xd3, 0xd6, 0xdb, 0xab, 0xef, 0xb8, 0xa2, 0x16, 0xa3, 0xb9, 0x4c, 0x98, 0xa0,
		0xcc, 0x98, 0xa0, 0x92, 0x99, 0x33, 0x03, 0x14, 0x70, 0xdb, 0xe7, 0x82, 0xdd, 0xf3, 0xa7, 0xf5,
		0xa3, 0x6c, 0xea, 0xda, 0xad, 0x0f, 0x2e, 0xdf, 0xeb, 0x0b, 0xc7, 0xbd, 0x65, 0x3d, 0x2b, 0x08,
		0xa2, 0x64, 0x52, 0xc2, 0x66, 0x29, 0x88, 0x72, 0x5a, 0x2c, 0x76, 0xf8, 0xf9, 0xe2, 0x7a, 0x44,
		0xa1, 0x88, 0x42, 0x11, 0x85, 0x22, 0x0a, 0x45, 0x14, 0x3a, 0x79, 0x51, 0xe1, 0x74, 0xb9, 0xd7,
		0x8f, 0x11, 0x83, 0x8e, 0x2e, 0x4c, 0x85, 0x47, 0x67, 0x54, 0x11, 0x55, 0x22, 0xaa, 0x4c, 0x91,
		0x53, 0xb7, 0x72, 0x46, 0xab, 0xee, 0xba, 0x9e, 0xb0, 0xc2, 0x47, 0x5e, 0x3c, 0xb1, 0x15, 0xd8,
		0x77, 0xbc, 0x6b, 0xf5, 0x2c, 0x71, 0x17, 0xea, 0xf7, 0xe1, 0xd4, 0xdc, 0xd9, 0xe1, 0xda, 0xa9,
		0xc5, 0x81, 0x00, 0xe1, 0xf7, 0x6d, 0x31, 0x0c, 0x63, 0x0b, 0x7f, 0x3a, 0x6d, 0xe7, 0x3c, 0xba,
		0xbd, 0x59, 0xef, 0x8b, 0xbb, 0xcb, 0xe8, 0xee, 0xe1, 0x00, 0xdc, 0x5b, 0xfc, 0xd4, 0x53, 0x4f,
		0x3c, 0x9c, 0x38, 0x65, 0x56, 0x6f, 0xf9, 0x84, 0xe7, 0xe4, 0x12, 0xcc, 0x73, 0xd2, 0xcf, 0x73,
		0xde, 0x79, 0x81, 0x88, 0x97, 0x92, 0x18, 0x5f, 0xb9, 0x75, 0xa3, 0xdc, 0xf2, 0xba, 0x96, 0xe3,
		0xb2, 0x15, 0x0f, 0x13, 0xd7, 0x41, 0x29, 0x7c, 0xe4, 0xee, 0x6d, 0x34, 0x12, 0x32, 0x61, 0x9b,
		0x8d, 0x5d, 0x08, 0xb7, 0xcb, 0x29, 0xb4, 0xcc, 0x2b, 0x34, 0x28, 0xae, 0x6b, 0x5b, 0x08, 0xdd,
		0x37, 0x8b, 0xfd, 0xb7, 0xce, 0xfe, 0x2e, 0xb2, 0xe3, 0xe6, 0xf5, 0xd4, 0x7f, 0xbe, 0x7e, 0x65,
		0xcd, 0xeb, 0xd0, 0x91, 0xad, 0x1a, 0xcf, 0x07, 0x3f, 0x4d, 0x7e, 0x7f, 0x1d, 0xba, 0xa0, 0xff,
		0x56, 0xb9, 0xeb, 0xa7, 0x83, 0x1f, 0x5f, 0xbf, 0xbe, 0x29, 0x24, 0xe2, 0xc4, 0xf9, 0x56, 0xcb,
		0xf1, 0xe2, 0x64, 0xe8, 0x06, 0xd7, 0xad, 0xb6, 0x16, 0x86, 0xaa, 0xb5, 0x58, 0x61, 0xcc, 0xe7,
		0x09, 0x62, 0xb3, 0xc8, 0x74, 0xf6, 0xee, 0x9e, 0x56, 0xd9, 0x8b, 0x35, 0xc6, 0x5d, 0xda, 0xc8,
		0x4b, 0x1b, 0xfb, 0x85, 0x46, 0x7f, 0xfa, 0xe1, 0xf7, 0xe4, 0x54, 0xf7, 0x79, 0xd9, 0x04, 0xce,
		0x12, 0x18, 0xcc, 0x76, 0xf1, 0xfa, 0x86, 0x98, 0xe9, 0xe9, 0x75, 0x8d, 0xb0, 0xba, 0xc3, 0x63,
		0x77, 0xbc, 0x8c, 0x02, 0x28, 0x2a, 0x82, 0xac, 0x42, 0x28, 0x2b, 0x86, 0xb2, 0x82, 0xa8, 0x2b,
		0x4a, 0x4c, 0x4b, 0xb8, 0xa6, 0xed, 0xd7, 0x29, 0xd0, 0xf8, 0xc2, 0x25, 0xc5, 0x6c, 0x6b, 0x3b,
		0x6a, 0xa9, 0xf7, 0xa9, 0xa1, 0x5a, 0xd2, 0x2a, 0xa6, 0xa2, 0x6a, 0x9a, 0x2a, 0xa7, 0xaa, 0x7a,
		0xda, 0x2a, 0xa8, 0xad, 0x8a, 0xfa, 0x2a, 0x19, 0x4f, 0x35, 0x25, 0xfc, 0x15, 0x29, 0x55, 0x1d,
		0xdf, 0x60, 0x75, 0x3a, 0xde, 0x37, 0xde, 0x62, 0xf6, 0x9d, 0xe5, 0xba, 0xbc, 0x13, 0xc8, 0xf7,
		0xc1, 0x78, 0x22, 0xfd, 0xa5, 0x24, 0xc9, 0x96, 0x94, 0xf3, 0xa0, 0x94, 0xd5, 0x3b, 0xbe, 0x03,
		0xbe, 0x7e, 0xd8, 0x0e, 0xdf, 0x94, 0x89, 0x50, 0xd4, 0x6b, 0x79, 0x41, 0xeb, 0xe7, 0xc7, 0x34,
		0x93, 0x2c, 0xea, 0x0e, 0x3e, 0x89, 0xe3, 0x4f, 0xdc, 0xd7, 0xba, 0x49, 0x1c, 0x4a, 0xdf, 0x5a,
		0x73, 0xa0, 0x6a, 0x07, 0x1c, 0x9b, 0x6a, 0xda, 0xd8, 0xf3, 0x81, 0x1b, 0x69, 0xdc, 0xbd, 0xcd,
		0xdc, 0x75, 0xbd, 0x97, 0x60, 0x97, 0x17, 0x3e, 0x3a, 0x81, 0xa8, 0x0b, 0xe1, 0xab, 0x19, 0x9f,
		0x4f, 0x8e, 0xdb, 0xe8, 0xf0, 0x10, 0x39, 0x61, 0x5b, 0xba, 0xfd, 0x4e, 0x47, 0xc1, 0x7a, 0x7c,
		0xb2, 0x1e, 0xf5, 0x85, 0x9c, 0xfb, 0x2d, 0xee, 0xf3, 0xd6, 0xdb, 0xa7, 0xa1, 0x88, 0xbd, 0x64,
		0x3a, 0x45, 0xa2, 0x79, 0x0b, 0x96, 0x2b, 0xb8, 0xeb, 0x5a, 0xec, 0xd6, 0x52, 0xb0, 0x52, 0x13,
		0x92, 0x4d, 0x4b, 0xc9, 0x3d, 0xc5, 0xd6, 0x14, 0x71, 0x10, 0xb9, 0xa1, 0xf9, 0x83, 0x97, 0x41,
		0x64, 0x61, 0x8d, 0x52, 0x0d, 0xf8, 0x4a, 0x0a, 0x5f, 0x46, 0xe9, 0x08, 0xf8, 0xda, 0x86, 0x25,
		0x1e, 0xfa, 0xc6, 0xea, 0x46, 0x78, 0x24, 0x20, 0xf7, 0xf6, 0xb7, 0xaf, 0x69, 0x80, 0x11, 0x3d,
		0xe8, 0xda, 0x08, 0x98, 0xdf, 0xc4, 0x9a, 0xb6, 0x8a, 0xe8, 0x61, 0x9b, 0xe6, 0x97, 0x7d, 0x73,
		0x5a, 0xd1, 0x7c, 0x9f, 0x9e, 0x11, 0x1e, 0x8a, 0x91, 0x34, 0x8d, 0x53, 0x0b, 0x27, 0x4a, 0x45,
		0xd8, 0x71, 0xd8, 0x71, 0x64, 0x81, 0x90, 0x05, 0x82, 0x1d, 0x97, 0xb2, 0xe3, 0x2d, 0xdb, 0x52,
		0xb7, 0xde, 0xe1, 0xcd, 0xea, 0x36, 0x5b, 0xf8, 0x7d, 0x9e, 0x7f, 0xab, 0x7d, 0xe3, 0x79, 0x1d,
		0x6e, 0xb9, 0x3a, 0x09, 0x10, 0x23, 0x0d, 0x7a, 0x22, 0x7a, 0x1a, 0x7a, 0x22, 0x7a, 0xd0, 0x93,
		0x9d, 0xd1, 0x13, 0xd6, 0x55, 0x00, 0xcc, 0xb4, 0xae, 0x44, 0x02, 0xd4, 0xf5, 0xc5, 0x30, 0xe1,
		0x0b, 0xc2, 0x17, 0x84, 0x2f, 0x08, 0x5f, 0x10, 0xbe, 0xa0, 0xbc, 0xed, 0xd6, 0x99, 0xd7, 0x1a,
		0x09, 0x50, 0xb7, 0xdd, 0x65, 0x98, 0x6e, 0x98, 0x6e, 0x98, 0x6e, 0x98, 0x6e, 0x98, 0x6e, 0x29,
		0xd3, 0xcd, 0x5d, 0xeb, 0xa6, 0xc3, 0x5b, 0xea, 0xa6, 0x7b, 0x24, 0x00, 0x61, 0xda, 0x4e, 0x84,
		0x69, 0x8e, 0x86, 0xaa, 0x38, 0x2d, 0x40, 0x1a, 0x90, 0x06, 0xa4, 0x01, 0x69, 0x40, 0x5a, 0xca,
		0xe8, 0x7a, 0x3d, 0xee, 0x5b, 0xd1, 0x9e, 0x2b, 0x6d, 0x9f, 0xff, 0xd3, 0xe7, 0xae, 0xfd, 0xa4,
		0x6e, 0x85, 0x17, 0x09, 0xcb, 0x7f, 0x29, 0x61, 0x8b, 0xbb, 0xc2, 0x11, 0x4f, 0x3e, 0x6f, 0xeb,
		0x10, 0x58, 0xc5, 0x3a, 0x7f, 0x18, 0x7e, 0xf4, 0x5b, 0x2b, 0xe0, 0xca, 0x43, 0x7a, 0xfc, 0x22,
		0xe7, 0x9f, 0x1b, 0x17, 0xf5, 0xab, 0x0f, 0x67, 0x3f, 0x37, 0xdf, 0x5f, 0x34, 0x7e, 0xfb, 0xbd,
		0x71, 0x76, 0xfa, 0x57, 0x41, 0x6d, 0x50, 0x0e, 0x86, 0x75, 0xa0, 0xcc, 0x0d, 0x3d, 0x76, 0xcc,
		0xbc, 0x54, 0xf8, 0x2a, 0x4d, 0xf3, 0xe7, 0x5f, 0xfe, 0x2e, 0x6c, 0xc3, 0xd6, 0x52, 0xbe, 0x44,
		0x29, 0x17, 0x2f, 0xd1, 0x34, 0x9b, 0x7a, 0xef, 0xa1, 0x74, 0xe7, 0xf5, 0x5e, 0xb2, 0x9f, 0x93,
		0x8c, 0x6d, 0x0e, 0x6c, 0xcb, 0x75, 0x1d, 0xf7, 0x56, 0xdd, 0x20, 0x8f, 0x25, 0x20, 0x84, 0xda,
		0x89, 0x10, 0x6a, 0xd4, 0xdf, 0xac, 0xc5, 0xdb, 0xdc, 0x67, 0x76, 0xc7, 0x19, 0xae, 0x76, 0xd0,
		0xd4, 0x9f, 0x17, 0xf2, 0x10, 0x6a, 0x21, 0xd4, 0x42, 0xa8, 0x85, 0x50, 0x0b, 0xa1, 0x96, 0x86,
		0x71, 0x16, 0xbe, 0xd5, 0x6e, 0x3b, 0x36, 0x99, 0x71, 0x1e, 0xc9, 0x03, 0xab, 0xb3, 0xc6, 0xea,
		0x6f, 0xbc, 0xd3, 0x61, 0xc2, 0xe9, 0x72, 0x0a, 0x5d, 0x98, 0x08, 0xdb, 0x09, 0x4a, 0xaf, 0xdc,
		0xb8, 0x6f, 0xdd, 0xbb, 0x56, 0x81, 0x69, 0x60, 0x3a, 0xa5, 0x98, 0x96, 0xd8, 0xc0, 0x10, 0xa0,
		0x4e, 0xc8, 0x32, 0x3b, 0xae, 0xe0, 0xfe, 0x83, 0xd5, 0x21, 0xb0, 0xcb, 0x63, 0x51, 0x88, 0x9d,
		0x10, 0x3b, 0xc1, 0x28, 0x23, 0x76, 0x82, 0x49, 0x96, 0x31, 0xc9, 0xe3, 0x83, 0x40, 0x7a, 0xde,
		0x37, 0xee, 0xab, 0xdb, 0xe3, 0x17, 0x72, 0xd4, 0xd3, 0xa2, 0xc7, 0x30, 0xe4, 0x30, 0xe4, 0x30,
		0xe4, 0x30, 0xe4, 0x30, 0xe4, 0xc4, 0xbb, 0xf9, 0xad, 0xd9, 0xdc, 0x7c, 0x85, 0xd7, 0xbe, 0x74,
		0xd3, 0xf3, 0xf1, 0xf6, 0xe2, 0x87, 0x83, 0x0d, 0x6b, 0x07, 0xdf, 0x0e, 0xa5, 0x76, 0xa0, 0xdc,
		0x5f, 0xb9, 0x2f, 0xfa, 0xe0, 0x5b, 0xbd, 0xd7, 0xbc, 0x88, 0x3e, 0x60, 0xf0, 0xad, 0xb9, 0x68,
		0x8f, 0x74, 0xf5, 0x46, 0x8c, 0xb3, 0x7d, 0xb3, 0x44, 0x0d, 0x9d, 0x7c, 0xed, 0x9c, 0xec, 0x7e,
		0xcf, 0xd2, 0x9b, 0x70, 0x4a, 0x33, 0x6b, 0xfc, 0x0e, 0x1d, 0x6e, 0xb5, 0xe5, 0x0a, 0x30, 0xc6,
		0xb9, 0x40, 0x89, 0xbd, 0x72, 0x0a, 0x9f, 0x87, 0xda, 0xf5, 0xe6, 0xcd, 0x50, 0x79, 0x0e, 0x9d,
		0xd6, 0x26, 0xbb, 0xd7, 0xe5, 0xce, 0xed, 0xdd, 0x8d, 0xe7, 0x07, 0xf2, 0xbd, 0x3c, 0xb9, 0x15,
		0x3b, 0xae, 0x62, 0xc7, 0x55, 0x4d, 0x1b, 0x2d, 0xbd, 0xe3, 0xea, 0x48, 0xfb, 0xd4, 0x3d, 0xf7,
		0xb1, 0x04, 0x35, 0xbf, 0xdb, 0x50, 0xf5, 0xbb, 0x4b, 0x92, 0x37, 0x2a, 0xa8, 0x35, 0x91, 0x7a,
		0xeb, 0xaa, 0x39, 0x99, 0xba, 0x93, 0xa9, 0x3d, 0x9d, 0xfa, 0xab, 0x39, 0x4d, 0xb2, 0x9b, 0x5c,
		0xca, 0x0e, 0x8b, 0xf1, 0x8d, 0x37, 0x41, 0xa0, 0x50, 0xfd, 0x3e, 0xa7, 0x37, 0x03, 0x31, 0x8a,
		0x6d, 0xac, 0xe7, 0x61, 0x2b, 0x0f, 0x18, 0xfd, 0x80, 0x95, 0xc0, 0x19, 0xa0, 0x70, 0x0e, 0x56,
		0x39, 0x0b, 0x81, 0xb0, 0x04, 0x3f, 0x1c, 0x74, 0xcf, 0x86, 0x9c, 0x7d, 0x85, 0x88, 0xad, 0x10,
		0x3d, 0xa6, 0xbe, 0x1a, 0x0e, 0xc4, 0xe8, 0xa9, 0xa1, 0xb1, 0x2d, 0x35, 0xd4, 0xb0, 0xdf, 0xc4,
		0x76, 0x9c, 0xca, 0x9e, 0x93, 0xdb, 0x75, 0x72, 0xfb, 0x4e, 0x6f, 0xe7, 0x35, 0x43, 0x6b, 0x45,
		0xdd, 0x51, 0xb5, 0xff, 0x44, 0x1c, 0x20, 0xe5, 0x01, 0x75, 0xe6, 0x45, 0x35, 0x91, 0x49, 0xcf,
		0x89, 0xb9, 0x66, 0xea, 0x5a, 0xb6, 0xc4, 0xa1, 0x98, 0xb1, 0x2d, 0x58, 0x8d, 0x40, 0x96, 0xec,
		0xa1, 0x9a, 0x6b, 0x05, 0xfe, 0x67, 0xfa, 0xb4, 0xcc, 0xd2, 0xf3, 0xab, 0x93, 0xd9, 0xff, 0x1f,
		0x7c, 0x37, 0x9f, 0xff, 0x55, 0xd0, 0xfe, 0xa8, 0x6b, 0x2d, 0x09, 0xcf, 0x5b, 0x49, 0x53, 0xaa,
		0x6e, 0xde, 0xba, 0x54, 0xad, 0xd4, 0x36, 0x73, 0xdd, 0xc1, 0xf1, 0xa7, 0x5c, 0xc7, 0xb3, 0xac,
		0xad, 0xaa, 0x04, 0xa2, 0xf4, 0x66, 0x22, 0x5e, 0xfe, 0xfb, 0x4e, 0x22, 0x65, 0x9f, 0x6a, 0xa6,
		0x22, 0x21, 0x25, 0x9b, 0x13, 0x4b, 0x34, 0x93, 0x31, 0x27, 0x97, 0x30, 0xf9, 0x4e, 0x68, 0x42,
		0xe6, 0xbb, 0x8a, 0x60, 0xe6, 0x63, 0xd3, 0x5d, 0x45, 0x50, 0x77, 0xb4, 0xd1, 0xee, 0xda, 0x4b,
		0x87, 0x94, 0x2c, 0x12, 0xaf, 0xe7, 0x3b, 0x5d, 0xcb, 0x7f, 0x62, 0xe4, 0xe4, 0x7b, 0x29, 0x18,
		0x04, 0x04, 0x01, 0x41, 0x40, 0x10, 0x10, 0x04, 0x04, 0x01, 0x53, 0x45, 0x40, 0x3f, 0x08, 0x1c,
		0x3a, 0xec, 0x45, 0xd2, 0xc0, 0xba, 0x35, 0xad, 0xa4, 0x58, 0x55, 0xb6, 0x34, 0xcd, 0x02, 0xd2,
		0x6d, 0xad, 0xe1, 0x16, 0x9a, 0x4f, 0xed, 0xa3, 0x9d, 0xc0, 0xba, 0xcd, 0xb1, 0x4e, 0xfb, 0xa8,
		0x28, 0x90, 0x6e, 0x83, 0xa4, 0xdb, 0xe8, 0x64, 0x86, 0x62, 0x1d, 0xde, 0x9c, 0x1c, 0xf9, 0xba,
		0xbc, 0x71, 0xa9, 0xd2, 0xf8, 0xa7, 0x43, 0x9d, 0x29, 0xc5, 0x7d, 0x85, 0xca, 0xbd, 0xb3, 0xd1,
		0x23, 0x8c, 0x7f, 0x6a, 0x5e, 0x46, 0x8f, 0xb0, 0xa9, 0xd9, 0xdb, 0x44, 0xeb, 0x14, 0x7e, 0xe5,
		0x4f, 0xaa, 0xd3, 0x43, 0x38, 0xc8, 0x53, 0xa5, 0xc1, 0x35, 0xc7, 0x12, 0xc9, 0x18, 0x2a, 0x28,
		0x15, 0x04, 0x68, 0x8e, 0x9a, 0x02, 0x4a, 0x8e, 0x17, 0x77, 0x4b, 0x82, 0x55, 0xc7, 0xe3, 0x5e,
		0xd8, 0x64, 0x65, 0xaa, 0x5c, 0xe9, 0x88, 0x52, 0xa9, 0x88, 0x72, 0x45, 0x6a, 0x09, 0x15, 0xa9,
		0x73, 0x02, 0x76, 0xbe, 0x22, 0x75, 0xee, 0xe4, 0x7e, 0xf5, 0x93, 0x93, 0x5f, 0x4a, 0xca, 0xfd,
		0xca, 0xb0, 0xd1, 0x9b, 0x32, 0x11, 0x8a, 0xc2, 0x0a, 0xb1, 0x8d, 0xa7, 0x77, 0xb0, 0x42, 0x2c,
		0xf1, 0xa6, 0xc5, 0x0a, 0x31, 0x72, 0x2f, 0x18, 0xa1, 0x43, 0x62, 0xeb, 0xa3, 0x67, 0x4e, 0xef,
		0x57, 0x27, 0xd9, 0xb4, 0x94, 0xfc, 0x6f, 0xdc, 0xab, 0xb7, 0xbc, 0xd9, 0xd8, 0x55, 0x78, 0x19,
		0x64, 0xc7, 0xd4, 0xd7, 0x80, 0xaf, 0xa4, 0xf0, 0xa5, 0x9d, 0xd8, 0xc5, 0x02, 0x67, 0x35, 0x4b,
		0x7c, 0x63, 0x05, 0x9c, 0x45, 0xc1, 0x3e, 0xeb, 0x5a, 0x1a, 0xbb, 0xfb, 0xbd, 0x90, 0x93, 0x7b,
		0x6b, 0xac, 0x57, 0x84, 0xad, 0x53, 0x74, 0xad, 0x5d, 0x64, 0x9d, 0x50, 0x51, 0x75, 0x8a, 0x8e,
		0x54, 0xd7, 0x3e, 0x4c, 0x1d, 0xbb, 0xa5, 0x20, 0x16, 0x4e, 0x9a, 0x78, 0x70, 0x26, 0x12, 0x6b,
		0xda, 0x2a, 0x62, 0xe1, 0x6d, 0x9a, 0xdf, 0x28, 0xb5, 0x78, 0xcb, 0x99, 0xcf, 0xad, 0xc0, 0x73,
		0xb5, 0x8d, 0xf1, 0x0b, 0x71, 0x38, 0xa1, 0x25, 0x9e, 0x6b, 0xb1, 0xfd, 0x13, 0x5a, 0x4e, 0x7f,
		0xa9, 0x9f, 0xfd, 0xdc, 0x68, 0x5e, 0x34, 0xea, 0x97, 0xe7, 0x67, 0xcd, 0xab, 0xbf, 0x3e, 0x37,
		0xb2, 0x7f, 0x40, 0xcb, 0xbb, 0xf7, 0x97, 0x59, 0x3e, 0xd5, 0xe4, 0x6d, 0xe3, 0xea, 0xaa, 0x71,
		0xc1, 0xc2, 0x9e, 0x39, 0x6b, 0x7c, 0xcc, 0xf2, 0x9b, 0x9c, 0x9d, 0x7f, 0xb8, 0x6c, 0x64, 0xf9,
		0x05, 0x1a, 0x17, 0x17, 0xe7, 0x17, 0x97, 0x38, 0x5a, 0x46, 0x06, 0x2c, 0xdf, 0x9c, 0x56, 0x34,
		0x79, 0xad, 0x09, 0x94, 0x81, 0x18, 0xf5, 0xdd, 0x14, 0x4b, 0x45, 0x04, 0x08, 0x08, 0x10, 0x12,
		0xf6, 0x62, 0x31, 0x59, 0x96, 0x58, 0xd3, 0x62, 0xb2, 0x6c, 0x5b, 0x76, 0xdc, 0xeb, 0xbb, 0x82,
		0xfb, 0x1a, 0xd5, 0x0b, 0x63, 0x09, 0x1b, 0xde, 0x57, 0xab, 0x88, 0x7d, 0xb5, 0xb0, 0xaf, 0x56,
		0x5c, 0x4f, 0x41, 0x75, 0x5f, 0xad, 0xb6, 0xe5, 0x74, 0x78, 0x8b, 0xb5, 0xed, 0x80, 0xb5, 0x7d,
		0xab, 0xcb, 0x03, 0xfd, 0x18, 0x6c, 0x5e, 0xe4, 0x96, 0xf7, 0xdb, 0x2a, 0x6e, 0x7d, 0xbf, 0xad,
		0xa1, 0x09, 0xa9, 0x56, 0x08, 0x76, 0xdc, 0xd2, 0x98, 0x12, 0x24, 0x5a, 0xc6, 0x43, 0xb0, 0xd4,
		0x89, 0x72, 0xd9, 0x0e, 0xf1, 0x0a, 0x10, 0xea, 0x05, 0xa9, 0x49, 0xac, 0xf7, 0x20, 0x58, 0x94,
		0x43, 0xba, 0x18, 0x27, 0xa9, 0x2e, 0x30, 0x6a, 0x95, 0x4a, 0xf5, 0xa8, 0x52, 0x29, 0x1e, 0x95,
		0x8f, 0x8a, 0xc7, 0xa6, 0x69, 0x54, 0x0d, 0x33, 0xc5, 0xbd, 0xb2, 0xa5, 0x55, 0x2f, 0xd7, 0x29,
		0xde, 0x30, 0xcf, 0xf5, 0x9c, 0x80, 0xb3, 0x76, 0xc7, 0xf3, 0x7c, 0x7d, 0xb2, 0x4c, 0x0b, 0xdb,
		0x79, 0xa6, 0x68, 0xae, 0x12, 0x25, 0xa8, 0x55, 0xc9, 0x37, 0x4e, 0x0c, 0x6a, 0x5b, 0x46, 0xb5,
		0xea, 0x13, 0x40, 0xd1, 0xe9, 0x84, 0x23, 0xf0, 0x63, 0x6b, 0xfc, 0xc8, 0xd9, 0x0a, 0xb2, 0xc1,
		0x9e, 0xb5, 0x8a, 0xe9, 0x81, 0x7d, 0x85, 0x75, 0x4b, 0xd1, 0x02, 0xcb, 0xe6, 0xe9, 0xe8, 0x03,
		0x53, 0x90, 0x5d, 0x69, 0xd9, 0x96, 0x7a, 0x62, 0x25, 0xbc, 0x19, 0xc7, 0xae, 0xaf, 0x6e, 0xa3,
		0x9c, 0x1c, 0xe5, 0xda, 0x6a, 0x07, 0xec, 0xce, 0x11, 0x9a, 0x67, 0xb8, 0xce, 0x48, 0xc9, 0x7d,
		0xd7, 0x87, 0x6f, 0x29, 0x1c, 0xfb, 0x3e, 0x50, 0x4a, 0x1b, 0x68, 0xa4, 0x0b, 0x30, 0x29, 0x82,
		0x49, 0x91, 0x8d, 0x34, 0x2d, 0x7d, 0x78, 0x8f, 0x59, 0x12, 0x45, 0xfb, 0x2c, 0x7a, 0x1a, 0x66,
		0x59, 0xf4, 0xc0, 0xf1, 0x1d, 0xe1, 0xb8, 0xe8, 0xb1, 0xae, 0x82, 0x25, 0x99, 0xd6, 0x95, 0x48,
		0x80, 0xba, 0xbe, 0x18, 0x26, 0x2a, 0x21, 0xd6, 0xbd, 0x2a, 0x2a, 0x21, 0x00, 0x7d, 0x54, 0x42,
		0x80, 0xf1, 0xf3, 0xb6, 0x5b, 0x67, 0xf1, 0xeb, 0x48, 0x80, 0xba, 0xed, 0x2e, 0xc3, 0x74, 0xc3,
		0x74, 0xc3, 0x74, 0xc3, 0x74, 0xc3, 0x74, 0x4b, 0x99, 0x6e, 0xee, 0x5a, 0x37, 0x1d, 0xde, 0x52,
		0x37, 0xdd, 0x23, 0x01, 0x08, 0xd3, 0x76, 0x22, 0x4c, 0x73, 0x34, 0x54, 0x45, 0x7e, 0xc3, 0x43,
		0x40, 0x1a, 0x90, 0x06, 0xa4, 0x01, 0xe9, 0x1d, 0x87, 0xb4, 0xd7, 0xe3, 0xbe, 0x25, 0x1c, 0xf7,
		0x96, 0xb5, 0x7d, 0xfe, 0x4f, 0x9f, 0xbb, 0xf6, 0x93, 0xba, 0x15, 0x5e, 0x24, 0x0c, 0xcb, 0x50,
		0xe3, 0x11, 0x78, 0xfb, 0xcb, 0x50, 0xcf, 0x3f, 0x37, 0x2e, 0xea, 0x57, 0x1f, 0xce, 0x7e, 0x6e,
		0xbe, 0xbf, 0x68, 0xfc, 0xf6, 0x7b, 0xe3, 0xec, 0xf4, 0xaf, 0xec, 0xaf, 0x43, 0x0d, 0x5f, 0xa5,
		0x69, 0xfe, 0xfc, 0xcb, 0xdf, 0x59, 0x5e, 0x02, 0x19, 0xbd, 0x44, 0x29, 0x17, 0x2f, 0xd1, 0x34,
		0x9b, 0x7a, 0xef, 0xb1, 0x43, 0xab, 0x39, 0xfd, 0x47, 0xd6, 0xf2, 0x84, 0x61, 0x8c, 0xb6, 0x20,
		0x65, 0x7d, 0xe1, 0x74, 0x9c, 0xff, 0xaa, 0x95, 0x0b, 0x4d, 0x8e, 0x33, 0x59, 0x25, 0x35, 0xf7,
		0xd6, 0xba, 0xc7, 0x7d, 0x9b, 0xbb, 0xc2, 0xba, 0xc5, 0x06, 0xa7, 0xf0, 0xa4, 0xf3, 0xe8, 0x49,
		0x1b, 0xc5, 0x22, 0x3c, 0xe9, 0x2d, 0x59, 0xeb, 0x41, 0xa9, 0x3f, 0xb5, 0xb5, 0x5e, 0x2e, 0x15,
		0xd6, 0x1a, 0xd6, 0x1a, 0xd6, 0x1a, 0xd6, 0x1a, 0xd6, 0x5a, 0xda, 0x5a, 0x07, 0xb6, 0xe5, 0xba,
		0x8e, 0x7b, 0xab, 0x6e, 0x99, 0xc7, 0x12, 0x30, 0x3d, 0xb1, 0xba, 0xa1, 0x72, 0x32, 0x3d, 0x31,
		0xea, 0x6f, 0xd6, 0xe2, 0x6d, 0xee, 0x33, 0xbb, 0xe3, 0x0c, 0xb7, 0x1b, 0xd7, 0xd4, 0x9f, 0x17,
		0xf2, 0x30, 0x8d, 0x01, 0x9c, 0x03, 0xe7, 0x19, 0xc5, 0x39, 0xa6, 0x31, 0xd2, 0x61, 0x9c, 0x85,
		0x6f, 0xb5, 0xdb, 0x8e, 0x4d, 0x66, 0x9c, 0x47, 0xf2, 0xc0, 0xea, 0xac, 0xb1, 0xfa, 0x1b, 0xef,
		0x74, 0x34, 0x17, 0x70, 0x2d, 0x12, 0xb6, 0x13, 0x94, 0x36, 0xaa, 0x1a, 0x7a, 0x50, 0x05, 0xa6,
		0x81, 0xe9, 0x94, 0x62, 0xba, 0x6a, 0x9a, 0x65, 0x80, 0x7a, 0xbb, 0x96, 0xd9, 0x71, 0x05, 0xf7,
		0x1f, 0xac, 0x0e, 0x81, 0x5d, 0x1e, 0x8b, 0x42, 0xec, 0x84, 0xd8, 0x09, 0x46, 0x19, 0xb1, 0x13,
		0x4c, 0xb2, 0x8c, 0x49, 0x16, 0x9e, 0xb0, 0x3a, 0xb4, 0xb3, 0x56, 0xcb, 0x45, 0x62, 0xca, 0x0a,
		0x76, 0x1a, 0x76, 0x3a, 0xcb, 0x76, 0x1a, 0x53, 0x56, 0xdb, 0xb2, 0xd3, 0xbe, 0xe5, 0x06, 0x5d,
		0x47, 0xb0, 0x9e, 0xf7, 0x8d, 0xfb, 0x1a, 0xc6, 0x79, 0x56, 0x8e, 0xfa, 0xf4, 0xd5, 0x31, 0x1c,
		0x6e, 0x18, 0x72, 0x18, 0x72, 0x38, 0xdc, 0x30, 0xe4, 0x72, 0x86, 0x3c, 0x91, 0xba, 0x5e, 0x81,
		0xba, 0x5e, 0xb8, 0xdd, 0xb0, 0xd6, 0x70, 0xbb, 0x61, 0xad, 0x89, 0xae, 0x8c, 0xa9, 0x42, 0xaa,
		0x9b, 0xb8, 0xaa, 0x6e, 0xde, 0x5a, 0x90, 0x49, 0xb7, 0x2b, 0xec, 0xd5, 0x1a, 0x6f, 0x71, 0xce,
		0xfa, 0x26, 0x5c, 0x7d, 0xc5, 0x9a, 0xc6, 0x2d, 0xfc, 0xca, 0x9f, 0x62, 0x2d, 0xec, 0x2e, 0x7c,
		0x74, 0x02, 0x51, 0x17, 0x22, 0x5e, 0x40, 0x14, 0x5a, 0xcd, 0x46, 0x87, 0x77, 0x87, 0xa5, 0x5b,
		0x6e, 0xbf, 0xd3, 0x79, 0xbd, 0x17, 0xc7, 0x1e, 0xc8, 0xdf, 0x74, 0xee, 0xb7, 0xb8, 0xcf, 0x5b,
		0x6f, 0x9f, 0x86, 0xb7, 0x68, 0xb5, 0x86, 0xa4, 0x8a, 0xc9, 0xab, 0x56, 0x0c, 0xa5, 0x92, 0x54,
		0xa6, 0xd5, 0x6a, 0xb4, 0x5c, 0x39, 0x16, 0xff, 0x65, 0x49, 0x03, 0xc5, 0x6d, 0x18, 0x99, 0x06,
		0x59, 0xd1, 0x14, 0xb1, 0x9b, 0x60, 0xf1, 0xcb, 0xcf, 0xbf, 0xda, 0x82, 0xd7, 0x2a, 0x04, 0x81,
		0xd3, 0x5a, 0x5e, 0x57, 0x38, 0x99, 0xfe, 0x8a, 0x2e, 0x5b, 0xd2, 0x2c, 0xab, 0xb7, 0x83, 0x5f,
		0xeb, 0xa8, 0xc5, 0x39, 0x96, 0x69, 0xee, 0xf8, 0xa5, 0xd5, 0xe7, 0xd9, 0xc7, 0x3d, 0x66, 0x49,
		0xfa, 0x38, 0x25, 0xe9, 0x63, 0x93, 0x16, 0x1e, 0x8f, 0x14, 0x3e, 0x3c, 0x91, 0x4a, 0xae, 0x3b,
		0xd6, 0x28, 0xea, 0xb9, 0xf5, 0xed, 0x30, 0xdd, 0xcf, 0xeb, 0x9a, 0x20, 0xde, 0xee, 0xff, 0xb1,
		0xfd, 0x73, 0x99, 0x53, 0xb9, 0x24, 0xd5, 0x40, 0x56, 0x1d, 0x94, 0xd5, 0x42, 0x59, 0x3d, 0xd4,
		0xd5, 0x84, 0x06, 0x7c, 0x71, 0x4f, 0xc5, 0x2a, 0xdc, 0x58, 0x6e, 0x8b, 0x05, 0x82, 0x73, 0x5f,
		0xa6, 0x8e, 0x7d, 0x52, 0xea, 0x35, 0x73, 0x7b, 0xcc, 0x36, 0x91, 0x3b, 0x66, 0x42, 0x3a, 0x20,
		0x54, 0x39, 0x0e, 0x4e, 0x51, 0x01, 0x55, 0x15, 0x51, 0x5b, 0x21, 0xb5, 0x15, 0x53, 0x5f, 0x41,
		0x93, 0x71, 0x83, 0x65, 0x8f, 0x73, 0x2b, 0xd8, 0x23, 0xed, 0x50, 0x3e, 0xe3, 0x30, 0xba, 0x7f,
		0x87, 0x4e, 0x38, 0x94, 0x53, 0x6d, 0x5d, 0x15, 0x27, 0x53, 0x75, 0x32, 0x95, 0xa7, 0x53, 0x7d,
		0xb5, 0x98, 0x74, 0x63, 0x27, 0x1c, 0xaa, 0xd9, 0x76, 0x52, 0x5b, 0x4f, 0x9c, 0xd0, 0x48, 0xd3,
		0x29, 0x54, 0xea, 0x55, 0xce, 0x73, 0x56, 0xc4, 0x48, 0xf1, 0x31, 0x66, 0xa3, 0x0e, 0x67, 0x7e,
		0x10, 0x38, 0xfa, 0x4a, 0x34, 0x2b, 0x0e, 0x47, 0x99, 0xe1, 0x28, 0x33, 0xd2, 0x5c, 0x34, 0x61,
		0xc3, 0x2c, 0x4e, 0xa0, 0xe2, 0x28, 0xb3, 0x8d, 0x67, 0xaf, 0x17, 0x74, 0x02, 0x8e, 0x32, 0xd3,
		0xcc, 0x72, 0x6b, 0x30, 0x24, 0xfb, 0x47, 0x99, 0x45, 0x49, 0xaf, 0xe8, 0xeb, 0xe1, 0x8c, 0x4f,
		0x73, 0xa8, 0x14, 0x0b, 0xc4, 0x4c, 0xe9, 0x5d, 0x86, 0x1f, 0x1a, 0x7d, 0x6d, 0xbe, 0xb5, 0xdc,
		0xd6, 0xe5, 0xf0, 0x33, 0x9b, 0x43, 0x18, 0xa5, 0xa1, 0xaa, 0x3e, 0xca, 0xdb, 0xab, 0x57, 0xd2,
		0x4b, 0x4e, 0x2b, 0x90, 0xc4, 0x51, 0x25, 0xc4, 0x51, 0x88, 0xa3, 0x10, 0x47, 0x21, 0x8e, 0x42,
		0x1c, 0x85, 0x38, 0x0a, 0x71, 0x14, 0xe2, 0x28, 0xc4, 0x51, 0x88, 0xa3, 0x10, 0x47, 0x6d, 0x39,
		0x8e, 0x52, 0x09, 0x05, 0x34, 0xc3, 0x28, 0x89, 0xa2, 0x23, 0x85, 0x28, 0x2a, 0x3b, 0x95, 0x5e,
		0xcb, 0xfa, 0x84, 0xb6, 0xde, 0x6b, 0x49, 0x2f, 0x90, 0x15, 0x7d, 0xc5, 0x98, 0xfa, 0x97, 0xdd,
		0x3a, 0x6b, 0x32, 0xe1, 0x27, 0xb5, 0x47, 0x16, 0x26, 0xab, 0xe9, 0x22, 0x4f, 0x4c, 0x56, 0x0f,
		0x74, 0x4f, 0x63, 0xb2, 0x7a, 0x70, 0x3f, 0x92, 0x2c, 0x48, 0xb2, 0xe4, 0x2d, 0xc9, 0x32, 0x50,
		0x6d, 0x66, 0x5b, 0x3d, 0xeb, 0xc6, 0xe9, 0x38, 0xc2, 0xe1, 0x81, 0x7e, 0x94, 0xbc, 0x48, 0xa8,
		0x5e, 0xac, 0x6c, 0xe8, 0xc6, 0xca, 0x25, 0x45, 0x01, 0x1a, 0x83, 0x8a, 0x78, 0x70, 0x51, 0x0d,
		0x32, 0xf2, 0xc1, 0x46, 0x3e, 0xe8, 0xe8, 0x07, 0x9f, 0x5e, 0x7c, 0xa2, 0x18, 0x98, 0x2a, 0x0f,
		0xca, 0x29, 0x8f, 0x50, 0x65, 0x6a, 0x60, 0x45, 0xf2, 0x4a, 0x2d, 0x3e, 0x48, 0x20, 0x33, 0xa1,
		0x9d, 0xc4, 0xa2, 0x1c, 0xa0, 0x09, 0x0d, 0x54, 0xea, 0x01, 0x9b, 0xd8, 0xc0, 0x4d, 0x6c, 0x00,
		0x27, 0x37, 0x90, 0x89, 0xd2, 0x15, 0x9a, 0xba, 0xa7, 0x3b, 0xc0, 0x27, 0x14, 0x1e, 0x2e, 0xfb,
		0x0c, 0xfa, 0xbd, 0x9e, 0xe7, 0x0b, 0x3a, 0x55, 0x19, 0x13, 0xf9, 0xc5, 0x07, 0xbc, 0x4e, 0x65,
		0x86, 0x8c, 0xca, 0x28, 0x8c, 0x05, 0x6a, 0x67, 0xba, 0x97, 0x36, 0x68, 0x5f, 0x33, 0xf5, 0xbd,
		0xac, 0x29, 0x4d, 0x42, 0x91, 0x34, 0xa9, 0xf1, 0x97, 0xff, 0xbe, 0x93, 0x4a, 0xdb, 0xa7, 0x4e,
		0x9d, 0x27, 0xac, 0xa3, 0x4b, 0xb3, 0xba, 0x49, 0xc9, 0x4f, 0x20, 0xc7, 0x4b, 0x6c, 0x06, 0x17,
		0x77, 0x29, 0x61, 0x22, 0x7e, 0x5b, 0x5d, 0xaa, 0xbd, 0xc9, 0xc2, 0x56, 0x3b, 0x75, 0x2f, 0x9d,
		0xd2, 0xae, 0xf7, 0x52, 0xa4, 0xb2, 0x72, 0x0b, 0x50, 0x65, 0xec, 0x99, 0xf4, 0x9a, 0x53, 0x99,
		0x91, 0x95, 0x9c, 0x70, 0xa9, 0x85, 0xaf, 0x9b, 0x53, 0x1e, 0x8a, 0xa9, 0x41, 0xca, 0x4c, 0xc7,
		0x06, 0x32, 0x1f, 0xf0, 0xb5, 0x88, 0x4e, 0x69, 0x5d, 0x1b, 0xc9, 0x52, 0xba, 0x5c, 0x24, 0xa7,
		0xba, 0xae, 0x6d, 0x90, 0xd3, 0x8f, 0x1f, 0x1a, 0x67, 0x57, 0xcd, 0xd3, 0xfa, 0xe7, 0xfa, 0xdb,
		0x0f, 0x1f, 0x3f, 0x5c, 0x7d, 0x68, 0x5c, 0x16, 0x68, 0x49, 0x45, 0x71, 0x0a, 0xec, 0xe6, 0x1c,
		0xc8, 0x99, 0xc6, 0x79, 0x77, 0x7e, 0xd5, 0x34, 0x8c, 0x8b, 0x42, 0x16, 0xdc, 0xa4, 0x8d, 0x34,
		0xc5, 0x1f, 0x68, 0x8a, 0xfd, 0xc2, 0xa7, 0xdf, 0x9b, 0x6f, 0x1b, 0xf5, 0x4f, 0xef, 0xcf, 0x2f,
		0x3e, 0x35, 0xa0, 0x1b, 0x2f, 0x1a, 0xa4, 0x51, 0x48, 0xb9, 0xfb, 0x79, 0xbd, 0x97, 0xae, 0xe7,
		0x82, 0xfb, 0xb9, 0x5b, 0xee, 0xe7, 0x56, 0xb3, 0x8c, 0x9a, 0x45, 0x45, 0x73, 0xf2, 0x64, 0x0b,
		0x5a, 0x86, 0x95, 0x1b, 0xc3, 0xef, 0x87, 0x0b, 0x5c, 0xdc, 0x43, 0x8a, 0x99, 0x85, 0x7d, 0xe9,
		0x1a, 0x98, 0xd3, 0xc1, 0x83, 0x0d, 0xbf, 0x0f, 0xbf, 0x9d, 0x4e, 0x3d, 0x97, 0x4a, 0x79, 0x12,
		0x5d, 0xdf, 0x6f, 0x76, 0xb2, 0x89, 0x48, 0x4b, 0x12, 0xd0, 0x0e, 0x9d, 0xb9, 0x4e, 0x5a, 0x7d,
		0x28, 0xa4, 0xb8, 0x50, 0x7d, 0xd4, 0x70, 0x9e, 0xeb, 0x72, 0x5b, 0xab, 0x1b, 0xe7, 0x82, 0xd1,
		0x89, 0x48, 0x4c, 0xc2, 0x63, 0x12, 0x5e, 0xda, 0xb0, 0x60, 0x12, 0x1e, 0x93, 0xf0, 0xc9, 0x0f,
		0xd0, 0x84, 0x06, 0x2a, 0xf5, 0x80, 0x4d, 0x6c, 0xe0, 0x26, 0x36, 0x80, 0x93, 0x1b, 0xc8, 0xe9,
		0x70, 0x8f, 0xe9, 0x26, 0xe1, 0x07, 0xb8, 0xa4, 0x19, 0xef, 0xcb, 0x60, 0x4c, 0xe5, 0x29, 0xef,
		0x23, 0x25, 0x8c, 0x94, 0xf0, 0x7c, 0x4a, 0xf8, 0xf2, 0xaa, 0x7e, 0xd5, 0x40, 0x2e, 0x78, 0x9c,
		0x00, 0xfd, 0xe5, 0xf4, 0x73, 0xf3, 0x7d, 0xfd, 0xc3, 0xc7, 0xdf, 0x2f, 0x1a, 0x48, 0xfa, 0xed,
		0x17, 0x3e, 0x96, 0xea, 0xbf, 0x5f, 0xfd, 0x32, 0x6a, 0x91, 0xe6, 0x45, 0xe3, 0xff, 0x35, 0x4e,
		0xaf, 0xd0, 0x30, 0xfb, 0x85, 0xb7, 0x1f, 0xeb, 0xa7, 0xbf, 0x7e, 0xfc, 0x70, 0x79, 0xd5, 0x78,
		0x87, 0xe6, 0xd8, 0x2f, 0x7c, 0x2c, 0x4f, 0xeb, 0x09, 0x5a, 0x64, 0xbf, 0x10, 0xb6, 0x47, 0xe3,
		0xec, 0xea, 0xc3, 0x69, 0x1d, 0x2a, 0xb2, 0xc8, 0x94, 0x5c, 0x7d, 0xf8, 0xd4, 0x38, 0xff, 0x1d,
		0xb6, 0x64, 0xd2, 0x32, 0x17, 0x8d, 0xdf, 0xa0, 0x28, 0xe1, 0xc8, 0xb9, 0xbc, 0x3c, 0x3f, 0xfd,
		0x80, 0x61, 0x33, 0xe5, 0x91, 0x40, 0x35, 0x66, 0x30, 0x83, 0xe6, 0x18, 0x34, 0xc7, 0xe7, 0xf3,
		0x3f, 0x1b, 0x17, 0x97, 0xf5, 0x3f, 0x30, 0x1d, 0xbb, 0x71, 0x29, 0x24, 0x05, 0x66, 0xe3, 0x3c,
		0x3b, 0x13, 0x4e, 0x37, 0x89, 0x14, 0xc2, 0x8b, 0x0f, 0x40, 0x16, 0x41, 0xb3, 0x41, 0xfb, 0x8e,
		0x2b, 0x8c, 0x6a, 0x02, 0x09, 0x84, 0x2a, 0xaa, 0xf8, 0x89, 0x85, 0xa3, 0x8a, 0x7f, 0x0b, 0xbc,
		0xcb, 0x45, 0x15, 0x7f, 0xd5, 0x34, 0xcb, 0xa8, 0xe3, 0x27, 0x97, 0x76, 0x9d, 0x23, 0x72, 0xdf,
		0x79, 0xc1, 0xa8, 0xc6, 0x80, 0x18, 0xd9, 0x63, 0xc9, 0x60, 0xb5, 0x66, 0x4b, 0x06, 0x42, 0x63,
		0xdf, 0xc6, 0x55, 0x6d, 0x69, 0xd4, 0x72, 0xa4, 0xc9, 0x4e, 0xef, 0xa1, 0xc2, 0xac, 0x56, 0xcb,
		0xe7, 0x41, 0x02, 0xab, 0x1b, 0x66, 0xa4, 0x43, 0xa3, 0xd3, 0xd7, 0x9a, 0xb3, 0x7a, 0x4d, 0x28,
		0xf3, 0xb3, 0x25, 0x04, 0xf7, 0x5d, 0x72, 0x37, 0xb4, 0xf0, 0x9f, 0x57, 0xaf, 0xbe, 0x14, 0xd9,
		0xf1, 0xf5, 0x8f, 0x2f, 0x06, 0x3b, 0xbe, 0x1e, 0xfc, 0x68, 0x44, 0xdf, 0x06, 0x3f, 0x97, 0xbe,
		0x14, 0x59, 0x65, 0xf4, 0xb3, 0xf9, 0xa5, 0xc8, 0xcc, 0xeb, 0x83, 0xaf, 0x5f, 0xdf, 0x1c, 0x7c,
		0x2f, 0x3f, 0xcb, 0xdf, 0xf8, 0xaf, 0x02, 0xf0, 0xb7, 0xd8, 0x68, 0x54, 0x13, 0x35, 0x1a, 0x55,
		0x18, 0x8d, 0x14, 0xb7, 0x66, 0x66, 0x8d, 0x86, 0xc5, 0xda, 0x75, 0xf6, 0xfe, 0xfa, 0xbb, 0xf1,
		0xba, 0xf2, 0x7c, 0x72, 0xf0, 0xfd, 0xe8, 0xf9, 0xe5, 0x2f, 0x7f, 0x2c, 0xba, 0xcc, 0x78, 0x7d,
		0xf4, 0x7c, 0xb2, 0xe4, 0x2f, 0xd5, 0xe7, 0x93, 0x98, 0x32, 0xcc, 0xe7, 0x57, 0x73, 0x97, 0x86,
		0xbf, 0x2f, 0x2d, 0xbb, 0xa1, 0xb2, 0xe4, 0x86, 0xf2, 0xb2, 0x1b, 0xca, 0x4b, 0x6e, 0x58, 0xfa,
		0x48, 0xa5, 0x25, 0x37, 0x98, 0xcf, 0x3f, 0xe6, 0xae, 0x7f, 0xb5, 0xf8, 0xd2, 0xea, 0xf3, 0xc1,
		0x8f, 0x65, 0x7f, 0x3b, 0x7a, 0xfe, 0x71, 0x72, 0x00, 0x13, 0xba, 0x58, 0x23, 0xbd, 0x1e, 0xf7,
		0x2d, 0xe1, 0xb8, 0xb7, 0x2c, 0x78, 0x0a, 0x04, 0xef, 0xd2, 0x9b, 0xd1, 0xb9, 0x4f, 0x80, 0x29,
		0x45, 0x44, 0xb1, 0x01, 0xcd, 0xee, 0x07, 0xdc, 0x4f, 0x26, 0x36, 0x1e, 0x4b, 0x86, 0x26, 0x43,
		0x93, 0x13, 0x95, 0x90, 0xd3, 0x15, 0x58, 0xe3, 0xe9, 0xa0, 0x54, 0xad, 0xbf, 0x1a, 0x3f, 0x15,
		0x56, 0x5f, 0x6d, 0x5f, 0x33, 0xb6, 0xbc, 0xf6, 0x6a, 0xf2, 0x1c, 0xe9, 0x5f, 0x79, 0xe5, 0xb7,
		0xc9, 0x56, 0x5c, 0xf9, 0x6d, 0xac, 0xb4, 0xc2, 0x4a, 0x2b, 0x79, 0x23, 0x82, 0x95, 0x56, 0x58,
		0x69, 0x95, 0xfc, 0x00, 0x4d, 0x68, 0xa0, 0x52, 0x0f, 0xd8, 0xc4, 0x06, 0x6e, 0x62, 0x03, 0x38,
		0xb9, 0x81, 0x9c, 0x0e, 0x37, 0x98, 0x6e, 0xa5, 0xd5, 0xa4, 0x90, 0xa9, 0xeb, 0xb5, 0x92, 0xad,
		0x94, 0x8a, 0x3e, 0x00, 0x11, 0xa6, 0x66, 0x83, 0x72, 0xb7, 0xdf, 0x8d, 0xf2, 0x4f, 0x5a, 0x2e,
		0xe5, 0x52, 0xeb, 0x5a, 0x21, 0x94, 0xd9, 0x70, 0xfb, 0x51, 0xfa, 0x2d, 0x4f, 0xa5, 0x85, 0x6d,
		0x9f, 0xff, 0xd3, 0xe7, 0xae, 0xfd, 0x44, 0x3f, 0x54, 0x26, 0xa2, 0x31, 0x48, 0x74, 0x13, 0x5a,
		0xd8, 0x13, 0x98, 0xec, 0x1f, 0xaa, 0x09, 0x57, 0xc8, 0x47, 0x35, 0xe1, 0xd6, 0xba, 0x14, 0x7b,
		0x02, 0x27, 0x20, 0x2d, 0x4f, 0x33, 0x81, 0xbd, 0xbb, 0x27, 0xe6, 0x27, 0xb2, 0x83, 0xc0, 0x58,
		0x32, 0x40, 0x4d, 0x00, 0x6a, 0xd4, 0xfd, 0x83, 0xd4, 0x20, 0x75, 0x8e, 0x49, 0x8d, 0xba, 0x7f,
		0xb0, 0x7a, 0x4d, 0x37, 0x6a, 0x9d, 0x09, 0xbf, 0x94, 0x2e, 0x1a, 0x47, 0xc3, 0x83, 0xd1, 0x54,
		0x47, 0xcb, 0x2f, 0x4d, 0x35, 0x81, 0xd0, 0xc9, 0x98, 0x73, 0x23, 0x61, 0x73, 0x4e, 0x76, 0x74,
		0x3d, 0x18, 0x9d, 0x1e, 0x46, 0x93, 0x1d, 0x85, 0x0f, 0x42, 0xe7, 0x93, 0xd0, 0x81, 0xeb, 0xd3,
		0x03, 0x3a, 0x14, 0x0a, 0x3e, 0x13, 0xc4, 0xd0, 0x48, 0x76, 0x23, 0x84, 0x46, 0x08, 0x9d, 0x5f,
		0x3c, 0x23, 0xd9, 0x0d, 0x3c, 0xaf, 0xc6, 0x73, 0x02, 0xeb, 0x05, 0xb1, 0x4a, 0x10, 0x70, 0x06,
		0x9c, 0x01, 0x67, 0xc0, 0x19, 0x70, 0xde, 0x5d, 0x38, 0x63, 0xbd, 0xd3, 0xdc, 0xaa, 0x16, 0xbf,
		0x9d, 0xa6, 0x75, 0x4e, 0x17, 0x6d, 0xac, 0x6f, 0xda, 0x9e, 0x26, 0x6c, 0x77, 0x5d, 0xd3, 0x45,
		0x3b, 0xcd, 0xeb, 0x99, 0x5a, 0x9e, 0x30, 0x8c, 0x7b, 0xe6, 0x72, 0xe7, 0xf6, 0xee, 0xc6, 0xf3,
		0x03, 0xfd, 0x65, 0x4d, 0x73, 0x12, 0xb1, 0xba, 0x09, 0xab, 0x9b, 0xa4, 0x4d, 0x08, 0x56, 0x37,
		0x61, 0x75, 0x53, 0xf2, 0x03, 0x34, 0xa1, 0x81, 0x4a, 0x3d, 0x60, 0x13, 0x1b, 0xb8, 0x89, 0x0d,
		0xe0, 0xe4, 0x06, 0x72, 0x3a, 0x9c, 0x5e, 0xba, 0xd5, 0x4d, 0x77, 0x96, 0xeb, 0xf2, 0x0e, 0xeb,
		0x78, 0x56, 0x8b, 0xf9, 0xbc, 0xe7, 0xf9, 0x22, 0x81, 0x15, 0x4e, 0x0b, 0x3e, 0x04, 0x69, 0x33,
		0xa4, 0xcd, 0x90, 0x36, 0x43, 0xda, 0x0c, 0x69, 0x33, 0xa4, 0xcd, 0x76, 0x34, 0x6d, 0x46, 0xe0,
		0xe0, 0x8d, 0xa2, 0x5c, 0x66, 0xb9, 0x82, 0xbb, 0xae, 0x45, 0xcf, 0xee, 0xb9, 0x4f, 0x00, 0xb8,
		0x01, 0x6e, 0x80, 0x1b, 0xe0, 0x06, 0xb8, 0x01, 0x6e, 0x80, 0x5b, 0x1b, 0xdc, 0x37, 0x41, 0xe0,
		0xb4, 0x12, 0xc4, 0xf6, 0x40, 0x3e, 0xa0, 0xad, 0xd9, 0x9e, 0x5d, 0xcb, 0xc6, 0x4e, 0xd6, 0xd3,
		0x3b, 0x2d, 0xbf, 0xdc, 0xc0, 0xb9, 0xf4, 0x7c, 0xf0, 0xdd, 0x7c, 0xc6, 0x8e, 0xcb, 0xab, 0x47,
		0xfb, 0x30, 0x13, 0x96, 0xe0, 0x78, 0x1f, 0x7d, 0x02, 0x46, 0x3c, 0xdc, 0x74, 0xb8, 0xe9, 0x70,
		0xd3, 0xe1, 0xa6, 0xc3, 0x4d, 0x87, 0x9b, 0xae, 0x0d, 0xee, 0x64, 0x56, 0x5f, 0xcf, 0x8a, 0x07,
		0xb2, 0x35, 0x9b, 0x13, 0xcb, 0xb0, 0xb3, 0x45, 0x6c, 0x2c, 0xc3, 0x06, 0xb3, 0x15, 0x3a, 0x15,
		0xcb, 0xb0, 0xf3, 0xcb, 0x6c, 0x94, 0x92, 0x4f, 0x0a, 0x88, 0x5f, 0x56, 0xb2, 0xa6, 0xa3, 0xa2,
		0xfc, 0x5d, 0xf8, 0x54, 0xbf, 0x9e, 0x8d, 0x1e, 0x0a, 0x85, 0xe5, 0x5b, 0xd7, 0x8b, 0x6d, 0xd5,
		0x97, 0xbf, 0xd0, 0x84, 0x34, 0x97, 0x99, 0x77, 0x2d, 0x5b, 0xbf, 0xb2, 0x5c, 0xbd, 0x28, 0x53,
		0x93, 0x8d, 0xfa, 0xc5, 0xe4, 0xda, 0x3e, 0xf7, 0xb8, 0x11, 0x3a, 0xdc, 0x6a, 0xfb, 0x5c, 0x6b,
		0x4d, 0xc3, 0xc8, 0xfb, 0xd3, 0xe0, 0x78, 0xe1, 0xf3, 0x70, 0xf0, 0xbc, 0x79, 0x33, 0xb0, 0x8a,
		0x87, 0xca, 0x45, 0x9d, 0x9b, 0x51, 0x40, 0xbd, 0x82, 0x6a, 0x92, 0x42, 0x6a, 0xac, 0x68, 0x98,
		0x17, 0x87, 0x15, 0x0d, 0xbb, 0xb2, 0xa2, 0xc1, 0xf6, 0xfa, 0xae, 0xe0, 0x7e, 0x40, 0xb7, 0xa8,
		0x61, 0x2c, 0x11, 0xeb, 0x1a, 0x36, 0x34, 0x5c, 0xa9, 0x87, 0x6d, 0x62, 0xc3, 0x37, 0xb1, 0x61,
		0x9c, 0xdc, 0x70, 0x4e, 0x47, 0x04, 0x46, 0xb6, 0xae, 0xc1, 0x7f, 0x64, 0x37, 0x4f, 0x82, 0x27,
		0xb0, 0xe5, 0xc7, 0x58, 0x32, 0xd2, 0xb5, 0x34, 0x06, 0xb4, 0x5a, 0x49, 0x20, 0x67, 0x5b, 0x43,
		0xce, 0x36, 0x9b, 0xe9, 0x3d, 0xcc, 0xb2, 0xce, 0x76, 0x69, 0x1e, 0x32, 0xb6, 0xb5, 0x4a, 0xa5,
		0x7a, 0x54, 0xa9, 0x14, 0x8f, 0xca, 0x47, 0xc5, 0x63, 0xd3, 0x34, 0xaa, 0x06, 0xa6, 0x5d, 0xc9,
		0xa5, 0xe5, 0x6a, 0xaf, 0xeb, 0x47, 0xe6, 0x73, 0xe1, 0x3b, 0x09, 0xf1, 0x7b, 0x24, 0x1b, 0x04,
		0x07, 0xc1, 0x41, 0x70, 0x10, 0x1c, 0x04, 0x07, 0xc1, 0x41, 0x70, 0x52, 0x82, 0x8b, 0xc4, 0xe2,
		0x6f, 0x81, 0xf8, 0x1b, 0xf4, 0x06, 0xbd, 0x41, 0x6f, 0xd0, 0x1b, 0xf4, 0x06, 0xbd, 0x93, 0xa2,
		0x77, 0x62, 0xf1, 0xb7, 0x40, 0xfc, 0x0d, 0x82, 0x83, 0xe0, 0x20, 0x38, 0x08, 0x0e, 0x82, 0x83,
		0xe0, 0xe4, 0x12, 0x72, 0x56, 0x04, 0x3d, 0xa8, 0xee, 0x23, 0xaa, 0xb5, 0xd9, 0xd7, 0x2d, 0x79,
		0x8d, 0x8a, 0x9d, 0x9b, 0xa7, 0xa3, 0xa7, 0xd9, 0x56, 0xd5, 0xb3, 0x46, 0xc5, 0x9b, 0x4e, 0x25,
		0xec, 0x9c, 0xff, 0xa1, 0x5f, 0xce, 0x43, 0x64, 0x41, 0xe9, 0xaa, 0x9f, 0xc8, 0x9c, 0xb5, 0x84,
		0xb6, 0x8e, 0xa0, 0xdc, 0x32, 0x82, 0x7c, 0xab, 0x88, 0x0d, 0x6d, 0x11, 0x71, 0x8d, 0xd5, 0x06,
		0x1b, 0x36, 0xc0, 0xdb, 0x5a, 0x62, 0xa0, 0xb1, 0xb8, 0x44, 0xa1, 0xae, 0x7b, 0x2f, 0xc1, 0x6e,
		0x2d, 0xfc, 0xca, 0x9f, 0xd4, 0x4c, 0x66, 0xe1, 0xa3, 0x13, 0x88, 0xba, 0x10, 0x6a, 0x95, 0x71,
		0x61, 0x48, 0xd3, 0xe8, 0xf0, 0x6e, 0xd8, 0xaa, 0x85, 0x93, 0x7d, 0xb7, 0xdf, 0xe9, 0x28, 0x94,
		0xaf, 0x7f, 0xb2, 0x1e, 0xf5, 0x85, 0x9c, 0xfb, 0x2d, 0xee, 0xf3, 0xd6, 0xdb, 0xa7, 0xa1, 0x88,
		0x44, 0x9b, 0x5b, 0x73, 0xf4, 0x68, 0x8e, 0x9a, 0x82, 0xd2, 0x12, 0x01, 0xe5, 0x71, 0x22, 0x37,
		0x42, 0xe2, 0xeb, 0x79, 0xbc, 0x2b, 0x63, 0x76, 0x8d, 0x6a, 0x97, 0xa8, 0x76, 0x85, 0x44, 0x1f,
		0x28, 0xb5, 0x7d, 0xbc, 0x46, 0x5f, 0xdf, 0x84, 0x31, 0x9a, 0xaf, 0x60, 0x8f, 0xdc, 0x9b, 0x78,
		0xcd, 0x36, 0x95, 0x20, 0x8a, 0xee, 0x8b, 0xd9, 0x41, 0x72, 0x95, 0xe8, 0xd2, 0x3e, 0x97, 0x4a,
		0x65, 0xb9, 0x66, 0x05, 0xb9, 0x6a, 0xa5, 0xb8, 0x76, 0x45, 0xb8, 0x76, 0xe5, 0xb7, 0x7e, 0x85,
		0x37, 0xed, 0xe0, 0x95, 0xad, 0xcc, 0x2e, 0x58, 0xad, 0x07, 0xee, 0x0b, 0x27, 0x08, 0x47, 0xe7,
		0x70, 0x60, 0x49, 0xf6, 0xc1, 0xa8, 0xeb, 0xe7, 0x24, 0xc9, 0x92, 0x57, 0x29, 0xc4, 0x50, 0x0e,
		0x29, 0xd4, 0x43, 0x88, 0xf1, 0x1b, 0xdf, 0x78, 0x5e, 0x87, 0x5b, 0xae, 0x0a, 0x45, 0x46, 0x63,
		0xd8, 0x48, 0x0a, 0x09, 0x12, 0x83, 0xef, 0xc6, 0x0a, 0x1c, 0x9b, 0xb5, 0x2c, 0x61, 0x31, 0xdf,
		0x52, 0x29, 0x06, 0x98, 0x34, 0xc8, 0x4b, 0x49, 0xb9, 0x57, 0x01, 0xa7, 0xc5, 0x5d, 0xe1, 0x88,
		0x27, 0xb5, 0xb5, 0x96, 0x63, 0x35, 0x50, 0x48, 0x13, 0x16, 0x3e, 0x0c, 0x3f, 0xfa, 0xad, 0x15,
		0x10, 0x2c, 0x59, 0x7c, 0x57, 0xbf, 0xaa, 0x37, 0x2f, 0xea, 0x57, 0x0d, 0xd5, 0x65, 0x8b, 0x51,
		0x12, 0x34, 0xd0, 0x8a, 0x51, 0x89, 0xd2, 0x1d, 0xe1, 0x5b, 0x34, 0x8d, 0xda, 0xa7, 0xb7, 0x85,
		0x6d, 0xa4, 0x6e, 0x28, 0x5f, 0xa2, 0x5c, 0xcd, 0xc1, 0x4b, 0x54, 0xf2, 0xd0, 0x13, 0x79, 0xe8,
		0x08, 0x23, 0x07, 0xef, 0x60, 0xbe, 0x31, 0xf3, 0xd0, 0x13, 0xb9, 0xe8, 0x8a, 0x4a, 0x0e, 0x5e,
		0xe2, 0x38, 0x07, 0xef, 0x50, 0xca, 0xc3, 0x88, 0xc8, 0xc3, 0x4b, 0x94, 0xf4, 0x46, 0x84, 0xd2,
		0x9d, 0xd7, 0x29, 0xcb, 0x9f, 0x22, 0x0b, 0x9a, 0x5c, 0x9c, 0xe6, 0x7b, 0x56, 0xcb, 0xb6, 0x02,
		0xc1, 0xda, 0x4e, 0x47, 0x70, 0x5f, 0x23, 0x4e, 0x7b, 0x29, 0x09, 0xa1, 0x7a, 0x36, 0x42, 0x75,
		0x3b, 0xb0, 0xd4, 0x7b, 0x3d, 0xbc, 0x59, 0xb2, 0xe1, 0xdf, 0xf1, 0xb6, 0xd5, 0xef, 0x44, 0xc9,
		0x2d, 0xe1, 0xf7, 0x91, 0xd2, 0xc9, 0x8a, 0x9e, 0xb4, 0xee, 0xec, 0x1e, 0xf3, 0xf9, 0x3f, 0x7d,
		0xc7, 0xe7, 0x2d, 0x75, 0x8d, 0x99, 0x15, 0x83, 0xce, 0xcf, 0x48, 0xe7, 0x47, 0x1b, 0xcf, 0x69,
		0xf4, 0xfa, 0xe0, 0x7e, 0x74, 0x77, 0x46, 0xba, 0xfb, 0x41, 0x83, 0x09, 0xe1, 0xcd, 0xe8, 0xe8,
		0x6c, 0x74, 0x34, 0x77, 0xad, 0x9b, 0x8e, 0x8e, 0x39, 0x1f, 0x09, 0x80, 0x13, 0xb0, 0x13, 0xfa,
		0x72, 0x2b, 0xee, 0x99, 0x70, 0xba, 0xdc, 0xeb, 0x0b, 0x75, 0x9d, 0x99, 0x16, 0x92, 0xfb, 0x8e,
		0xef, 0x3b, 0xae, 0x30, 0xaa, 0x1a, 0xfd, 0x5e, 0x55, 0xb8, 0x55, 0x6f, 0xd5, 0x85, 0x46, 0xc5,
		0x19, 0xc5, 0x2a, 0x0a, 0xaa, 0xc2, 0x50, 0xa2, 0x55, 0x11, 0x94, 0x75, 0xf1, 0x3a, 0xe5, 0xbb,
		0x14, 0xab, 0x19, 0xa8, 0x9b, 0xb6, 0x6a, 0x9a, 0x65, 0x33, 0x45, 0xcd, 0xbb, 0xa1, 0x72, 0xc1,
		0xeb, 0x14, 0x58, 0xe2, 0x3b, 0xa7, 0xd5, 0xe2, 0xae, 0xba, 0x11, 0x1e, 0xde, 0xaf, 0xce, 0xed,
		0xb6, 0xd5, 0x09, 0x00, 0xee, 0xac, 0x80, 0xdb, 0xe9, 0x3d, 0x54, 0x99, 0xdb, 0xea, 0x69, 0xe7,
		0xf9, 0x5e, 0x0a, 0x82, 0x02, 0x64, 0x52, 0x01, 0x22, 0x07, 0x8c, 0x4e, 0x0d, 0x86, 0xe2, 0xe0,
		0xcd, 0xc1, 0x9b, 0x83, 0x37, 0x07, 0x6f, 0x0e, 0xde, 0x9c, 0xa4, 0x75, 0xee, 0xf6, 0x3b, 0xc2,
		0x21, 0x99, 0x87, 0x9b, 0x93, 0x04, 0x40, 0x67, 0x03, 0xd0, 0x7a, 0x95, 0xd2, 0xbb, 0x51, 0x1d,
		0x1d, 0x08, 0xdf, 0x71, 0x6f, 0x75, 0x7a, 0xba, 0x96, 0x82, 0x9e, 0xf6, 0xee, 0x6d, 0xf5, 0x8e,
		0x0e, 0x6f, 0xc6, 0x90, 0xce, 0xc6, 0x90, 0xf6, 0x7a, 0xdc, 0xb7, 0x84, 0xe3, 0xde, 0xb2, 0xb6,
		0xcf, 0xff, 0xe9, 0x73, 0xd7, 0x7e, 0xd2, 0xe8, 0xf8, 0x05, 0xc2, 0xd4, 0xa3, 0xf7, 0xd1, 0xba,
		0x12, 0xf1, 0xd4, 0xe3, 0xc1, 0xc9, 0xfb, 0x8b, 0xc6, 0x6f, 0xcd, 0x52, 0xd3, 0x6c, 0xfe, 0xfc,
		0xcb, 0xdf, 0x28, 0xb0, 0x8f, 0xa9, 0x61, 0xdb, 0x2f, 0xb0, 0x3f, 0xff, 0xdc, 0xb8, 0xa8, 0x5f,
		0x7d, 0x38, 0xfb, 0xb9, 0x19, 0x76, 0xe0, 0xef, 0x8d, 0xb3, 0xd3, 0xbf, 0xb2, 0x5f, 0x6a, 0x1f,
		0xe9, 0xa2, 0x19, 0x2a, 0x62, 0x86, 0x6b, 0xf7, 0x06, 0x03, 0x2a, 0x17, 0x2f, 0x31, 0xb4, 0x0a,
		0x79, 0xab, 0x41, 0x4c, 0xc8, 0xe0, 0x77, 0xbd, 0x16, 0xd7, 0xb1, 0xf1, 0xd1, 0xfd, 0xea, 0x66,
		0xfd, 0xfc, 0x73, 0xe3, 0x2c, 0xff, 0x06, 0x9c, 0xbb, 0xfd, 0x6e, 0x04, 0x43, 0x4f, 0xcb, 0x45,
		0xa8, 0x28, 0xdc, 0xdb, 0x70, 0xfb, 0xdd, 0xf0, 0xe1, 0xd3, 0xa0, 0x6d, 0x3d, 0x8a, 0xc9, 0xd8,
		0x1e, 0x26, 0x63, 0x91, 0xbe, 0x43, 0xfa, 0x0e, 0xe9, 0x3b, 0xa4, 0xef, 0xd4, 0x2d, 0xf1, 0x3f,
		0x37, 0x41, 0xc0, 0x3a, 0x9e, 0xa5, 0x51, 0x48, 0x35, 0x11, 0x81, 0xe8, 0x3e, 0x1b, 0xd1, 0x7d,
		0xc0, 0xfd, 0x07, 0xee, 0xb3, 0x5b, 0xdf, 0xeb, 0xf7, 0xd4, 0xfb, 0x7d, 0x46, 0x0a, 0x12, 0x78,
		0x99, 0x48, 0xe0, 0x05, 0x83, 0xbd, 0x6c, 0x98, 0x13, 0x78, 0x1d, 0xb5, 0x8d, 0x86, 0x66, 0x8e,
		0xf5, 0x9d, 0x15, 0x85, 0xe1, 0x9f, 0x91, 0xe1, 0xdf, 0xef, 0xf5, 0x3c, 0x5f, 0xf0, 0x16, 0xc9,
		0x36, 0x17, 0x0b, 0xa5, 0x21, 0x13, 0x97, 0x95, 0x4c, 0x1c, 0xb6, 0xba, 0x48, 0x57, 0xea, 0x0a,
		0x5b, 0x5d, 0xa4, 0xea, 0x25, 0xb0, 0xd5, 0x05, 0xb6, 0xba, 0x20, 0xec, 0x09, 0x6c, 0x75, 0x81,
		0xad, 0x2e, 0xc8, 0xde, 0x01, 0x5b, 0x5d, 0x60, 0xab, 0x8b, 0xc4, 0x3e, 0x07, 0x5b, 0x5d, 0xa4,
		0x66, 0xab, 0x8b, 0x87, 0x8e, 0xe5, 0x32, 0x47, 0x23, 0x43, 0x37, 0x12, 0x90, 0xfb, 0xa8, 0x4c,
		0xed, 0x45, 0xf7, 0x31, 0x4d, 0x42, 0x97, 0xcb, 0x37, 0x30, 0x4d, 0x92, 0x54, 0xd3, 0x56, 0x8a,
		0xc7, 0x15, 0xcc, 0x92, 0x6c, 0xc3, 0x02, 0x7f, 0xeb, 0x59, 0x25, 0xd6, 0x0b, 0x34, 0xb6, 0x91,
		0x18, 0x4b, 0x40, 0xa2, 0x7c, 0x6d, 0x52, 0x4c, 0xe1, 0x94, 0x90, 0xc2, 0x47, 0xee, 0xde, 0x46,
		0x7b, 0xad, 0xc3, 0x08, 0xeb, 0x9f, 0x83, 0x07, 0x23, 0xbc, 0xbc, 0x69, 0xab, 0x65, 0x98, 0x60,
		0x32, 0x13, 0x9c, 0xcd, 0xa3, 0x1a, 0x64, 0xce, 0x27, 0xd8, 0x97, 0x3f, 0xa9, 0x61, 0x20, 0x7e,
		0x83, 0x07, 0x35, 0x44, 0x5b, 0x1c, 0xf9, 0xf2, 0x07, 0x35, 0x0c, 0xef, 0xc3, 0x41, 0x0d, 0x38,
		0xa8, 0x41, 0x73, 0xe8, 0x4a, 0x1f, 0xd4, 0x20, 0x79, 0xb6, 0xc8, 0x5c, 0x87, 0x4b, 0x8f, 0x61,
		0x05, 0x15, 0xd6, 0x77, 0xc6, 0x14, 0x54, 0x9a, 0x48, 0xb5, 0x75, 0x55, 0x9c, 0x4c, 0xd5, 0xc9,
		0x54, 0x9e, 0x4e, 0xf5, 0x37, 0x93, 0x4f, 0x93, 0x1d, 0x12, 0xaa, 0xd6, 0x9c, 0xc6, 0xba, 0x13,
		0x7b, 0x5d, 0xda, 0x47, 0x23, 0xea, 0x1f, 0x89, 0x48, 0x50, 0xf4, 0x31, 0x67, 0x37, 0x8c, 0x4d,
		0x1d, 0x0a, 0xf7, 0x5a, 0x55, 0x6d, 0x58, 0xcb, 0xeb, 0x5a, 0x8e, 0xab, 0x90, 0x6c, 0x5c, 0xa2,
		0x3f, 0x13, 0x81, 0x3b, 0xaf, 0x48, 0xca, 0x25, 0xdc, 0x04, 0x39, 0x4a, 0xa2, 0x5c, 0xa5, 0x7e,
		0xb8, 0x4c, 0x1a, 0x36, 0x13, 0xc7, 0x78, 0x73, 0xb1, 0x1e, 0x95, 0xbc, 0x04, 0xce, 0xa7, 0x26,
		0x38, 0x75, 0x9c, 0xf4, 0x94, 0xf1, 0xa4, 0xba, 0x80, 0xa0, 0x34, 0x3c, 0xd1, 0x6e, 0xd8, 0xd2,
		0xa9, 0xae, 0xd7, 0xe9, 0x27, 0x49, 0x97, 0x8b, 0x3b, 0x8f, 0x8e, 0x23, 0x43, 0x71, 0x8a, 0x56,
		0x7c, 0x7a, 0xa1, 0xd9, 0x1f, 0x75, 0xb0, 0x48, 0x6f, 0x1d, 0xda, 0x9c, 0x63, 0xa3, 0x31, 0x2d,
		0xa1, 0xb8, 0x2e, 0x6d, 0x2b, 0x2a, 0xed, 0x1b, 0xf7, 0xfc, 0x49, 0x79, 0xe1, 0xda, 0x32, 0xcd,
		0x9e, 0x95, 0x0a, 0x37, 0x09, 0x6e, 0x12, 0xdc, 0x24, 0xb8, 0x49, 0x70, 0x93, 0xb2, 0xe4, 0x26,
		0xe5, 0xea, 0x58, 0xf0, 0x01, 0x97, 0x0e, 0x95, 0x72, 0xa4, 0xfb, 0xd2, 0xf3, 0x1d, 0xef, 0xc2,
		0x4f, 0xbb, 0x90, 0x9a, 0xf6, 0x90, 0x6f, 0x76, 0xd9, 0x35, 0x52, 0x5c, 0x6f, 0x5d, 0x14, 0xdf,
		0x74, 0x66, 0xb9, 0x84, 0xcc, 0x32, 0x32, 0xcb, 0x71, 0x63, 0x21, 0x64, 0x96, 0x91, 0x59, 0xde,
		0x7c, 0xf0, 0x84, 0xcc, 0x32, 0x42, 0x26, 0x84, 0x4c, 0x08, 0x99, 0x10, 0x32, 0x21, 0x64, 0x42,
		0x66, 0x39, 0xb7, 0x2c, 0x42, 0x66, 0x59, 0x45, 0xa5, 0x91, 0x59, 0x86, 0x9b, 0x04, 0x37, 0x09,
		0x6e, 0x12, 0xdc, 0x24, 0xb8, 0x49, 0x1b, 0x4c, 0x05, 0x6d, 0x29, 0xb3, 0xac, 0x92, 0x22, 0xdd,
		0x57, 0x4d, 0x2c, 0x5f, 0x46, 0x1f, 0x86, 0x15, 0x0c, 0x73, 0xdd, 0x90, 0xd8, 0x0a, 0x86, 0x41,
		0xc3, 0x6f, 0x7c, 0x05, 0xc3, 0x83, 0xe2, 0x0a, 0x86, 0x07, 0xac, 0x60, 0xc0, 0x0a, 0x06, 0xdd,
		0xa1, 0x8b, 0x15, 0x0c, 0x54, 0x2a, 0x4d, 0xa4, 0xda, 0xba, 0x2a, 0x4e, 0xa6, 0xea, 0x64, 0x2a,
		0x4f, 0xa7, 0xfa, 0x9b, 0x71, 0x2e, 0xf4, 0xe6, 0x99, 0x1e, 0xd8, 0x4d, 0xc8, 0xaa, 0x0e, 0x27,
		0x8a, 0x86, 0x27, 0xf2, 0x30, 0xef, 0xb4, 0x43, 0xf3, 0x4e, 0xe3, 0x6e, 0x27, 0x4e, 0xae, 0xcc,
		0xcb, 0x45, 0x7a, 0x05, 0xe9, 0x15, 0xa4, 0x57, 0x90, 0x5e, 0x41, 0x7a, 0x25, 0x4b, 0xe9, 0x15,
		0x2d, 0xae, 0x08, 0xdf, 0x72, 0x03, 0x47, 0x39, 0x7d, 0xb2, 0x84, 0x2a, 0x53, 0x52, 0xe1, 0xaa,
		0xec, 0x94, 0xab, 0xd2, 0xea, 0x06, 0x64, 0x8a, 0x14, 0xca, 0x82, 0xfa, 0x64, 0x50, 0x7d, 0xf2,
		0x97, 0xf0, 0x7d, 0xd8, 0x68, 0x29, 0xf1, 0x1f, 0x28, 0x25, 0x46, 0x29, 0x31, 0x52, 0x3c, 0x48,
		0xf1, 0x00, 0x7c, 0x48, 0xf1, 0x20, 0xc5, 0x83, 0x14, 0x0f, 0x52, 0x3c, 0x48, 0xf1, 0x20, 0xc5,
		0x83, 0x14, 0x0f, 0x52, 0x3c, 0x70, 0x55, 0x90, 0xe2, 0x81, 0xfa, 0x20, 0xc5, 0x93, 0x44, 0x8a,
		0x67, 0x83, 0x35, 0x7d, 0x7f, 0xa0, 0xa6, 0x6f, 0x59, 0x37, 0x24, 0x5b, 0xd3, 0xf7, 0xc7, 0xa6,
		0x6b, 0xfa, 0x1e, 0xa3, 0xd0, 0xcb, 0x0f, 0xd4, 0x2a, 0xfb, 0xc6, 0x77, 0xa3, 0xbe, 0x0f, 0xf5,
		0x7d, 0x9a, 0xc3, 0x18, 0xf5, 0x7d, 0x48, 0xfe, 0x22, 0xf9, 0x4b, 0x93, 0xfc, 0xbd, 0xe9, 0x58,
		0xf6, 0x7d, 0xc7, 0x09, 0x44, 0x64, 0x9f, 0xf5, 0xdd, 0xe1, 0x17, 0xf2, 0x90, 0xa5, 0x43, 0x96,
		0x0e, 0x59, 0x3a, 0x64, 0xe9, 0x90, 0xa5, 0xcb, 0x79, 0x96, 0xae, 0x6b, 0x3d, 0x32, 0xab, 0x2f,
		0xee, 0x58, 0xdb, 0x72, 0x3a, 0x7d, 0x9f, 0x13, 0x64, 0x56, 0xe6, 0x45, 0x82, 0x26, 0x8e, 0x2b,
		0x6a, 0x04, 0x30, 0x31, 0x01, 0x13, 0xc0, 0x64, 0x47, 0x60, 0x52, 0x32, 0x81, 0x92, 0xed, 0xa1,
		0x24, 0x77, 0xe9, 0xd5, 0x51, 0x22, 0x6b, 0x93, 0x75, 0x74, 0xff, 0xff, 0x2a, 0xfa, 0x48, 0x14,
		0xd3, 0xa1, 0x98, 0x0e, 0xf9, 0x14, 0xe4, 0x53, 0x90, 0x4f, 0x41, 0x3e, 0x05, 0x2e, 0x30, 0x5c,
		0x60, 0xe4, 0x53, 0x90, 0x4f, 0x41, 0x3e, 0x05, 0xf9, 0x14, 0xc0, 0x04, 0x30, 0x41, 0x3e, 0x05,
		0xf9, 0x94, 0x6c, 0xe7, 0x53, 0x36, 0x57, 0xb4, 0x36, 0x4a, 0xa7, 0xa0, 0x72, 0x6d, 0x65, 0x8f,
		0x24, 0x5a, 0xbf, 0x36, 0xec, 0x83, 0x4d, 0x16, 0xb1, 0x0d, 0x9f, 0x4e, 0xb2, 0x78, 0x2d, 0xba,
		0x4b, 0xae, 0x68, 0xad, 0x98, 0x54, 0xd1, 0x9a, 0xb4, 0xe3, 0x33, 0x7e, 0x8b, 0x0e, 0xb7, 0xda,
		0x3e, 0x6f, 0xcb, 0x74, 0xe9, 0x28, 0xdd, 0x76, 0x24, 0x71, 0xcf, 0xe7, 0xa1, 0xa2, 0xbd, 0x79,
		0x33, 0x4c, 0x8f, 0x1e, 0x46, 0xcd, 0xb7, 0xc1, 0x4e, 0x96, 0x4b, 0x4c, 0x2a, 0x25, 0x24, 0x95,
		0x6b, 0x13, 0x4b, 0xa8, 0x4d, 0x24, 0x4f, 0x2c, 0x66, 0xbe, 0x36, 0xd1, 0x6a, 0x3d, 0x70, 0x5f,
		0x38, 0x41, 0x68, 0x89, 0xa5, 0x2c, 0xd4, 0x5c, 0xd7, 0xcf, 0x49, 0x52, 0xcb, 0xaf, 0x17, 0x37,
		0x55, 0xaf, 0xa8, 0x1c, 0xc6, 0x11, 0xac, 0x37, 0x50, 0x5c, 0x67, 0x90, 0xcc, 0x64, 0xca, 0x8d,
		0x15, 0x38, 0x36, 0x6b, 0x59, 0xc2, 0x62, 0xbe, 0x25, 0x14, 0x42, 0xfd, 0x49, 0x83, 0xbc, 0x94,
		0x94, 0x7b, 0x15, 0x70, 0x5a, 0xdc, 0x15, 0x8e, 0x78, 0x92, 0x83, 0xdb, 0x9c, 0x1a, 0x28, 0x84,
		0x34, 0x85, 0x0f, 0xc3, 0x8f, 0x7e, 0x6b, 0x05, 0x04, 0x89, 0xfe, 0x77, 0xf5, 0xab, 0x7a, 0xf3,
		0xa2, 0x7e, 0xd5, 0x50, 0xcd, 0xca, 0x44, 0xf1, 0x59, 0xa0, 0x95, 0x48, 0xd0, 0x0b, 0x3c, 0xc7,
		0xaf, 0x12, 0xbe, 0x45, 0xd3, 0xa8, 0x7d, 0x7a, 0x5b, 0xd8, 0xdb, 0x42, 0x30, 0x4d, 0xf9, 0x12,
		0xe5, 0x6a, 0x0e, 0x5e, 0xa2, 0x92, 0x87, 0x9e, 0xc8, 0x43, 0x47, 0x18, 0x39, 0x78, 0x07, 0xf3,
		0x8d, 0x99, 0x87, 0x9e, 0xc8, 0x45, 0x57, 0x54, 0x72, 0xf0, 0x12, 0xc7, 0x39, 0x78, 0x87, 0x52,
		0x1e, 0x46, 0x44, 0x1e, 0x5e, 0xa2, 0xa4, 0x37, 0x22, 0x94, 0xee, 0xbc, 0x4e, 0x59, 0x0e, 0xf7,
		0xa3, 0x13, 0x88, 0xba, 0x10, 0x8a, 0xe5, 0x2b, 0x9f, 0x1c, 0xb7, 0xd1, 0xe1, 0x61, 0x3c, 0x1d,
		0x7a, 0x92, 0x6e, 0xbf, 0xd3, 0x51, 0x70, 0x8c, 0x3f, 0x59, 0x8f, 0xfa, 0x42, 0xce, 0xfd, 0x16,
		0xf7, 0x79, 0xeb, 0xed, 0xd3, 0x50, 0x44, 0x1a, 0xe2, 0x34, 0xdf, 0xb3, 0x5a, 0xb6, 0x15, 0x08,
		0xd6, 0x76, 0x3a, 0x82, 0xfb, 0x1a, 0x71, 0xda, 0x4b, 0x49, 0x08, 0xd5, 0x33, 0x12, 0xaa, 0x07,
		0x01, 0xb3, 0xef, 0x2c, 0xd7, 0xe5, 0x1d, 0xd6, 0x17, 0x4e, 0xc7, 0xf9, 0xaf, 0xda, 0x74, 0xc9,
		0xa4, 0x5d, 0x96, 0x08, 0xcc, 0xbd, 0x42, 0xf4, 0xb8, 0x6f, 0x73, 0x57, 0x58, 0xb7, 0x5c, 0x43,
		0x27, 0x54, 0xc2, 0x76, 0xbd, 0xf9, 0x76, 0x8d, 0xa2, 0x03, 0x8a, 0xf9, 0x75, 0xa2, 0x49, 0x5d,
		0xaa, 0xf9, 0x74, 0xca, 0x29, 0x5c, 0x0d, 0x1f, 0x82, 0x64, 0xde, 0x9c, 0xba, 0x69, 0x8d, 0x62,
		0x9a, 0x1a, 0x77, 0x43, 0xf3, 0xd3, 0xd7, 0xe9, 0xb0, 0xd1, 0x0a, 0x27, 0x9b, 0x4f, 0x5b, 0x64,
		0xe9, 0x73, 0xcc, 0x33, 0x68, 0x7f, 0xbb, 0x96, 0xcd, 0xac, 0x56, 0xcb, 0xe7, 0x41, 0xa0, 0x03,
		0xe5, 0x9a, 0xc2, 0xbd, 0x9f, 0x2d, 0x21, 0xb8, 0xef, 0x2a, 0xdb, 0xe0, 0xc2, 0x7f, 0xbe, 0x14,
		0xd9, 0xb1, 0xc5, 0xda, 0x75, 0xf6, 0xfe, 0xfa, 0x7b, 0xe9, 0xf9, 0xd5, 0xc9, 0xec, 0xff, 0x0f,
		0xbe, 0x9b, 0xcf, 0xff, 0x2a, 0x64, 0x52, 0x77, 0x6d, 0xaf, 0xef, 0x0a, 0x99, 0x4d, 0x56, 0xe6,
		0xfa, 0x75, 0x2c, 0x01, 0xbb, 0x55, 0xac, 0x13, 0x83, 0xd5, 0x15, 0x5b, 0x8a, 0x51, 0x95, 0x57,
		0x57, 0xb8, 0xfd, 0x2e, 0xb3, 0x82, 0xc0, 0xb3, 0x1d, 0x4b, 0xf0, 0x16, 0xb3, 0x3b, 0xce, 0x30,
		0xc8, 0xd4, 0x9c, 0x7c, 0x59, 0x22, 0x17, 0xf5, 0xb1, 0xa8, 0x8f, 0xa5, 0xf5, 0xdf, 0x89, 0x9d,
		0x4d, 0x6a, 0x7f, 0x3e, 0x09, 0xd7, 0x93, 0xc0, 0xbf, 0x27, 0xf5, 0xf3, 0x93, 0xee, 0x02, 0xd4,
		0xc7, 0x92, 0x64, 0x49, 0xf7, 0x37, 0xb6, 0xd4, 0xc2, 0x7f, 0x64, 0x37, 0x4f, 0x82, 0x07, 0x51,
		0xdd, 0x84, 0x3e, 0x4b, 0x66, 0xc5, 0xed, 0x3c, 0x42, 0x86, 0xfe, 0x68, 0xb5, 0x42, 0x80, 0x91,
		0x1a, 0x30, 0x02, 0x8c, 0xec, 0x08, 0x46, 0x8c, 0x5a, 0xa5, 0x52, 0x3d, 0xaa, 0x54, 0x8a, 0x47,
		0xe5, 0xa3, 0xe2, 0xb1, 0x69, 0x1a, 0x55, 0x03, 0x5c, 0xc9, 0x1a, 0x57, 0x6c, 0xcf, 0x15, 0xbe,
		0xd7, 0x21, 0x81, 0xca, 0x48, 0x16, 0x88, 0x02, 0xa2, 0x80, 0x28, 0x20, 0x0a, 0x88, 0xb2, 0x8b,
		0x44, 0x89, 0x6a, 0xbb, 0x5b, 0x4e, 0x20, 0x48, 0x98, 0x32, 0x91, 0xa6, 0x47, 0x15, 0x63, 0x5b,
		0x54, 0xd1, 0xc8, 0x22, 0xcf, 0xb5, 0x87, 0x5e, 0x36, 0x79, 0x2c, 0x4e, 0x33, 0xab, 0x3c, 0x69,
		0x5a, 0xa2, 0xec, 0xf2, 0x58, 0x20, 0x55, 0x96, 0x79, 0x2c, 0x90, 0x2c, 0xdb, 0xac, 0x37, 0x6a,
		0x15, 0xed, 0xb7, 0x72, 0x16, 0x7a, 0x7a, 0x38, 0x16, 0x59, 0xb5, 0xa2, 0xdf, 0xd5, 0x53, 0x23,
		0x32, 0x12, 0xf8, 0x3a, 0x15, 0x13, 0xd9, 0xba, 0x83, 0x93, 0xce, 0xf5, 0x4b, 0xc4, 0x05, 0x24,
		0x74, 0x05, 0x89, 0x5d, 0x42, 0x3a, 0xd7, 0x30, 0x11, 0x17, 0x31, 0x21, 0x3f, 0x25, 0x29, 0x97,
		0x31, 0x49, 0x27, 0x85, 0xd0, 0x85, 0x4c, 0xc4, 0x95, 0xdc, 0x54, 0x57, 0x25, 0xe7, 0x5a, 0x6e,
		0xa4, 0xf7, 0xf6, 0xd2, 0x21, 0xe5, 0x7a, 0x4b, 0x2e, 0xaf, 0x4e, 0xe5, 0x95, 0xff, 0xc8, 0x8c,
		0x62, 0xc9, 0x64, 0xa5, 0x62, 0xa5, 0x46, 0x0a, 0xc2, 0x89, 0x54, 0xd0, 0x10, 0x34, 0x04, 0x0d,
		0x41, 0x43, 0xd0, 0x10, 0x34, 0xcc, 0x00, 0x0d, 0x4b, 0xc7, 0xac, 0x64, 0x56, 0x69, 0x59, 0x38,
		0x94, 0x09, 0x12, 0x82, 0x84, 0x20, 0x21, 0x48, 0x08, 0x12, 0x82, 0x84, 0x19, 0x20, 0x61, 0xd9,
		0x28, 0x1e, 0x95, 0x59, 0xa9, 0x5a, 0x32, 0x2a, 0xb4, 0x49, 0xd2, 0x59, 0xc9, 0xa0, 0x22, 0xa8,
		0x08, 0x2a, 0x82, 0x8a, 0xa0, 0x22, 0xa8, 0x98, 0x01, 0x2a, 0x56, 0xcb, 0x35, 0x93, 0x95, 0x4b,
		0x47, 0x55, 0xe2, 0x7c, 0xe9, 0x94, 0x5c, 0x10, 0x11, 0x44, 0x04, 0x11, 0x41, 0x44, 0x10, 0x11,
		0x44, 0x4c, 0x3f, 0x11, 0x4b, 0xc5, 0xca, 0x31, 0xab, 0x14, 0x8f, 0x69, 0x73, 0xa6, 0x13, 0xa9,
		0xa0, 0x21, 0x68, 0x08, 0x1a, 0x82, 0x86, 0xa0, 0x21, 0x68, 0x98, 0x01, 0x1a, 0x9a, 0x47, 0xcc,
		0x34, 0x4a, 0xb4, 0x2c, 0x1c, 0xca, 0x04, 0x09, 0x41, 0x42, 0x90, 0x10, 0x24, 0x04, 0x09, 0x41,
		0xc2, 0x0c, 0x90, 0xb0, 0x5a, 0x32, 0x2a, 0x26, 0x33, 0x4b, 0x95, 0x52, 0x8d, 0x36, 0x57, 0x3a,
		0x2b, 0x19, 0x54, 0x04, 0x15, 0x41, 0x45, 0x50, 0x11, 0x54, 0x04, 0x15, 0xd3, 0x4f, 0xc5, 0x72,
		0xe9, 0xa8, 0x7a, 0xcc, 0xaa, 0xa6, 0x59, 0xa6, 0xcd, 0x97, 0x4e, 0xcb, 0x05, 0x11, 0x41, 0x44,
		0x10, 0x11, 0x44, 0x04, 0x11, 0x41, 0xc4, 0xf4, 0x13, 0xb1, 0x52, 0x3c, 0x3e, 0x62, 0x35, 0xe3,
		0x98, 0x36, 0x67, 0x3a, 0x91, 0x0a, 0x1a, 0x82, 0x86, 0xa0, 0x21, 0x68, 0x08, 0x1a, 0x82, 0x86,
		0xe9, 0xa7, 0xa1, 0x69, 0x94, 0x99, 0x51, 0x2c, 0xd1, 0x2e, 0xb8, 0x18, 0x0b, 0x05, 0x0b, 0xc1,
		0x42, 0xb0, 0x10, 0x2c, 0x04, 0x0b, 0xc1, 0xc2, 0x0c, 0xb0, 0xb0, 0x54, 0x29, 0xd5, 0x8e, 0x99,
		0x51, 0xac, 0xd4, 0xcc, 0x23, 0xda, 0x74, 0xe9, 0x0b, 0xd1, 0xe0, 0x22, 0xb8, 0x08, 0x2e, 0x82,
		0x8b, 0xe0, 0x22, 0xb8, 0x98, 0x7e, 0x2e, 0x56, 0x4d, 0x66, 0x94, 0x68, 0x4b, 0x6a, 0x86, 0x22,
		0xc1, 0x41, 0x70, 0x10, 0x1c, 0x04, 0x07, 0xc1, 0x41, 0x70, 0x30, 0x0b, 0x1c, 0x34, 0xcb, 0x47,
		0x83, 0xdd, 0x64, 0x4a, 0xc4, 0x34, 0x9c, 0x12, 0x0c, 0x26, 0x82, 0x89, 0x60, 0x22, 0x98, 0x08,
		0x26, 0x82, 0x89, 0xe9, 0x67, 0x62, 0xcd, 0x38, 0x2e, 0x47, 0x9b, 0xc9, 0xd0, 0xce, 0x20, 0x4e,
		0x89, 0x05, 0x0f, 0xc1, 0x43, 0xf0, 0x10, 0x3c, 0x04, 0x0f, 0xc1, 0xc3, 0x4d, 0xf0, 0x70, 0xa3,
		0x87, 0x4a, 0xd5, 0x5d, 0xd7, 0x13, 0x56, 0xd8, 0x95, 0x7a, 0x67, 0x4b, 0x05, 0xf6, 0x1d, 0xef,
		0x5a, 0x3d, 0x4b, 0xdc, 0x85, 0x44, 0x38, 0x8c, 0xce, 0xd6, 0xf2, 0xda, 0x6d, 0xc7, 0xe6, 0x87,
		0x83, 0x6f, 0xcc, 0xea, 0x1d, 0x06, 0x81, 0xd3, 0x0a, 0xa2, 0xaf, 0x87, 0x81, 0xb0, 0x04, 0x3f,
		0x1c, 0x92, 0x23, 0x38, 0x24, 0x38, 0xdb, 0x6d, 0xf0, 0x18, 0xc2, 0xef, 0xdb, 0xc2, 0x1d, 0x82,
		0xe9, 0x4f, 0xa7, 0xed, 0x9c, 0x47, 0x9f, 0xde, 0x1c, 0x7c, 0xab, 0xf7, 0x9a, 0x97, 0xe1, 0x33,
		0x44, 0x5f, 0x9b, 0x97, 0xe1, 0x33, 0x34, 0x4f, 0x87, 0xcf, 0xd0, 0xbc, 0x78, 0x7c, 0x67, 0x09,
		0xeb, 0x5d, 0xf8, 0x04, 0x19, 0x38, 0x53, 0xef, 0x5b, 0xb7, 0x4b, 0x77, 0xa4, 0x5e, 0x28, 0x0c,
		0x27, 0xea, 0xe1, 0x44, 0x3d, 0x69, 0xeb, 0xb1, 0xe3, 0x27, 0xea, 0xdd, 0x70, 0xba, 0xa0, 0xe3,
		0x86, 0x23, 0xd2, 0x40, 0xa4, 0x81, 0x48, 0x03, 0x91, 0x06, 0x22, 0x0d, 0x44, 0x1a, 0x69, 0xcf,
		0xbc, 0xdd, 0xdc, 0x13, 0x92, 0xef, 0x1e, 0xe4, 0x03, 0xf9, 0x40, 0x3e, 0x90, 0x0f, 0xe4, 0x03,
		0xf9, 0xd2, 0x4e, 0xbe, 0x07, 0x87, 0x8e, 0x7c, 0x0f, 0x0e, 0xc8, 0x07, 0xf2, 0x81, 0x7c, 0x20,
		0x1f, 0xc8, 0x07, 0xf2, 0xa5, 0x9e, 0x7c, 0x1e, 0x21, 0xf9, 0x3c, 0x90, 0x0f, 0xe4, 0x03, 0xf9,
		0x40, 0x3e, 0x90, 0x0f, 0xe4, 0xdb, 0x08, 0xf9, 0x76, 0xb9, 0xae, 0x42, 0x7d, 0x82, 0x7f, 0x9f,
		0xa6, 0xac, 0xe2, 0xcf, 0x6e, 0x37, 0xe5, 0x55, 0x15, 0x5d, 0x3b, 0x20, 0x29, 0xa8, 0x08, 0xe5,
		0xa0, 0x96, 0x02, 0xb5, 0x14, 0xd2, 0x16, 0x63, 0xc7, 0x6b, 0x29, 0xba, 0x76, 0x50, 0xa4, 0x8b,
		0x2f, 0x22, 0x69, 0x88, 0x30, 0x10, 0x61, 0x20, 0xc2, 0x40, 0x84, 0x81, 0x08, 0x03, 0x11, 0x46,
		0xca, 0x73, 0x6b, 0x5d, 0x3b, 0x30, 0x48, 0xe9, 0x67, 0x80, 0x7e, 0xa0, 0x1f, 0xe8, 0x07, 0xfa,
		0x81, 0x7e, 0xa0, 0x5f, 0x06, 0xe8, 0x57, 0x22, 0xa5, 0x1f, 0x76, 0xb1, 0x00, 0xfd, 0x40, 0x3f,
		0xd0, 0x0f, 0xf4, 0x03, 0xfd, 0xb2, 0x40, 0xbf, 0x32, 0x29, 0xfd, 0xca, 0xa0, 0x1f, 0xe8, 0x07,
		0xfa, 0x81, 0x7e, 0xa0, 0x1f, 0xe8, 0x97, 0x01, 0xfa, 0x55, 0x48, 0xe9, 0x87, 0x1d, 0x9b, 0x40,
		0x3f, 0xd0, 0x0f, 0xf4, 0x03, 0xfd, 0x40, 0xbf, 0x2c, 0xd0, 0xcf, 0x24, 0xa5, 0x9f, 0x09, 0xfa,
		0x81, 0x7e, 0xa0, 0x1f, 0xe8, 0x07, 0xfa, 0x81, 0x7e, 0x19, 0xa0, 0x5f, 0x95, 0x94, 0x7e, 0x38,
		0xd9, 0x0c, 0xf4, 0x03, 0xfd, 0x40, 0x3f, 0xd0, 0x0f, 0xf4, 0xcb, 0x02, 0xfd, 0x8e, 0x48, 0xe9,
		0x77, 0x04, 0xfa, 0x81, 0x7e, 0xa0, 0x1f, 0xe8, 0x07, 0xfa, 0x81, 0x7e, 0x19, 0xa0, 0x5f, 0x8d,
		0x94, 0x7e, 0x38, 0xcd, 0x13, 0xf4, 0x03, 0xfd, 0x40, 0x3f, 0xd0, 0x0f, 0xf4, 0xcb, 0x02, 0xfd,
		0x8e, 0x49, 0xe9, 0x77, 0x0c, 0xfa, 0x81, 0x7e, 0xa0, 0x1f, 0xe8, 0x07, 0xfa, 0x81, 0x7e, 0x1b,
		0xa1, 0xdf, 0x8e, 0xee, 0xa7, 0xa5, 0xbe, 0xbf, 0xd3, 0xbe, 0xfe, 0x56, 0x5a, 0x9f, 0xec, 0x20,
		0xed, 0xdb, 0x68, 0xdd, 0x76, 0x05, 0xcd, 0x3e, 0x5a, 0xa1, 0x20, 0xbd, 0x8d, 0xb4, 0x8a, 0xdb,
		0xda, 0x48, 0x4b, 0xdb, 0x77, 0x21, 0xf5, 0x59, 0x08, 0x7c, 0x15, 0x22, 0x1f, 0x85, 0xc0, 0x99,
		0xa3, 0xf4, 0x49, 0x88, 0x01, 0x47, 0xed, 0x83, 0x24, 0x41, 0x2f, 0x02, 0x9f, 0x83, 0xd4, 0xd7,
		0x48, 0xaa, 0x0b, 0x92, 0xf3, 0x2d, 0x12, 0xe9, 0x95, 0x2d, 0x31, 0xfc, 0x3a, 0xdd, 0x2c, 0xf1,
		0xb9, 0xf0, 0x1d, 0x4e, 0xb3, 0x2d, 0xe3, 0x48, 0x16, 0x88, 0x02, 0xa2, 0x80, 0x28, 0x20, 0x0a,
		0x88, 0xb2, 0xc3, 0x44, 0x89, 0x36, 0x45, 0xa6, 0xc4, 0xca, 0x40, 0x20, 0xd8, 0x02, 0xb6, 0x80,
		0x2d, 0x60, 0x0b, 0xd8, 0xb2, 0xcb, 0x6c, 0x09, 0xfa, 0x37, 0x6d, 0x7f, 0x60, 0x10, 0xe9, 0xf8,
		0x32, 0x16, 0x0a, 0xc6, 0x80, 0x31, 0x60, 0x0c, 0x18, 0x03, 0xc6, 0xec, 0x1c, 0x63, 0xc4, 0x23,
		0xbb, 0x79, 0x12, 0x64, 0xd1, 0xcb, 0xac, 0x38, 0x70, 0x05, 0x5c, 0x01, 0x57, 0xc0, 0x15, 0x70,
		0x65, 0x17, 0xb9, 0x62, 0x7b, 0xae, 0xf0, 0xbd, 0x0e, 0x09, 0x54, 0x46, 0xb2, 0x40, 0x14, 0x10,
		0x05, 0x44, 0x01, 0x51, 0x40, 0x94, 0x5d, 0x24, 0x4a, 0x74, 0xec, 0x64, 0xcb, 0x09, 0x04, 0x09,
		0x53, 0x26, 0xd2, 0x70, 0xb4, 0x22, 0x8e, 0x56, 0x94, 0x15, 0xb8, 0xeb, 0x47, 0x2b, 0x8a, 0x47,
		0x56, 0x64, 0x55, 0xc2, 0x5d, 0x56, 0x47, 0x02, 0xb1, 0xe4, 0x64, 0x03, 0x2e, 0x20, 0xa1, 0x2b,
		0x48, 0xec, 0x12, 0xd2, 0xb9, 0x86, 0x89, 0xb8, 0x88, 0x09, 0xf9, 0x29, 0x49, 0xb9, 0x8c, 0x49,
		0x3a, 0x29, 0x84, 0x2e, 0x64, 0x22, 0xae, 0xe4, 0xa6, 0xba, 0x0a, 0x4b, 0x4e, 0x76, 0x75, 0xc1,
		0xa5, 0x78, 0x64, 0x46, 0xb1, 0x64, 0xb2, 0x52, 0xb1, 0x52, 0x23, 0x05, 0xe1, 0x44, 0x2a, 0x68,
		0x08, 0x1a, 0x82, 0x86, 0xa0, 0x21, 0x68, 0x08, 0x1a, 0x66, 0x80, 0x86, 0xa5, 0x63, 0x56, 0x32,
		0xab, 0xb4, 0x2c, 0x1c, 0xca, 0x04, 0x09, 0x41, 0x42, 0x90, 0x10, 0x24, 0x04, 0x09, 0x41, 0xc2,
		0x0c, 0x90, 0xb0, 0x6c, 0x14, 0x8f, 0xca, 0xac, 0x54, 0x2d, 0x19, 0x15, 0xda, 0x24, 0xe9, 0xac,
		0x64, 0x50, 0x11, 0x54, 0x04, 0x15, 0x41, 0x45, 0x50, 0x11, 0x54, 0xcc, 0x00, 0x15, 0xab, 0xe5,
		0x9a, 0xc9, 0xca, 0xa5, 0xa3, 0x2a, 0x71, 0xbe, 0x74, 0x4a, 0x2e, 0x88, 0x08, 0x22, 0x82, 0x88,
		0x20, 0x22, 0x88, 0x08, 0x22, 0xa6, 0x9f, 0x88, 0xa5, 0x62, 0xe5, 0x98, 0x55, 0x8a, 0xc7, 0xb4,
		0x39, 0xd3, 0x89, 0x54, 0xd0, 0x10, 0x34, 0x04, 0x0d, 0x41, 0x43, 0xd0, 0x10, 0x34, 0xcc, 0x00,
		0x0d, 0xcd, 0x23, 0x66, 0x1a, 0x25, 0x5a, 0x16, 0x0e, 0x65, 0x82, 0x84, 0x20, 0x21, 0x48, 0x08,
		0x12, 0x82, 0x84, 0x20, 0x61, 0x06, 0x48, 0x58, 0x2d, 0x19, 0x15, 0x93, 0x99, 0xa5, 0x4a, 0xa9,
		0x46, 0x9b, 0x2b, 0x9d, 0x95, 0x0c, 0x2a, 0x82, 0x8a, 0xa0, 0x22, 0xa8, 0x08, 0x2a, 0x82, 0x8a,
		0xe9, 0xa7, 0x62, 0xb9, 0x74, 0x54, 0x3d, 0x66, 0x55, 0xd3, 0x2c, 0xd3, 0xe6, 0x4b, 0xa7, 0xe5,
		0x82, 0x88, 0x20, 0x22, 0x88, 0x08, 0x22, 0x82, 0x88, 0x20, 0x62, 0xfa, 0x89, 0x58, 0x29, 0x1e,
		0x1f, 0xb1, 0x9a, 0x71, 0x4c, 0x9b, 0x33, 0x9d, 0x48, 0x05, 0x0d, 0x41, 0x43, 0xd0, 0x10, 0x34,
		0x04, 0x0d, 0x41, 0xc3, 0xf4, 0xd3, 0xd0, 0x34, 0xca, 0xcc, 0x28, 0x96, 0x68, 0x17, 0x5c, 0x8c,
		0x85, 0x82, 0x85, 0x60, 0x21, 0x58, 0x08, 0x16, 0x82, 0x85, 0x60, 0x61, 0x06, 0x58, 0x58, 0xaa,
		0x94, 0x6a, 0xc7, 0xcc, 0x28, 0x56, 0x6a, 0xe6, 0x11, 0x6d, 0xba, 0xf4, 0x85, 0x68, 0x70, 0x11,
		0x5c, 0x04, 0x17, 0xc1, 0x45, 0x70, 0x11, 0x5c, 0x4c, 0x3f, 0x17, 0xab, 0x26, 0x33, 0x4a, 0xb4,
		0x25, 0x35, 0x43, 0x91, 0xe0, 0x20, 0x38, 0x08, 0x0e, 0x82, 0x83, 0xe0, 0x20, 0x38, 0x98, 0x05,
		0x0e, 0x9a, 0xe5, 0xa3, 0xc1, 0x6e, 0x32, 0x25, 0x62, 0x1a, 0x4e, 0x09, 0x06, 0x13, 0xc1, 0x44,
		0x30, 0x11, 0x4c, 0x04, 0x13, 0xc1, 0xc4, 0xf4, 0x33, 0xb1, 0x66, 0x1c, 0x97, 0xa3, 0xcd, 0x64,
		0x68, 0x67, 0x10, 0xa7, 0xc4, 0x82, 0x87, 0xe0, 0x21, 0x78, 0x08, 0x1e, 0x82, 0x87, 0xe0, 0xe1,
		0x26, 0x78, 0xb8, 0xd1, 0x43, 0xa5, 0xea, 0xae, 0xeb, 0x09, 0x2b, 0xec, 0x4a, 0xbd, 0xb3, 0xa5,
		0x02, 0xfb, 0x8e, 0x77, 0xad, 0x9e, 0x25, 0xee, 0x42, 0x22, 0x1c, 0x46, 0x67, 0x6b, 0x79, 0xed,
		0xb6, 0x63, 0xf3, 0xc3, 0xc1, 0x37, 0x66, 0xf5, 0x0e, 0x83, 0xc0, 0x69, 0x05, 0xd1, 0xd7, 0xc3,
		0x40, 0x58, 0x82, 0x1f, 0x0e, 0xc9, 0x11, 0x1c, 0x12, 0x9c, 0xed, 0x36, 0x78, 0x0c, 0xe1, 0xf7,
		0x6d, 0xe1, 0x0e, 0xc1, 0xf4, 0xa7, 0xd3, 0x76, 0xce, 0xa3, 0x4f, 0x6f, 0x0e, 0xbe, 0xd5, 0x7b,
		0xcd, 0xcb, 0xf0, 0x19, 0xa2, 0xaf, 0xcd, 0xcb, 0xf0, 0x19, 0x9a, 0xa7, 0xc3, 0x67, 0x68, 0x5e,
		0x3d, 0xbe, 0xb3, 0x84, 0xf5, 0x2e, 0x7c, 0x82, 0x0c, 0x9c, 0xa9, 0xf7, 0xad, 0xdb, 0xa5, 0x3b,
		0x52, 0x2f, 0x14, 0x86, 0x13, 0xf5, 0x70, 0xa2, 0x9e, 0xb4, 0xf5, 0xd8, 0xf1, 0x13, 0xf5, 0x6e,
		0x38, 0x5d, 0xd0, 0x71, 0xc3, 0x11, 0x69, 0x20, 0xd2, 0x40, 0xa4, 0x81, 0x48, 0x03, 0x91, 0x06,
		0x22, 0x8d, 0xb4, 0x67, 0xde, 0x6e, 0xee, 0x09, 0xc9, 0x77, 0x0f, 0xf2, 0x81, 0x7c, 0x20, 0x1f,
		0xc8, 0x07, 0xf2, 0x81, 0x7c, 0x69, 0x27, 0xdf, 0x83, 0x43, 0x47, 0xbe, 0x07, 0x07, 0xe4, 0x03,
		0xf9, 0x40, 0x3e, 0x90, 0x0f, 0xe4, 0x03, 0xf9, 0x52, 0x4f, 0x3e, 0x8f, 0x90, 0x7c, 0x1e, 0xc8,
		0x07, 0xf2, 0x81, 0x7c, 0x20, 0x1f, 0xc8, 0x07, 0xf2, 0x6d, 0x84, 0x7c, 0xbb, 0x5c, 0x57, 0xa1,
		0x3e, 0xc1, 0xbf, 0x4f, 0x53, 0x56, 0xf1, 0x67, 0xb7, 0x9b, 0xf2, 0xaa, 0x8a, 0xae, 0x1d, 0x90,
		0x14, 0x54, 0x84, 0x72, 0x50, 0x4b, 0x81, 0x5a, 0x0a, 0x69, 0x8b, 0xb1, 0xe3, 0xb5, 0x14, 0x5d,
		0x3b, 0x28, 0xd2, 0xc5, 0x17, 0x91, 0x34, 0x44, 0x18, 0x88, 0x30, 0x10, 0x61, 0x20, 0xc2, 0x40,
		0x84, 0x81, 0x08, 0x23, 0xe5, 0xb9, 0xb5, 0xae, 0x1d, 0x18, 0xa4, 0xf4, 0x33, 0x40, 0x3f, 0xd0,
		0x0f, 0xf4, 0x03, 0xfd, 0x40, 0x3f, 0xd0, 0x2f, 0x03, 0xf4, 0x2b, 0x91, 0xd2, 0x0f, 0xbb, 0x58,
		0x80, 0x7e, 0xa0, 0x1f, 0xe8, 0x07, 0xfa, 0x81, 0x7e, 0x59, 0xa0, 0x5f, 0x99, 0x94, 0x7e, 0x65,
		0xd0, 0x0f, 0xf4, 0x03, 0xfd, 0x40, 0x3f, 0xd0, 0x0f, 0xf4, 0xcb, 0x00, 0xfd, 0x2a, 0xa4, 0xf4,
		0xc3, 0x8e, 0x4d, 0xa0, 0x1f, 0xe8, 0x07, 0xfa, 0x81, 0x7e, 0xa0, 0x5f, 0x16, 0xe8, 0x67, 0x92,
		0xd2, 0xcf, 0x04, 0xfd, 0x40, 0x3f, 0xd0, 0x0f, 0xf4, 0x03, 0xfd, 0x40, 0xbf, 0x0c, 0xd0, 0xaf,
		0x4a, 0x4a, 0x3f, 0x9c, 0x6c, 0x06, 0xfa, 0x81, 0x7e, 0xa0, 0x1f, 0xe8, 0x07, 0xfa, 0x65, 0x81,
		0x7e, 0x47, 0xa4, 0xf4, 0x3b, 0x02, 0xfd, 0x40, 0x3f, 0xd0, 0x0f, 0xf4, 0x03, 0xfd, 0x40, 0xbf,
		0x0c, 0xd0, 0xaf, 0x46, 0x4a, 0x3f, 0x9c, 0xe6, 0x09, 0xfa, 0x81, 0x7e, 0xa0, 0x1f, 0xe8, 0x07,
		0xfa, 0x65, 0x81, 0x7e, 0xc7, 0xa4, 0xf4, 0x3b, 0x06, 0xfd, 0x40, 0x3f, 0xd0, 0x0f, 0xf4, 0x03,
		0xfd, 0x40, 0xbf, 0x8d, 0xd0, 0x6f, 0x47, 0xf7, 0xd3, 0x52, 0xdf, 0xdf, 0x69, 0x5f, 0x7f, 0x2b,
		0xad, 0x4f, 0x76, 0x90, 0xf6, 0x6d, 0xb4, 0x6e, 0xbb, 0x82, 0x66, 0x1f, 0xad, 0x50, 0x90, 0xde,
		0x46, 0x5a, 0xc5, 0x6d, 0x6d, 0xa4, 0xa5, 0xed, 0xbb, 0x90, 0xfa, 0x2c, 0x04, 0xbe, 0x0a, 0x91,
		0x8f, 0x42, 0xe0, 0xcc, 0x51, 0xfa, 0x24, 0xc4, 0x80, 0xa3, 0xf6, 0x41, 0x92, 0xa0, 0x17, 0x81,
		0xcf, 0x41, 0xea, 0x6b, 0x24, 0xd5, 0x05, 0xc9, 0xf9, 0x16, 0x89, 0xf4, 0xca, 0x96, 0x18, 0x7e,
		0x9d, 0x6e, 0x96, 0xf8, 0x5c, 0xf8, 0x0e, 0xa7, 0xd9, 0x96, 0x71, 0x24, 0x0b, 0x44, 0x01, 0x51,
		0x40, 0x14, 0x10, 0x05, 0x44, 0xd9, 0x61, 0xa2, 0x44, 0x9b, 0x22, 0x53, 0x62, 0x65, 0x20, 0x10,
		0x6c, 0x01, 0x5b, 0xc0, 0x16, 0xb0, 0x05, 0x6c, 0xd9, 0x65, 0xb6, 0x04, 0xfd, 0x9b, 0xb6, 0x3f,
		0x30, 0x88, 0x74, 0x7c, 0x19, 0x0b, 0x05, 0x63, 0xc0, 0x18, 0x30, 0x06, 0x8c, 0x01, 0x63, 0xb2,
		0xcd, 0x98, 0xbd, 0x04, 0x75, 0x54, 0x77, 0xb6, 0x4c, 0x73, 0x96, 0x4c, 0xc1, 0x30, 0xeb, 0x4c,
		0x8b, 0xc9, 0x4d, 0x88, 0xc5, 0x6f, 0x78, 0x89, 0x46, 0x2f, 0xd8, 0x81, 0x7c, 0x38, 0x39, 0x21,
		0x5a, 0x20, 0x1b, 0x3a, 0x16, 0xde, 0xf1, 0xb6, 0xd5, 0xef, 0x44, 0x67, 0x85, 0x08, 0xbf, 0x2f,
		0xeb, 0x15, 0x28, 0x9a, 0x18, 0x65, 0x2f, 0x40, 0x9d, 0xfe, 0x93, 0x33, 0xe2, 0x3d, 0xaf, 0xc3,
		0x2d, 0x57, 0x45, 0xb5, 0x46, 0xa7, 0xea, 0x18, 0x29, 0xd0, 0x93, 0xd6, 0x9d, 0xdd, 0x63, 0x3e,
		0xff, 0xa7, 0xef, 0xf8, 0xbc, 0xa5, 0xae, 0x31, 0xb3, 0x62, 0xd0, 0xf9, 0x19, 0xe9, 0x7c, 0x4f,
		0x18, 0xc6, 0xbd, 0x46, 0xaf, 0x0f, 0xee, 0x47, 0x77, 0x67, 0xa4, 0xbb, 0x1f, 0x34, 0x98, 0x10,
		0xde, 0x8c, 0x8e, 0xce, 0x46, 0x47, 0x73, 0xd7, 0xba, 0xe9, 0xe8, 0x98, 0xf3, 0x91, 0x00, 0x38,
		0x01, 0x3b, 0xa1, 0x2f, 0xb7, 0xe2, 0x9e, 0x09, 0xa7, 0xcb, 0xbd, 0xbe, 0x50, 0xd7, 0x99, 0x69,
		0x21, 0xb9, 0xef, 0xf8, 0xbe, 0xe3, 0x0a, 0xa3, 0xaa, 0xd1, 0xef, 0x55, 0x85, 0x5b, 0xf5, 0x12,
		0x3c, 0x1a, 0x99, 0x2e, 0x8a, 0x84, 0x0e, 0x55, 0x39, 0x3f, 0x51, 0x02, 0x87, 0x32, 0x45, 0xa0,
		0xb3, 0xec, 0x82, 0x22, 0x51, 0x43, 0xdd, 0xb4, 0x55, 0xd3, 0x2c, 0x9b, 0x29, 0x6a, 0xde, 0x0d,
		0x65, 0x40, 0xae, 0x53, 0x60, 0x89, 0xef, 0x9c, 0x56, 0x8b, 0xbb, 0xea, 0x46, 0x78, 0x78, 0xbf,
		0x3a, 0xb7, 0xdb, 0x56, 0x27, 0x00, 0xb8, 0xb3, 0x02, 0x6e, 0xa7, 0xf7, 0x50, 0x65, 0x6e, 0xab,
		0xc7, 0xda, 0x4e, 0x47, 0x70, 0x5f, 0x5d, 0x6f, 0x5e, 0x0a, 0x82, 0x02, 0x64, 0x52, 0x01, 0x22,
		0x07, 0x8c, 0x4e, 0x0d, 0x86, 0xe2, 0xe0, 0xcd, 0xc1, 0x9b, 0x83, 0x37, 0x07, 0x6f, 0x0e, 0xde,
		0x9c, 0xa4, 0x75, 0xee, 0xf6, 0x3b, 0xc2, 0xb1, 0xad, 0x40, 0x68, 0xf3, 0x79, 0x4e, 0x12, 0x00,
		0x9d, 0x0d, 0x40, 0xbb, 0x2a, 0x75, 0x37, 0xe3, 0x46, 0x70, 0xe5, 0x0b, 0x6c, 0x32, 0xd8, 0xd5,
		0x81, 0xf0, 0x1d, 0xf7, 0x56, 0xa7, 0xa7, 0x6b, 0x29, 0xe8, 0x69, 0xef, 0xde, 0x56, 0xef, 0xe8,
		0xf0, 0x66, 0x0c, 0xe9, 0x6c, 0x0c, 0x69, 0xaf, 0xc7, 0x7d, 0x4b, 0x38, 0xee, 0x2d, 0x6b, 0xfb,
		0xfc, 0x9f, 0x3e, 0x77, 0xed, 0x27, 0x8d, 0x8e, 0x5f, 0x20, 0x4c, 0x3d, 0x7a, 0xf7, 0x6c, 0x16,
		0x95, 0x46, 0x88, 0xa7, 0x1e, 0x0f, 0x4e, 0xde, 0x5f, 0x34, 0x7e, 0x6b, 0x96, 0x9a, 0x66, 0xf3,
		0xe7, 0x5f, 0xfe, 0xce, 0xbf, 0x76, 0x39, 0x2d, 0xee, 0x0a, 0x47, 0x3c, 0xf9, 0xbc, 0xad, 0xa3,
		0x61, 0x0a, 0xae, 0x52, 0xe1, 0xc3, 0xf0, 0xa3, 0xdf, 0x5a, 0x01, 0x41, 0x91, 0xe5, 0xf9, 0xe7,
		0xc6, 0x45, 0xfd, 0xea, 0xc3, 0xd9, 0xcf, 0xcd, 0xb0, 0x03, 0x7f, 0x6f, 0x9c, 0x9d, 0xfe, 0xa5,
		0x5a, 0x64, 0x19, 0xf9, 0x80, 0x81, 0x56, 0x4d, 0x20, 0xd1, 0x86, 0x30, 0x91, 0x2e, 0x9a, 0xa1,
		0x22, 0x6e, 0xc3, 0x31, 0xa7, 0x7c, 0x89, 0x52, 0x2e, 0x5e, 0x62, 0x68, 0x15, 0x36, 0xec, 0xc6,
		0x5f, 0x27, 0x5d, 0x96, 0x96, 0x90, 0xc1, 0xef, 0x7a, 0x2d, 0xae, 0x63, 0xe3, 0xa3, 0xfb, 0xd5,
		0xcd, 0xfa, 0xf9, 0xe7, 0xc6, 0x59, 0xfe, 0x0d, 0x38, 0x77, 0xfb, 0xdd, 0x08, 0x86, 0x9e, 0x96,
		0x8b, 0x50, 0x51, 0xb8, 0xb7, 0xe1, 0xf6, 0xbb, 0xe1, 0xc3, 0xa7, 0x41, 0xdb, 0x7a, 0x14, 0x93,
		0xb1, 0x3d, 0x4c, 0xc6, 0x22, 0x7d, 0x87, 0xf4, 0x1d, 0xd2, 0x77, 0x48, 0xdf, 0xa9, 0x5b, 0xe2,
		0x7f, 0x6e, 0x82, 0x80, 0x75, 0x3c, 0x4b, 0xa3, 0x90, 0x6a, 0x22, 0x02, 0xd1, 0x7d, 0x36, 0xa2,
		0x7b, 0xff, 0x91, 0x85, 0x7d, 0x16, 0x95, 0xb6, 0x32, 0xfb, 0xce, 0x72, 0x5d, 0xde, 0x61, 0x7d,
		0xe1, 0x74, 0x9c, 0xff, 0xaa, 0xad, 0x5f, 0x18, 0x37, 0xd0, 0x5a, 0xc9, 0xb9, 0x57, 0x91, 0x1e,
		0xf7, 0x6d, 0xee, 0x0a, 0xeb, 0x96, 0x6b, 0x68, 0x89, 0x09, 0x58, 0x03, 0xd6, 0x29, 0x85, 0xb5,
		0x51, 0x2c, 0x02, 0xd5, 0xdb, 0xb0, 0xda, 0x01, 0xf7, 0x1f, 0xb8, 0xcf, 0x6e, 0x7d, 0xaf, 0xdf,
		0x53, 0xb7, 0xd0, 0x33, 0x52, 0x30, 0xed, 0xb2, 0x96, 0xd7, 0x69, 0x98, 0x76, 0x09, 0x06, 0xcb,
		0x0a, 0x99, 0x13, 0x78, 0x1d, 0x4d, 0x40, 0xcf, 0x8b, 0x82, 0xd3, 0x96, 0x0d, 0xa7, 0x2d, 0xe8,
		0xf7, 0x7a, 0x9e, 0x2f, 0x78, 0x2b, 0xda, 0xf6, 0x86, 0xf9, 0x96, 0x50, 0xd8, 0xa4, 0x6d, 0xa2,
		0x07, 0x8b, 0xa4, 0x61, 0xfe, 0x24, 0x9e, 0x3a, 0x6c, 0x7f, 0xfe, 0xe4, 0x5d, 0xfd, 0xaa, 0xde,
		0xbc, 0xa8, 0x5f, 0x35, 0xb2, 0x3f, 0x6b, 0x12, 0xbe, 0x45, 0xd3, 0xa8, 0x7d, 0x7a, 0x9b, 0xe5,
		0x09, 0x87, 0xe8, 0x25, 0xca, 0xd5, 0x1c, 0xbc, 0x44, 0x25, 0x0f, 0x3d, 0x91, 0x87, 0x8e, 0x30,
		0x72, 0xf0, 0x0e, 0xe6, 0x1b, 0x33, 0x0f, 0x3d, 0x91, 0x8b, 0xae, 0xa8, 0xe4, 0xe0, 0x25, 0x8e,
		0x73, 0xf0, 0x0e, 0xa5, 0x3c, 0x8c, 0x88, 0x3c, 0xbc, 0x44, 0x49, 0x6f, 0x44, 0xa4, 0xb3, 0x38,
		0x40, 0xd2, 0xa5, 0xfe, 0xe8, 0x04, 0xa2, 0x2e, 0x84, 0xaf, 0xe6, 0x56, 0x7f, 0x72, 0xdc, 0x46,
		0x87, 0x77, 0xb9, 0x1b, 0x65, 0x71, 0xdc, 0x7e, 0xa7, 0xa3, 0xe0, 0x18, 0x7f, 0xb2, 0x1e, 0xf5,
		0x85, 0x9c, 0xfb, 0x2d, 0xee, 0xf3, 0xd6, 0xdb, 0xa7, 0xa1, 0x88, 0x14, 0xc4, 0x6b, 0x22, 0xb1,
		0x24, 0xbb, 0x40, 0x92, 0x1d, 0x49, 0x76, 0x15, 0x21, 0x48, 0xb2, 0x2f, 0x31, 0x40, 0x48, 0xb2,
		0xd3, 0xa3, 0x2e, 0x9b, 0x49, 0xf6, 0x87, 0x8e, 0xe5, 0x32, 0x47, 0x63, 0x36, 0x7c, 0x24, 0x20,
		0xf7, 0x36, 0x58, 0xed, 0x45, 0xf7, 0x51, 0x92, 0x44, 0x68, 0x25, 0x60, 0x80, 0x93, 0x6a, 0xda,
		0x4a, 0xf1, 0xb8, 0x02, 0x0b, 0xbc, 0x0d, 0x0b, 0xfc, 0xad, 0x67, 0x95, 0x58, 0x2f, 0xd0, 0xd8,
		0xb2, 0x6d, 0x2c, 0x01, 0xd3, 0x9b, 0xeb, 0xde, 0xd5, 0x50, 0xd8, 0x8c, 0xb9, 0xf0, 0x91, 0xbb,
		0xb7, 0xd1, 0x26, 0xa5, 0x30, 0xc2, 0xfa, 0x87, 0xd1, 0xc2, 0x08, 0x2f, 0x6f, 0xda, 0x6a, 0x19,
		0x26, 0x98, 0xcc, 0x04, 0xef, 0x11, 0x6a, 0x90, 0xea, 0x5e, 0xc7, 0x6a, 0x7b, 0x1c, 0x17, 0xa4,
		0x4a, 0x25, 0x64, 0xb7, 0x34, 0x8e, 0x97, 0x02, 0x5c, 0xdf, 0x7c, 0x31, 0x9a, 0xae, 0xf0, 0xad,
		0xdb, 0x8d, 0xdd, 0x5e, 0x13, 0x9c, 0x75, 0xbb, 0x31, 0x5b, 0x60, 0x6c, 0xd5, 0x63, 0x5e, 0x2e,
		0x4b, 0xae, 0xc2, 0x67, 0x9f, 0xb7, 0x1d, 0x39, 0x3b, 0x31, 0x59, 0x21, 0x34, 0x5c, 0xb7, 0xd9,
		0xb5, 0x64, 0x96, 0x01, 0x17, 0x2e, 0xbd, 0xbe, 0x6f, 0x2b, 0x2c, 0x4c, 0xfa, 0x95, 0x3f, 0x7d,
		0xf3, 0xfc, 0x56, 0x94, 0x2d, 0x1a, 0x3c, 0xb5, 0x24, 0x9d, 0x7f, 0xb1, 0x82, 0xba, 0x7f, 0xdb,
		0xef, 0x72, 0x57, 0x14, 0x4e, 0xf6, 0x85, 0xdf, 0xe7, 0xb2, 0xfb, 0x81, 0x4f, 0xee, 0x9e, 0x79,
		0xf9, 0x2d, 0x0d, 0xd9, 0x77, 0x8e, 0x5c, 0x96, 0xb7, 0x60, 0x8f, 0xb4, 0x43, 0x75, 0x87, 0xed,
		0xc1, 0xfd, 0x6a, 0x4e, 0x98, 0xb1, 0x29, 0x27, 0x4c, 0x41, 0xa5, 0x89, 0x54, 0x5b, 0x57, 0xc5,
		0xc9, 0x54, 0x9d, 0x4c, 0xe5, 0xe9, 0x54, 0x5f, 0x8d, 0x9f, 0xb2, 0xb3, 0x1f, 0xb2, 0x43, 0x62,
		0x7c, 0xa3, 0xf0, 0xfb, 0x81, 0x60, 0xad, 0xc0, 0xee, 0x11, 0x9c, 0x37, 0x33, 0x91, 0xa5, 0xd8,
		0xda, 0x7a, 0x5b, 0xd2, 0x12, 0x39, 0x6f, 0x69, 0x3a, 0xad, 0x46, 0xbd, 0xe2, 0x6f, 0xce, 0x0c,
		0x19, 0x29, 0x3e, 0xfe, 0xe8, 0x5b, 0xb7, 0xcb, 0x6e, 0x38, 0xf3, 0x79, 0xd7, 0xf2, 0xef, 0xf5,
		0x15, 0x71, 0x56, 0xdc, 0xce, 0x2b, 0x51, 0xdf, 0x71, 0x45, 0x8d, 0x40, 0x85, 0x4c, 0x1c, 0x77,
		0x94, 0x48, 0x94, 0x38, 0x17, 0x2d, 0xe2, 0xb8, 0xa3, 0xad, 0x77, 0x41, 0xc9, 0xc4, 0xe9, 0x46,
		0x9a, 0x11, 0xbd, 0xa6, 0xca, 0xe8, 0x55, 0x74, 0x4c, 0x8f, 0x77, 0xed, 0xa2, 0x8c, 0x69, 0xcd,
		0x9d, 0x12, 0x46, 0x54, 0xc2, 0xa3, 0x63, 0x9a, 0x29, 0xbc, 0xee, 0x65, 0x1e, 0x78, 0xd7, 0x7a,
		0x64, 0x7c, 0xf4, 0xb6, 0x04, 0xc3, 0x9e, 0xca, 0x27, 0x5f, 0xea, 0x9f, 0xd7, 0x0a, 0x5b, 0x1a,
		0x17, 0x3a, 0xd9, 0x4a, 0xad, 0x7a, 0x9f, 0x2d, 0x78, 0x69, 0xf7, 0xb4, 0x5e, 0xda, 0x3d, 0xbc,
		0x34, 0x78, 0x69, 0xf0, 0xd2, 0xe0, 0xa5, 0xc1, 0x4b, 0x83, 0x97, 0x06, 0x2f, 0x0d, 0x5e, 0x1a,
		0xbc, 0x34, 0x02, 0x2f, 0xed, 0xc1, 0x21, 0xf5, 0xd2, 0x26, 0xe2, 0xe0, 0xa5, 0xc1, 0x4b, 0x83,
		0x97, 0x06, 0x2f, 0x0d, 0x5e, 0x1a, 0xbc, 0x34, 0x78, 0x69, 0xf0, 0xd2, 0xe0, 0xa5, 0xe9, 0x78,
		0x69, 0x1e, 0xad, 0x97, 0xe6, 0xc1, 0x4b, 0x83, 0x97, 0x06, 0x2f, 0x0d, 0x5e, 0x1a, 0xbc, 0x34,
		0x78, 0x69, 0xf0, 0xd2, 0xe0, 0xa5, 0xc1, 0x4b, 0x53, 0xbe, 0x43, 0xb6, 0x00, 0x53, 0x71, 0x19,
		0xc1, 0xf8, 0x7e, 0xd9, 0xe5, 0x04, 0xdf, 0xba, 0xdd, 0x43, 0xa5, 0xb2, 0xe4, 0x7d, 0xe9, 0xb5,
		0x05, 0x7f, 0x76, 0xbb, 0xcd, 0xa1, 0x6f, 0x97, 0x92, 0x1d, 0x24, 0xb9, 0xde, 0xae, 0x91, 0x7c,
		0xd3, 0x95, 0xdc, 0x25, 0x54, 0x72, 0xa3, 0x92, 0x3b, 0xe6, 0x63, 0xa2, 0x92, 0x3b, 0x9f, 0x21,
		0x29, 0x2a, 0xb9, 0x55, 0xf3, 0x1a, 0xa8, 0xe4, 0x46, 0x5e, 0x03, 0x79, 0x0d, 0xe4, 0x35, 0x90,
		0xd7, 0x40, 0x5e, 0x03, 0x79, 0x0d, 0xe4, 0x35, 0x90, 0xd7, 0xa0, 0xf1, 0xd2, 0x50, 0xc9, 0x0d,
		0x2f, 0x0d, 0x5e, 0x1a, 0xbc, 0x34, 0x78, 0x69, 0xf0, 0xd2, 0xe0, 0xa5, 0xc1, 0x4b, 0x83, 0x97,
		0x96, 0x42, 0x2f, 0x0d, 0x95, 0xdc, 0xf0, 0xd2, 0xe0, 0xa5, 0xc1, 0x4b, 0x83, 0x97, 0x06, 0x2f,
		0x0d, 0x5e, 0x1a, 0xbc, 0x34, 0x78, 0x69, 0xa9, 0xf4, 0xd2, 0x50, 0xc9, 0x0d, 0x2f, 0x0d, 0x5e,
		0x1a, 0xbc, 0x34, 0x78, 0x69, 0xf0, 0xd2, 0xe0, 0xa5, 0xc1, 0x4b, 0x83, 0x97, 0x96, 0xa4, 0x97,
		0x96, 0xbb, 0x4a, 0x6e, 0x95, 0xaa, 0xe4, 0x7d, 0xa5, 0x42, 0x6e, 0x89, 0x8d, 0xe2, 0xe5, 0x9b,
		0x3b, 0x9b, 0x3b, 0xf3, 0xc7, 0xdf, 0x95, 0x5e, 0xa9, 0xc9, 0xc9, 0x76, 0xe5, 0xdf, 0xd3, 0x68,
		0xd4, 0xd0, 0x36, 0x86, 0x8f, 0x1b, 0x3d, 0xf6, 0x9a, 0x4b, 0xa5, 0xd8, 0xa5, 0xc4, 0x28, 0xa5,
		0x93, 0x32, 0xe5, 0xac, 0xcd, 0xba, 0xf6, 0x90, 0x54, 0x2e, 0x59, 0xa5, 0x8a, 0xa1, 0x50, 0x52,
		0x8a, 0xb4, 0x5a, 0x89, 0x96, 0xab, 0xc6, 0xe2, 0xbf, 0x2c, 0x69, 0x9c, 0xb8, 0x8d, 0x22, 0xd1,
		0x18, 0x2b, 0xda, 0x21, 0xee, 0xfb, 0x2f, 0x7e, 0xf5, 0xf9, 0x17, 0x5b, 0xf0, 0x52, 0x85, 0x07,
		0xee, 0xb6, 0xbc, 0xe5, 0x8a, 0x3c, 0x39, 0x01, 0x6e, 0x70, 0xdd, 0x92, 0x66, 0x59, 0xed, 0xa6,
		0xaf, 0x8d, 0x96, 0xd7, 0x47, 0xc3, 0xf1, 0x4f, 0x41, 0x9a, 0x9c, 0x76, 0xa4, 0xdd, 0x2a, 0x6c,
		0xcd, 0xa9, 0x08, 0x2f, 0x1a, 0x87, 0xad, 0x5c, 0x6d, 0xb4, 0x66, 0x89, 0xcc, 0xfa, 0x36, 0x8a,
		0xb1, 0xe4, 0x65, 0x92, 0x22, 0x99, 0xe8, 0xdb, 0xaa, 0xa6, 0x8a, 0xe9, 0x5a, 0x4a, 0x2f, 0x55,
		0x91, 0x76, 0x06, 0x67, 0x1c, 0xbd, 0xe9, 0x87, 0x27, 0x1a, 0xb6, 0xeb, 0x96, 0x8c, 0x0c, 0xcf,
		0xaf, 0x60, 0xf7, 0x11, 0x03, 0xd6, 0xb4, 0xc6, 0xec, 0x99, 0x17, 0xd1, 0x3d, 0xeb, 0xd0, 0x12,
		0x2b, 0x8a, 0x8d, 0x9d, 0x54, 0x8a, 0x9f, 0x3c, 0x92, 0x3f, 0x3c, 0x6c, 0xcd, 0xf0, 0x89, 0x61,
		0x4f, 0x5f, 0xaf, 0x6d, 0xe5, 0x87, 0x61, 0x14, 0x2e, 0xd7, 0xce, 0x83, 0xbb, 0xd0, 0xd2, 0x8a,
		0x43, 0x60, 0xe8, 0xde, 0xac, 0x55, 0xda, 0x78, 0xce, 0x8d, 0x94, 0x53, 0x23, 0xe5, 0xcc, 0xc4,
		0x73, 0x62, 0x36, 0xc2, 0xe7, 0x38, 0x66, 0x3d, 0x26, 0xa7, 0xff, 0x88, 0x44, 0xad, 0x5a, 0x23,
		0xba, 0x00, 0x4c, 0x7b, 0x2b, 0xde, 0x78, 0xd4, 0x9f, 0x77, 0x5e, 0x20, 0x16, 0xb8, 0xac, 0xab,
		0x7b, 0x31, 0x56, 0xef, 0xc5, 0xea, 0xb5, 0xd5, 0xbd, 0xf5, 0xf2, 0x99, 0xd7, 0xf4, 0x4e, 0xac,
		0x5e, 0x59, 0xd0, 0x0f, 0xeb, 0xdb, 0x7f, 0xb6, 0xc9, 0x27, 0x0d, 0x3b, 0xf5, 0x80, 0x85, 0xe1,
		0x27, 0x0c, 0xa5, 0xcc, 0x3e, 0xdd, 0x64, 0xcd, 0xe8, 0xd4, 0x45, 0x2f, 0x3b, 0x64, 0xa1, 0xe9,
		0x59, 0x6a, 0x6a, 0x96, 0x9b, 0x96, 0xf5, 0xa6, 0x64, 0x89, 0xe9, 0x58, 0xfc, 0x5e, 0x4b, 0x3c,
		0xbc, 0xd5, 0x9e, 0xdd, 0x12, 0x6f, 0x65, 0xf9, 0xdb, 0xac, 0xf0, 0x4e, 0x62, 0x7a, 0x25, 0xeb,
		0xbc, 0x91, 0xd8, 0x5e, 0x48, 0x6c, 0xef, 0x23, 0xbe, 0xd7, 0xb1, 0x7a, 0x28, 0x2e, 0xf3, 0x2e,
		0x46, 0x7e, 0xe1, 0x42, 0x95, 0x5a, 0xe6, 0x44, 0xae, 0x88, 0x3f, 0xb3, 0xed, 0x66, 0xc7, 0xb1,
		0x66, 0xcb, 0xdb, 0x20, 0x77, 0x06, 0x6d, 0x69, 0x40, 0xb5, 0xdc, 0x9a, 0x0d, 0x20, 0x52, 0x88,
		0x3d, 0xe6, 0x97, 0xc5, 0x2f, 0xb1, 0xe2, 0x16, 0x58, 0x00, 0x0a, 0x0b, 0x10, 0x23, 0xae, 0x88,
		0x1f, 0x4f, 0xe4, 0x2e, 0xcc, 0x8e, 0x15, 0x0f, 0xc8, 0xc4, 0x01, 0xf9, 0xb7, 0x90, 0x4b, 0x95,
		0x24, 0xa7, 0x06, 0x72, 0xb9, 0xf7, 0xbd, 0xce, 0x4e, 0x2e, 0x72, 0xb6, 0xa7, 0xac, 0xe5, 0xde,
		0xd4, 0xe3, 0x2e, 0x7b, 0xcc, 0x82, 0x13, 0xbc, 0xb7, 0xee, 0xf9, 0x85, 0xe7, 0xcd, 0x9b, 0x91,
		0x97, 0x8f, 0x5e, 0x98, 0xfe, 0xd3, 0xcc, 0x93, 0x9d, 0x4f, 0x99, 0x94, 0xe7, 0xbd, 0xe7, 0xff,
		0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x67, 0x90, 0x27, 0xb3, 0xbf, 0x27,
		0x06, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/office-ap/radios/radio/config/operating-frequency": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/office-ap/radios/radio/state/channel-change-reason": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_CHANGE_REASON_TYPE)(0)),
	},
	"/office-ap/radios/radio/state/operating-frequency": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/office-ap/ssids/ssid/clients/client/client-capabilities/state/client-capabilities": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_CLIENT_CAPABILITIES)(0)),
	},
	"/office-ap/ssids/ssid/clients/client/client-connection/state/client-state": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_CLIENT_STATE)(0)),
	},
	"/office-ap/ssids/ssid/clients/client/client-rf/state/connection-mode": []reflect.Type{
		reflect.TypeOf((E_WifiOffice_OfficeAp_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode)(0)),
	},
	"/office-ap/ssids/ssid/config/basic-data-rates": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/office-ap/ssids/ssid/config/operating-frequency": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/office-ap/ssids/ssid/config/opmode": []reflect.Type{
		reflect.TypeOf((E_WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode)(0)),
	},
	"/office-ap/ssids/ssid/config/supported-data-rates": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/office-ap/ssids/ssid/dot11r/config/dot11r-method": []reflect.Type{
		reflect.TypeOf((E_WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod)(0)),
	},
	"/office-ap/ssids/ssid/dot11r/state/dot11r-method": []reflect.Type{
		reflect.TypeOf((E_WifiOffice_OfficeAp_Ssids_Ssid_Dot11R_Config_Dot11RMethod)(0)),
	},
	"/office-ap/ssids/ssid/state/basic-data-rates": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/office-ap/ssids/ssid/state/operating-frequency": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/office-ap/ssids/ssid/state/opmode": []reflect.Type{
		reflect.TypeOf((E_WifiOffice_OfficeAp_Ssids_Ssid_Config_Opmode)(0)),
	},
	"/office-ap/ssids/ssid/state/supported-data-rates": []reflect.Type{
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
}

