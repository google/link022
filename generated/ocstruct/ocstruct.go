/*
Package ocstruct is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /openconfig/ygot/ygen/commongen.go
using the following YANG input files:
	- /openconfig/public/release/models/wifi/access-points/openconfig-access-points.yang
	- ../models/gasket.yang
Imported modules were sourced from:
	- /openconfig/public/release/models/...
	- /openconfig/yang/standard/ietf/RFC/...
	- ../models/gasket.yang/...
*/
package ocstruct

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled.
func Unmarshal(data []byte, destStruct ygot.GoStruct) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree)
}

// Device represents the /device YANG schema element.
type Device struct {
	AccessPoints *OpenconfigAccessPoints_AccessPoints `path:"access-points" module:"openconfig-access-points"`
	Gasket       *OpenconfigGasket_Gasket             `path:"gasket" module:"openconfig-gasket"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigAccessPoints_AccessPoints represents the /openconfig-access-points/access-points YANG schema element.
type OpenconfigAccessPoints_AccessPoints struct {
	AccessPoint map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint `path:"access-point" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints) IsYANGGoStruct() {}

// NewAccessPoint creates a new entry in the AccessPoint list of the
// OpenconfigAccessPoints_AccessPoints struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints) NewAccessPoint(Hostname string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AccessPoint == nil {
		t.AccessPoint = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint)
	}

	key := Hostname

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AccessPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AccessPoint", key)
	}

	t.AccessPoint[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint{
		Hostname: &Hostname,
	}

	return t.AccessPoint[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint represents the /openconfig-access-points/access-points/access-point YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint struct {
	AssignedApManagers *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers `path:"assigned-ap-managers" module:"openconfig-access-points"`
	Bssids             *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids             `path:"bssids" module:"openconfig-access-points"`
	Hostname           *string                                                             `path:"hostname" module:"openconfig-access-points"`
	Radios             *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios             `path:"radios" module:"openconfig-access-points"`
	Ssids              *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids              `path:"ssids" module:"openconfig-access-points"`
	System             *OpenconfigAccessPoints_AccessPoints_AccessPoint_System             `path:"system" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Hostname == nil {
		return nil, fmt.Errorf("nil value for key Hostname")
	}

	return map[string]interface{}{
		"hostname": *t.Hostname,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers represents the /openconfig-access-points/access-points/access-point/assigned-ap-managers YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers struct {
	ApManager map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager `path:"ap-manager" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers) IsYANGGoStruct() {}

// NewApManager creates a new entry in the ApManager list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers) NewApManager(Id string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ApManager == nil {
		t.ApManager = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ApManager[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ApManager", key)
	}

	t.ApManager[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager{
		Id: &Id,
	}

	return t.ApManager[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager represents the /openconfig-access-points/access-points/access-point/assigned-ap-managers/ap-manager YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager struct {
	Config *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config `path:"config" module:"openconfig-access-points"`
	Id     *string                                                                              `path:"id" module:"openconfig-access-points"`
	State  *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config represents the /openconfig-access-points/access-points/access-point/assigned-ap-managers/ap-manager/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config struct {
	ApManagerIpv4Address *string  `path:"ap-manager-ipv4-address" module:"openconfig-access-points"`
	ApManagerIpv6Address []string `path:"ap-manager-ipv6-address" module:"openconfig-access-points"`
	Fqdn                 *string  `path:"fqdn" module:"openconfig-access-points"`
	Id                   *string  `path:"id" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_State represents the /openconfig-access-points/access-points/access-point/assigned-ap-managers/ap-manager/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_State struct {
	ApManagerIpv4Address *string  `path:"ap-manager-ipv4-address" module:"openconfig-access-points"`
	ApManagerIpv6Address []string `path:"ap-manager-ipv6-address" module:"openconfig-access-points"`
	Fqdn                 *string  `path:"fqdn" module:"openconfig-access-points"`
	Id                   *string  `path:"id" module:"openconfig-access-points"`
	Joined               *bool    `path:"joined" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_AssignedApManagers_ApManager_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids represents the /openconfig-access-points/access-points/access-point/bssids YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids struct {
	Bssid map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid `path:"bssid" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids) IsYANGGoStruct() {}

// NewBssid creates a new entry in the Bssid list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids) NewBssid(Bssid string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Bssid == nil {
		t.Bssid = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid)
	}

	key := Bssid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Bssid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Bssid", key)
	}

	t.Bssid[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid{
		Bssid: &Bssid,
	}

	return t.Bssid[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid represents the /openconfig-access-points/access-points/access-point/bssids/bssid YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid struct {
	Bssid *string                                                             `path:"bssid" module:"openconfig-access-points"`
	State *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Bssid == nil {
		return nil, fmt.Errorf("nil value for key Bssid")
	}

	return map[string]interface{}{
		"bssid": *t.Bssid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State represents the /openconfig-access-points/access-points/access-point/bssids/bssid/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State struct {
	Bssid                *string                                                                      `path:"bssid" module:"openconfig-access-points"`
	Counters             *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters `path:"counters" module:"openconfig-access-points"`
	Ess                  *string                                                                      `path:"ess" module:"openconfig-access-points"`
	NumAssociatedClients *uint8                                                                       `path:"num-associated-clients" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters represents the /openconfig-access-points/access-points/access-point/bssids/bssid/state/counters YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters struct {
	RxBytesData       *uint64                                                                                 `path:"rx-bytes-data" module:"openconfig-access-points"`
	RxControl         *uint64                                                                                 `path:"rx-control" module:"openconfig-access-points"`
	RxDataDist        *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxDataDist `path:"rx-data-dist" module:"openconfig-access-points"`
	RxDataWmm         *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxDataWmm  `path:"rx-data-wmm" module:"openconfig-access-points"`
	RxMcs             *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxMcs      `path:"rx-mcs" module:"openconfig-access-points"`
	RxMgmt            *uint64                                                                                 `path:"rx-mgmt" module:"openconfig-access-points"`
	RxRetries         *uint64                                                                                 `path:"rx-retries" module:"openconfig-access-points"`
	RxRetriesData     *uint64                                                                                 `path:"rx-retries-data" module:"openconfig-access-points"`
	RxRetriesSubframe *uint64                                                                                 `path:"rx-retries-subframe" module:"openconfig-access-points"`
	TxBytesData       *uint64                                                                                 `path:"tx-bytes-data" module:"openconfig-access-points"`
	TxControl         *uint64                                                                                 `path:"tx-control" module:"openconfig-access-points"`
	TxDataDist        *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxDataDist `path:"tx-data-dist" module:"openconfig-access-points"`
	TxDataWmm         *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxDataWmm  `path:"tx-data-wmm" module:"openconfig-access-points"`
	TxMcs             *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxMcs      `path:"tx-mcs" module:"openconfig-access-points"`
	TxMgmt            *uint64                                                                                 `path:"tx-mgmt" module:"openconfig-access-points"`
	TxRetries         *uint64                                                                                 `path:"tx-retries" module:"openconfig-access-points"`
	TxRetriesData     *uint64                                                                                 `path:"tx-retries-data" module:"openconfig-access-points"`
	TxRetriesSubframe *uint64                                                                                 `path:"tx-retries-subframe" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxDataDist represents the /openconfig-access-points/access-points/access-point/bssids/bssid/state/counters/rx-data-dist YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxDataDist struct {
	Rx_0_64           *uint64 `path:"rx-0-64" module:"openconfig-access-points"`
	Rx_1025_2048      *uint64 `path:"rx-1025-2048" module:"openconfig-access-points"`
	Rx_129_256        *uint64 `path:"rx-129-256" module:"openconfig-access-points"`
	Rx_131073_262144  *uint64 `path:"rx-131073-262144" module:"openconfig-access-points"`
	Rx_16385_32768    *uint64 `path:"rx-16385-32768" module:"openconfig-access-points"`
	Rx_2049_4096      *uint64 `path:"rx-2049-4096" module:"openconfig-access-points"`
	Rx_257_512        *uint64 `path:"rx-257-512" module:"openconfig-access-points"`
	Rx_262145_524288  *uint64 `path:"rx-262145-524288" module:"openconfig-access-points"`
	Rx_32769_65536    *uint64 `path:"rx-32769-65536" module:"openconfig-access-points"`
	Rx_4097_8192      *uint64 `path:"rx-4097-8192" module:"openconfig-access-points"`
	Rx_513_1024       *uint64 `path:"rx-513-1024" module:"openconfig-access-points"`
	Rx_524289_1048576 *uint64 `path:"rx-524289-1048576" module:"openconfig-access-points"`
	Rx_65_128         *uint64 `path:"rx-65-128" module:"openconfig-access-points"`
	Rx_65537_131072   *uint64 `path:"rx-65537-131072" module:"openconfig-access-points"`
	Rx_8193_16384     *uint64 `path:"rx-8193-16384" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxDataDist implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxDataDist) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxDataDist) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxDataDist"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxDataDist) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxDataWmm represents the /openconfig-access-points/access-points/access-point/bssids/bssid/state/counters/rx-data-wmm YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxDataWmm struct {
	Be *uint64 `path:"be" module:"openconfig-access-points"`
	Bk *uint64 `path:"bk" module:"openconfig-access-points"`
	Vi *uint64 `path:"vi" module:"openconfig-access-points"`
	Vo *uint64 `path:"vo" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxDataWmm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxDataWmm) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxDataWmm) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxDataWmm"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxDataWmm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxMcs represents the /openconfig-access-points/access-points/access-point/bssids/bssid/state/counters/rx-mcs YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxMcs struct {
	Mcs0 *uint64 `path:"mcs0" module:"openconfig-access-points"`
	Mcs1 *uint64 `path:"mcs1" module:"openconfig-access-points"`
	Mcs2 *uint64 `path:"mcs2" module:"openconfig-access-points"`
	Mcs3 *uint64 `path:"mcs3" module:"openconfig-access-points"`
	Mcs4 *uint64 `path:"mcs4" module:"openconfig-access-points"`
	Mcs5 *uint64 `path:"mcs5" module:"openconfig-access-points"`
	Mcs6 *uint64 `path:"mcs6" module:"openconfig-access-points"`
	Mcs7 *uint64 `path:"mcs7" module:"openconfig-access-points"`
	Mcs8 *uint64 `path:"mcs8" module:"openconfig-access-points"`
	Mcs9 *uint64 `path:"mcs9" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxMcs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxMcs) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxMcs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxMcs"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_RxMcs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxDataDist represents the /openconfig-access-points/access-points/access-point/bssids/bssid/state/counters/tx-data-dist YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxDataDist struct {
	Tx_0_64           *uint64 `path:"tx-0-64" module:"openconfig-access-points"`
	Tx_1025_2048      *uint64 `path:"tx-1025-2048" module:"openconfig-access-points"`
	Tx_129_256        *uint64 `path:"tx-129-256" module:"openconfig-access-points"`
	Tx_131073_262144  *uint64 `path:"tx-131073-262144" module:"openconfig-access-points"`
	Tx_16385_32768    *uint64 `path:"tx-16385-32768" module:"openconfig-access-points"`
	Tx_2049_4096      *uint64 `path:"tx-2049-4096" module:"openconfig-access-points"`
	Tx_257_512        *uint64 `path:"tx-257-512" module:"openconfig-access-points"`
	Tx_262145_524288  *uint64 `path:"tx-262145-524288" module:"openconfig-access-points"`
	Tx_32769_65536    *uint64 `path:"tx-32769-65536" module:"openconfig-access-points"`
	Tx_4097_8192      *uint64 `path:"tx-4097-8192" module:"openconfig-access-points"`
	Tx_513_1024       *uint64 `path:"tx-513-1024" module:"openconfig-access-points"`
	Tx_524289_1048576 *uint64 `path:"tx-524289-1048576" module:"openconfig-access-points"`
	Tx_65_128         *uint64 `path:"tx-65-128" module:"openconfig-access-points"`
	Tx_65537_131072   *uint64 `path:"tx-65537-131072" module:"openconfig-access-points"`
	Tx_8193_16384     *uint64 `path:"tx-8193-16384" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxDataDist implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxDataDist) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxDataDist) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxDataDist"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxDataDist) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxDataWmm represents the /openconfig-access-points/access-points/access-point/bssids/bssid/state/counters/tx-data-wmm YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxDataWmm struct {
	Be *uint64 `path:"be" module:"openconfig-access-points"`
	Bk *uint64 `path:"bk" module:"openconfig-access-points"`
	Vi *uint64 `path:"vi" module:"openconfig-access-points"`
	Vo *uint64 `path:"vo" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxDataWmm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxDataWmm) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxDataWmm) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxDataWmm"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxDataWmm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxMcs represents the /openconfig-access-points/access-points/access-point/bssids/bssid/state/counters/tx-mcs YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxMcs struct {
	Mcs0 *uint64 `path:"mcs0" module:"openconfig-access-points"`
	Mcs1 *uint64 `path:"mcs1" module:"openconfig-access-points"`
	Mcs2 *uint64 `path:"mcs2" module:"openconfig-access-points"`
	Mcs3 *uint64 `path:"mcs3" module:"openconfig-access-points"`
	Mcs4 *uint64 `path:"mcs4" module:"openconfig-access-points"`
	Mcs5 *uint64 `path:"mcs5" module:"openconfig-access-points"`
	Mcs6 *uint64 `path:"mcs6" module:"openconfig-access-points"`
	Mcs7 *uint64 `path:"mcs7" module:"openconfig-access-points"`
	Mcs8 *uint64 `path:"mcs8" module:"openconfig-access-points"`
	Mcs9 *uint64 `path:"mcs9" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxMcs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxMcs) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxMcs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxMcs"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Bssids_Bssid_State_Counters_TxMcs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios represents the /openconfig-access-points/access-points/access-point/radios YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios struct {
	Radio map[uint8]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio `path:"radio" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios) IsYANGGoStruct() {}

// NewRadio creates a new entry in the Radio list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios) NewRadio(Id uint8) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Radio == nil {
		t.Radio = make(map[uint8]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Radio[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Radio", key)
	}

	t.Radio[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio{
		Id: &Id,
	}

	return t.Radio[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio represents the /openconfig-access-points/access-points/access-point/radios/radio YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio struct {
	Config    *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Config    `path:"config" module:"openconfig-access-points"`
	Id        *uint8                                                                  `path:"id" module:"openconfig-access-points"`
	Neighbors *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors `path:"neighbors" module:"openconfig-access-points"`
	State     *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State     `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Config represents the /openconfig-access-points/access-points/access-point/radios/radio/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Config struct {
	AllowedChannels      []uint8                                   `path:"allowed-channels" module:"openconfig-access-points"`
	AntennaGain          *int8                                     `path:"antenna-gain" module:"openconfig-access-points"`
	Channel              *uint8                                    `path:"channel" module:"openconfig-access-points"`
	ChannelWidth         *uint8                                    `path:"channel-width" module:"openconfig-access-points"`
	Dca                  *bool                                     `path:"dca" module:"openconfig-access-points"`
	Dtp                  *bool                                     `path:"dtp" module:"openconfig-access-points"`
	DtpMax               *uint8                                    `path:"dtp-max" module:"openconfig-access-points"`
	DtpMin               *uint8                                    `path:"dtp-min" module:"openconfig-access-points"`
	Enabled              *bool                                     `path:"enabled" module:"openconfig-access-points"`
	Id                   *uint8                                    `path:"id" module:"openconfig-access-points"`
	OperatingFrequency   E_OpenconfigWifiTypes_OPERATING_FREQUENCY `path:"operating-frequency" module:"openconfig-access-points"`
	Scanning             *bool                                     `path:"scanning" module:"openconfig-access-points"`
	ScanningDeferClients *uint8                                    `path:"scanning-defer-clients" module:"openconfig-access-points"`
	ScanningDeferTraffic *bool                                     `path:"scanning-defer-traffic" module:"openconfig-access-points"`
	ScanningDwellTime    *uint16                                   `path:"scanning-dwell-time" module:"openconfig-access-points"`
	ScanningInterval     *uint8                                    `path:"scanning-interval" module:"openconfig-access-points"`
	TransmitPower        *uint8                                    `path:"transmit-power" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors represents the /openconfig-access-points/access-points/access-point/radios/radio/neighbors YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors struct {
	Neighbor map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor `path:"neighbor" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors) NewNeighbor(Bssid string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor)
	}

	key := Bssid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor{
		Bssid: &Bssid,
	}

	return t.Neighbor[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor represents the /openconfig-access-points/access-points/access-point/radios/radio/neighbors/neighbor YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor struct {
	Bssid *string                                                                                `path:"bssid" module:"openconfig-access-points"`
	State *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Bssid == nil {
		return nil, fmt.Errorf("nil value for key Bssid")
	}

	return map[string]interface{}{
		"bssid": *t.Bssid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State represents the /openconfig-access-points/access-points/access-point/radios/radio/neighbors/neighbor/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State struct {
	Bssid          *string `path:"bssid" module:"openconfig-access-points"`
	Channel        *uint16 `path:"channel" module:"openconfig-access-points"`
	LastSeen       *uint64 `path:"last-seen" module:"openconfig-access-points"`
	PrimaryChannel *uint16 `path:"primary-channel" module:"openconfig-access-points"`
	Rssi           *int8   `path:"rssi" module:"openconfig-access-points"`
	Ssid           *string `path:"ssid" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_Neighbors_Neighbor_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State represents the /openconfig-access-points/access-points/access-point/radios/radio/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State struct {
	AllowedChannels           []uint8                                                                      `path:"allowed-channels" module:"openconfig-access-points"`
	AntennaGain               *int8                                                                        `path:"antenna-gain" module:"openconfig-access-points"`
	BaseRadioMac              *string                                                                      `path:"base-radio-mac" module:"openconfig-access-points"`
	Channel                   *uint8                                                                       `path:"channel" module:"openconfig-access-points"`
	ChannelChangeReason       E_OpenconfigWifiTypes_CHANGE_REASON_TYPE                                     `path:"channel-change-reason" module:"openconfig-access-points"`
	ChannelWidth              *uint8                                                                       `path:"channel-width" module:"openconfig-access-points"`
	Counters                  *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State_Counters `path:"counters" module:"openconfig-access-points"`
	Dca                       *bool                                                                        `path:"dca" module:"openconfig-access-points"`
	DfsHitTime                *uint64                                                                      `path:"dfs-hit-time" module:"openconfig-access-points"`
	Dtp                       *bool                                                                        `path:"dtp" module:"openconfig-access-points"`
	DtpMax                    *uint8                                                                       `path:"dtp-max" module:"openconfig-access-points"`
	DtpMin                    *uint8                                                                       `path:"dtp-min" module:"openconfig-access-points"`
	Enabled                   *bool                                                                        `path:"enabled" module:"openconfig-access-points"`
	Id                        *uint8                                                                       `path:"id" module:"openconfig-access-points"`
	OperatingFrequency        E_OpenconfigWifiTypes_OPERATING_FREQUENCY                                    `path:"operating-frequency" module:"openconfig-access-points"`
	RxDot11ChannelUtilization *uint8                                                                       `path:"rx-dot11-channel-utilization" module:"openconfig-access-points"`
	RxNoiseChannelUtilization *uint8                                                                       `path:"rx-noise-channel-utilization" module:"openconfig-access-points"`
	Scanning                  *bool                                                                        `path:"scanning" module:"openconfig-access-points"`
	ScanningDeferClients      *uint8                                                                       `path:"scanning-defer-clients" module:"openconfig-access-points"`
	ScanningDeferTraffic      *bool                                                                        `path:"scanning-defer-traffic" module:"openconfig-access-points"`
	ScanningDwellTime         *uint16                                                                      `path:"scanning-dwell-time" module:"openconfig-access-points"`
	ScanningInterval          *uint8                                                                       `path:"scanning-interval" module:"openconfig-access-points"`
	TotalChannelUtilization   *uint8                                                                       `path:"total-channel-utilization" module:"openconfig-access-points"`
	TransmitPower             *uint8                                                                       `path:"transmit-power" module:"openconfig-access-points"`
	TxDot11ChannelUtilization *uint8                                                                       `path:"tx-dot11-channel-utilization" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State_Counters represents the /openconfig-access-points/access-points/access-point/radios/radio/state/counters YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State_Counters struct {
	FailedFcsFrames *uint64 `path:"failed-fcs-frames" module:"openconfig-access-points"`
	NoiseFloor      *int8   `path:"noise-floor" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State_Counters) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State_Counters"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Radios_Radio_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids represents the /openconfig-access-points/access-points/access-point/ssids YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids struct {
	Ssid map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid `path:"ssid" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids) IsYANGGoStruct() {}

// NewSsid creates a new entry in the Ssid list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids) NewSsid(Name string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ssid == nil {
		t.Ssid = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ssid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ssid", key)
	}

	t.Ssid[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid{
		Name: &Name,
	}

	return t.Ssid[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid represents the /openconfig-access-points/access-points/access-point/ssids/ssid YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid struct {
	BandSteering *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering `path:"band-steering" module:"openconfig-access-points"`
	Clients      *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients      `path:"clients" module:"openconfig-access-points"`
	Config       *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config       `path:"config" module:"openconfig-access-points"`
	Dot11R       *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R       `path:"dot11r" module:"openconfig-access-points"`
	Dot11V       *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V       `path:"dot11v" module:"openconfig-access-points"`
	Dot1XTimers  *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers  `path:"dot1x-timers" module:"openconfig-access-points"`
	Name         *string                                                                  `path:"name" module:"openconfig-access-points"`
	State        *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_State        `path:"state" module:"openconfig-access-points"`
	Wmm          *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm          `path:"wmm" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering represents the /openconfig-access-points/access-points/access-point/ssids/ssid/band-steering YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering struct {
	Config *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config `path:"config" module:"openconfig-access-points"`
	State  *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config represents the /openconfig-access-points/access-points/access-point/ssids/ssid/band-steering/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config struct {
	BandSteering *bool `path:"band-steering" module:"openconfig-access-points"`
	SteeringRssi *int8 `path:"steering-rssi" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/band-steering/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State struct {
	BandSteering *bool `path:"band-steering" module:"openconfig-access-points"`
	SteeringRssi *int8 `path:"steering-rssi" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_BandSteering_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients struct {
	Client map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client `path:"client" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients) IsYANGGoStruct() {}

// NewClient creates a new entry in the Client list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients) NewClient(Mac string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Client == nil {
		t.Client = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client)
	}

	key := Mac

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Client[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Client", key)
	}

	t.Client[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client{
		Mac: &Mac,
	}

	return t.Client[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client struct {
	ClientCapabilities *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities `path:"client-capabilities" module:"openconfig-access-points"`
	ClientConnection   *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection   `path:"client-connection" module:"openconfig-access-points"`
	ClientRf           *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf           `path:"client-rf" module:"openconfig-access-points"`
	Dot11KNeighbors    *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors    `path:"dot11k-neighbors" module:"openconfig-access-points"`
	Mac                *string                                                                                       `path:"mac" module:"openconfig-access-points"`
	State              *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State              `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Mac == nil {
		return nil, fmt.Errorf("nil value for key Mac")
	}

	return map[string]interface{}{
		"mac": *t.Mac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/client-capabilities YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities struct {
	State *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/client-capabilities/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State struct {
	ChannelSupport     []uint8                                     `path:"channel-support" module:"openconfig-access-points"`
	ClientCapabilities []E_OpenconfigWifiTypes_CLIENT_CAPABILITIES `path:"client-capabilities" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientCapabilities_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/client-connection YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection struct {
	State *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/client-connection/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State struct {
	ClientState     E_OpenconfigWifiTypes_CLIENT_STATE `path:"client-state" module:"openconfig-access-points"`
	ConnectionTime  *uint16                            `path:"connection-time" module:"openconfig-access-points"`
	Hostname        *string                            `path:"hostname" module:"openconfig-access-points"`
	Ipv4Address     *string                            `path:"ipv4-address" module:"openconfig-access-points"`
	Ipv6Address     *string                            `path:"ipv6-address" module:"openconfig-access-points"`
	OperatingSystem *string                            `path:"operating-system" module:"openconfig-access-points"`
	Username        *string                            `path:"username" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientConnection_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/client-rf YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf struct {
	State *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/client-rf/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State struct {
	ConnectionMode E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode `path:"connection-mode" module:"openconfig-access-points"`
	Frequency      *uint8                                                                                                    `path:"frequency" module:"openconfig-access-points"`
	PhyRate        *uint16                                                                                                   `path:"phy-rate" module:"openconfig-access-points"`
	Rssi           *int8                                                                                                     `path:"rssi" module:"openconfig-access-points"`
	Snr            *uint8                                                                                                    `path:"snr" module:"openconfig-access-points"`
	Ss             *uint8                                                                                                    `path:"ss" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/dot11k-neighbors YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors struct {
	State *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/dot11k-neighbors/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State struct {
	ChannelLoadReport *uint8  `path:"channel-load-report" module:"openconfig-access-points"`
	NeighborAntenna   *uint8  `path:"neighbor-antenna" module:"openconfig-access-points"`
	NeighborBssid     *string `path:"neighbor-bssid" module:"openconfig-access-points"`
	NeighborChannel   *uint8  `path:"neighbor-channel" module:"openconfig-access-points"`
	NeighborRssi      *int8   `path:"neighbor-rssi" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_Dot11KNeighbors_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State struct {
	Counters *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters `path:"counters" module:"openconfig-access-points"`
	Mac      *string                                                                                   `path:"mac" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters represents the /openconfig-access-points/access-points/access-point/ssids/ssid/clients/client/state/counters YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters struct {
	RxBytes   *uint64 `path:"rx-bytes" module:"openconfig-access-points"`
	RxRetries *uint64 `path:"rx-retries" module:"openconfig-access-points"`
	TxBytes   *uint64 `path:"tx-bytes" module:"openconfig-access-points"`
	TxRetries *uint64 `path:"tx-retries" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config represents the /openconfig-access-points/access-points/access-point/ssids/ssid/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config struct {
	AdvertiseApname    *bool                                                                      `path:"advertise-apname" module:"openconfig-access-points"`
	BasicDataRates     []E_OpenconfigWifiTypes_DATA_RATE                                          `path:"basic-data-rates" module:"openconfig-access-points"`
	BroadcastFilter    *bool                                                                      `path:"broadcast-filter" module:"openconfig-access-points"`
	Csa                *bool                                                                      `path:"csa" module:"openconfig-access-points"`
	DhcpRequired       *bool                                                                      `path:"dhcp-required" module:"openconfig-access-points"`
	Dot11K             *bool                                                                      `path:"dot11k" module:"openconfig-access-points"`
	Dva                *bool                                                                      `path:"dva" module:"openconfig-access-points"`
	Enabled            *bool                                                                      `path:"enabled" module:"openconfig-access-points"`
	GtkTimeout         *uint16                                                                    `path:"gtk-timeout" module:"openconfig-access-points"`
	Hidden             *bool                                                                      `path:"hidden" module:"openconfig-access-points"`
	Ipv6NdpFilter      *bool                                                                      `path:"ipv6-ndp-filter" module:"openconfig-access-points"`
	Ipv6NdpFilterTimer *uint16                                                                    `path:"ipv6-ndp-filter-timer" module:"openconfig-access-points"`
	MobilityDomain     *string                                                                    `path:"mobility-domain" module:"openconfig-access-points"`
	MulticastFilter    *bool                                                                      `path:"multicast-filter" module:"openconfig-access-points"`
	Name               *string                                                                    `path:"name" module:"openconfig-access-points"`
	Okc                *bool                                                                      `path:"okc" module:"openconfig-access-points"`
	OperatingFrequency E_OpenconfigWifiTypes_OPERATING_FREQUENCY                                  `path:"operating-frequency" module:"openconfig-access-points"`
	Opmode             E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode `path:"opmode" module:"openconfig-access-points"`
	PtkTimeout         *uint16                                                                    `path:"ptk-timeout" module:"openconfig-access-points"`
	QbssLoad           *bool                                                                      `path:"qbss-load" module:"openconfig-access-points"`
	ServerGroup        *string                                                                    `path:"server-group" module:"openconfig-access-points"`
	StationIsolation   *bool                                                                      `path:"station-isolation" module:"openconfig-access-points"`
	SupportedDataRates []E_OpenconfigWifiTypes_DATA_RATE                                          `path:"supported-data-rates" module:"openconfig-access-points"`
	VlanId             *uint16                                                                    `path:"vlan-id" module:"openconfig-access-points"`
	Wpa2Psk            *string                                                                    `path:"wpa2-psk" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot11r YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R struct {
	Config *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config `path:"config" module:"openconfig-access-points"`
	State  *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot11r/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config struct {
	Dot11R             *bool                                                                                   `path:"dot11r" module:"openconfig-access-points"`
	Dot11RDomainid     *uint16                                                                                 `path:"dot11r-domainid" module:"openconfig-access-points"`
	Dot11RMethod       E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod `path:"dot11r-method" module:"openconfig-access-points"`
	Dot11RR1KeyTimeout *uint16                                                                                 `path:"dot11r-r1key-timeout" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot11r/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State struct {
	Dot11R             *bool                                                                                   `path:"dot11r" module:"openconfig-access-points"`
	Dot11RDomainid     *uint16                                                                                 `path:"dot11r-domainid" module:"openconfig-access-points"`
	Dot11RMethod       E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod `path:"dot11r-method" module:"openconfig-access-points"`
	Dot11RR1KeyTimeout *uint16                                                                                 `path:"dot11r-r1key-timeout" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot11v YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V struct {
	Config *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config `path:"config" module:"openconfig-access-points"`
	State  *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot11v/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config struct {
	Dot11VBssidle        *bool   `path:"dot11v-bssidle" module:"openconfig-access-points"`
	Dot11VBssidleTimeout *uint16 `path:"dot11v-bssidle-timeout" module:"openconfig-access-points"`
	Dot11VBsstransition  *bool   `path:"dot11v-bsstransition" module:"openconfig-access-points"`
	Dot11VDms            *bool   `path:"dot11v-dms" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot11v/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State struct {
	Dot11VBssidle        *bool   `path:"dot11v-bssidle" module:"openconfig-access-points"`
	Dot11VBssidleTimeout *uint16 `path:"dot11v-bssidle-timeout" module:"openconfig-access-points"`
	Dot11VBsstransition  *bool   `path:"dot11v-bsstransition" module:"openconfig-access-points"`
	Dot11VDms            *bool   `path:"dot11v-dms" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11V_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot1x-timers YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers struct {
	Config *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config `path:"config" module:"openconfig-access-points"`
	State  *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot1x-timers/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config struct {
	BlacklistTime   *uint16 `path:"blacklist-time" module:"openconfig-access-points"`
	MaxAuthFailures *uint8  `path:"max-auth-failures" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/dot1x-timers/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State struct {
	BlacklistTime   *uint16 `path:"blacklist-time" module:"openconfig-access-points"`
	MaxAuthFailures *uint8  `path:"max-auth-failures" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot1XTimers_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_State struct {
	AdvertiseApname              *bool                                                                      `path:"advertise-apname" module:"openconfig-access-points"`
	BasicDataRates               []E_OpenconfigWifiTypes_DATA_RATE                                          `path:"basic-data-rates" module:"openconfig-access-points"`
	BroadcastFilter              *bool                                                                      `path:"broadcast-filter" module:"openconfig-access-points"`
	BssChannelUtilization        *uint8                                                                     `path:"bss-channel-utilization" module:"openconfig-access-points"`
	Bssid                        *string                                                                    `path:"bssid" module:"openconfig-access-points"`
	Csa                          *bool                                                                      `path:"csa" module:"openconfig-access-points"`
	DhcpRequired                 *bool                                                                      `path:"dhcp-required" module:"openconfig-access-points"`
	Dot11K                       *bool                                                                      `path:"dot11k" module:"openconfig-access-points"`
	Dva                          *bool                                                                      `path:"dva" module:"openconfig-access-points"`
	Enabled                      *bool                                                                      `path:"enabled" module:"openconfig-access-points"`
	GtkTimeout                   *uint16                                                                    `path:"gtk-timeout" module:"openconfig-access-points"`
	Hidden                       *bool                                                                      `path:"hidden" module:"openconfig-access-points"`
	Ipv6NdpFilter                *bool                                                                      `path:"ipv6-ndp-filter" module:"openconfig-access-points"`
	Ipv6NdpFilterTimer           *uint16                                                                    `path:"ipv6-ndp-filter-timer" module:"openconfig-access-points"`
	MobilityDomain               *string                                                                    `path:"mobility-domain" module:"openconfig-access-points"`
	MulticastFilter              *bool                                                                      `path:"multicast-filter" module:"openconfig-access-points"`
	Name                         *string                                                                    `path:"name" module:"openconfig-access-points"`
	Okc                          *bool                                                                      `path:"okc" module:"openconfig-access-points"`
	OperatingFrequency           E_OpenconfigWifiTypes_OPERATING_FREQUENCY                                  `path:"operating-frequency" module:"openconfig-access-points"`
	Opmode                       E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode `path:"opmode" module:"openconfig-access-points"`
	PtkTimeout                   *uint16                                                                    `path:"ptk-timeout" module:"openconfig-access-points"`
	QbssLoad                     *bool                                                                      `path:"qbss-load" module:"openconfig-access-points"`
	RxBssDot11ChannelUtilization *uint8                                                                     `path:"rx-bss-dot11-channel-utilization" module:"openconfig-access-points"`
	ServerGroup                  *string                                                                    `path:"server-group" module:"openconfig-access-points"`
	StationIsolation             *bool                                                                      `path:"station-isolation" module:"openconfig-access-points"`
	SupportedDataRates           []E_OpenconfigWifiTypes_DATA_RATE                                          `path:"supported-data-rates" module:"openconfig-access-points"`
	TxBssDot11ChannelUtilization *uint8                                                                     `path:"tx-bss-dot11-channel-utilization" module:"openconfig-access-points"`
	VlanId                       *uint16                                                                    `path:"vlan-id" module:"openconfig-access-points"`
	Wpa2Psk                      *string                                                                    `path:"wpa2-psk" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm represents the /openconfig-access-points/access-points/access-point/ssids/ssid/wmm YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm struct {
	Config *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config `path:"config" module:"openconfig-access-points"`
	State  *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config represents the /openconfig-access-points/access-points/access-point/ssids/ssid/wmm/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config struct {
	TrustDscp   *bool   `path:"trust-dscp" module:"openconfig-access-points"`
	WmmBeRemark []uint8 `path:"wmm-be-remark" module:"openconfig-access-points"`
	WmmBkRemark []uint8 `path:"wmm-bk-remark" module:"openconfig-access-points"`
	WmmViRemark []uint8 `path:"wmm-vi-remark" module:"openconfig-access-points"`
	WmmVoRemark []uint8 `path:"wmm-vo-remark" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State represents the /openconfig-access-points/access-points/access-point/ssids/ssid/wmm/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State struct {
	TrustDscp   *bool   `path:"trust-dscp" module:"openconfig-access-points"`
	WmmBeRemark []uint8 `path:"wmm-be-remark" module:"openconfig-access-points"`
	WmmBkRemark []uint8 `path:"wmm-bk-remark" module:"openconfig-access-points"`
	WmmViRemark []uint8 `path:"wmm-vi-remark" module:"openconfig-access-points"`
	WmmVoRemark []uint8 `path:"wmm-vo-remark" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Wmm_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System represents the /openconfig-access-points/access-points/access-point/system YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System struct {
	Aaa          *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa          `path:"aaa" module:"openconfig-access-points"`
	Alarms       *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms       `path:"alarms" module:"openconfig-access-points"`
	Clock        *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock        `path:"clock" module:"openconfig-access-points"`
	Config       *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Config       `path:"config" module:"openconfig-access-points"`
	Cpus         *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus         `path:"cpus" module:"openconfig-access-points"`
	Dns          *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns          `path:"dns" module:"openconfig-access-points"`
	Logging      *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging      `path:"logging" module:"openconfig-access-points"`
	Memory       *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory       `path:"memory" module:"openconfig-access-points"`
	Ntp          *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp          `path:"ntp" module:"openconfig-access-points"`
	Processes    *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes    `path:"processes" module:"openconfig-access-points"`
	SshServer    *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer    `path:"ssh-server" module:"openconfig-access-points"`
	State        *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_State        `path:"state" module:"openconfig-access-points"`
	TelnetServer *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer `path:"telnet-server" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa represents the /openconfig-access-points/access-points/access-point/system/aaa YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa struct {
	Accounting     *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting     `path:"accounting" module:"openconfig-access-points"`
	Authentication *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication `path:"authentication" module:"openconfig-access-points"`
	Authorization  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization  `path:"authorization" module:"openconfig-access-points"`
	Config         *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Config         `path:"config" module:"openconfig-access-points"`
	ServerGroups   *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups   `path:"server-groups" module:"openconfig-access-points"`
	State          *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_State          `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting represents the /openconfig-access-points/access-points/access-point/system/aaa/accounting YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting struct {
	Config *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config `path:"config" module:"openconfig-access-points"`
	Events *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events `path:"events" module:"openconfig-access-points"`
	State  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/accounting/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config struct {
	AccountingMethod []OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union `path:"accounting-method" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/aaa/accounting/config/accounting-method within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-access-points/access-points/access-point/system/aaa/accounting/config/accounting-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union() {
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_String is used when /openconfig-access-points/access-points/access-point/system/aaa/accounting/config/accounting-method
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_String struct {
	String string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union() {
}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Config_AccountingMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events represents the /openconfig-access-points/access-points/access-point/system/aaa/accounting/events YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events struct {
	Event map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event `path:"event" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events) IsYANGGoStruct() {
}

// NewEvent creates a new entry in the Event list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events) NewEvent(EventType E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event represents the /openconfig-access-points/access-points/access-point/system/aaa/accounting/events/event YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event struct {
	Config    *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config `path:"config" module:"openconfig-access-points"`
	EventType E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE                                             `path:"event-type" module:"openconfig-access-points"`
	State     *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/accounting/events/event/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config struct {
	EventType E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE                                                     `path:"event-type" module:"openconfig-access-points"`
	Record    E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record `path:"record" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State represents the /openconfig-access-points/access-points/access-point/system/aaa/accounting/events/event/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State struct {
	EventType E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE                                                     `path:"event-type" module:"openconfig-access-points"`
	Record    E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record `path:"record" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State represents the /openconfig-access-points/access-points/access-point/system/aaa/accounting/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State struct {
	AccountingMethod []OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union `path:"accounting-method" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/aaa/accounting/state/accounting-method within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-access-points/access-points/access-point/system/aaa/accounting/state/accounting-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union() {
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_String is used when /openconfig-access-points/access-points/access-point/system/aaa/accounting/state/accounting-method
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_String struct {
	String string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union() {
}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_State_AccountingMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication struct {
	AdminUser *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser `path:"admin-user" module:"openconfig-access-points"`
	Config    *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config    `path:"config" module:"openconfig-access-points"`
	State     *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State     `path:"state" module:"openconfig-access-points"`
	Users     *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users     `path:"users" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/admin-user YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser struct {
	Config *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config `path:"config" module:"openconfig-access-points"`
	State  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/admin-user/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config struct {
	AdminPassword       *string `path:"admin-password" module:"openconfig-access-points"`
	AdminPasswordHashed *string `path:"admin-password-hashed" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/admin-user/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State struct {
	AdminPassword       *string `path:"admin-password" module:"openconfig-access-points"`
	AdminPasswordHashed *string `path:"admin-password-hashed" module:"openconfig-access-points"`
	AdminUsername       *string `path:"admin-username" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_AdminUser_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config struct {
	AuthenticationMethod []OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union `path:"authentication-method" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/aaa/authentication/config/authentication-method within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-access-points/access-points/access-point/system/aaa/authentication/config/authentication-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union() {
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String is used when /openconfig-access-points/access-points/access-point/system/aaa/authentication/config/authentication-method
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String struct {
	String string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union() {
}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Config_AuthenticationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State struct {
	AuthenticationMethod []OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union `path:"authentication-method" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/aaa/authentication/state/authentication-method within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-access-points/access-points/access-point/system/aaa/authentication/state/authentication-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union() {
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_String is used when /openconfig-access-points/access-points/access-point/system/aaa/authentication/state/authentication-method
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_String struct {
	String string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union() {
}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_State_AuthenticationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/users YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users struct {
	User map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User `path:"user" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users) IsYANGGoStruct() {
}

// NewUser creates a new entry in the User list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users) NewUser(Username string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User)
	}

	key := Username

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.User[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list User", key)
	}

	t.User[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User{
		Username: &Username,
	}

	return t.User[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User struct {
	Config   *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config `path:"config" module:"openconfig-access-points"`
	State    *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State  `path:"state" module:"openconfig-access-points"`
	Username *string                                                                                      `path:"username" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Username == nil {
		return nil, fmt.Errorf("nil value for key Username")
	}

	return map[string]interface{}{
		"username": *t.Username,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config struct {
	Password       *string                                                                                                `path:"password" module:"openconfig-access-points"`
	PasswordHashed *string                                                                                                `path:"password-hashed" module:"openconfig-access-points"`
	Role           OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union `path:"role" module:"openconfig-access-points"`
	SshKey         *string                                                                                                `path:"ssh-key" module:"openconfig-access-points"`
	Username       *string                                                                                                `path:"username" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user/config/role within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is used when /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user/config/role
// is to be set to a E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES struct {
	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union() {
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_String is used when /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user/config/role
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_String struct {
	String string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union() {
}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_Config_Role_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, string]", i, i)
	}
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State represents the /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State struct {
	Password       *string                                                                                               `path:"password" module:"openconfig-access-points"`
	PasswordHashed *string                                                                                               `path:"password-hashed" module:"openconfig-access-points"`
	Role           OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union `path:"role" module:"openconfig-access-points"`
	SshKey         *string                                                                                               `path:"ssh-key" module:"openconfig-access-points"`
	Username       *string                                                                                               `path:"username" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user/state/role within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is used when /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user/state/role
// is to be set to a E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES struct {
	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union() {
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_String is used when /openconfig-access-points/access-points/access-point/system/aaa/authentication/users/user/state/role
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_String struct {
	String string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union() {
}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authentication_Users_User_State_Role_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, string]", i, i)
	}
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization represents the /openconfig-access-points/access-points/access-point/system/aaa/authorization YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization struct {
	Config *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config `path:"config" module:"openconfig-access-points"`
	Events *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events `path:"events" module:"openconfig-access-points"`
	State  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/authorization/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config struct {
	AuthorizationMethod []OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union `path:"authorization-method" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/aaa/authorization/config/authorization-method within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-access-points/access-points/access-point/system/aaa/authorization/config/authorization-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union() {
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String is used when /openconfig-access-points/access-points/access-point/system/aaa/authorization/config/authorization-method
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String struct {
	String string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union() {
}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Config_AuthorizationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events represents the /openconfig-access-points/access-points/access-point/system/aaa/authorization/events YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events struct {
	Event map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event `path:"event" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events) IsYANGGoStruct() {
}

// NewEvent creates a new entry in the Event list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events) NewEvent(EventType E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event represents the /openconfig-access-points/access-points/access-point/system/aaa/authorization/events/event YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event struct {
	Config    *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config `path:"config" module:"openconfig-access-points"`
	EventType E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE                                             `path:"event-type" module:"openconfig-access-points"`
	State     *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/authorization/events/event/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config struct {
	EventType E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE `path:"event-type" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State represents the /openconfig-access-points/access-points/access-point/system/aaa/authorization/events/event/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State struct {
	EventType E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE `path:"event-type" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_Events_Event_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State represents the /openconfig-access-points/access-points/access-point/system/aaa/authorization/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State struct {
	AuthorizationMethod []OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union `path:"authorization-method" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/aaa/authorization/state/authorization-method within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-access-points/access-points/access-point/system/aaa/authorization/state/authorization-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union() {
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_String is used when /openconfig-access-points/access-points/access-point/system/aaa/authorization/state/authorization-method
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_String struct {
	String string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union() {
}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Authorization_State_AuthorizationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups struct {
	ServerGroup map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup `path:"server-group" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups) IsYANGGoStruct() {}

// NewServerGroup creates a new entry in the ServerGroup list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups) NewServerGroup(Name string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerGroup", key)
	}

	t.ServerGroup[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup{
		Name: &Name,
	}

	return t.ServerGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup struct {
	Config  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config  `path:"config" module:"openconfig-access-points"`
	Name    *string                                                                                      `path:"name" module:"openconfig-access-points"`
	Servers *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers `path:"servers" module:"openconfig-access-points"`
	State   *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State   `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config struct {
	Name *string                              `path:"name" module:"openconfig-access-points"`
	Type E_OpenconfigAaaTypes_AAA_SERVER_TYPE `path:"type" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers struct {
	Server map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server `path:"server" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers) IsYANGGoStruct() {
}

// NewServer creates a new entry in the Server list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers) NewServer(Address string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct {
	Address *string                                                                                                    `path:"address" module:"openconfig-access-points"`
	Config  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config `path:"config" module:"openconfig-access-points"`
	Radius  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius `path:"radius" module:"openconfig-access-points"`
	State   *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State  `path:"state" module:"openconfig-access-points"`
	Tacacs  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs `path:"tacacs" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config struct {
	Address *string `path:"address" module:"openconfig-access-points"`
	Name    *string `path:"name" module:"openconfig-access-points"`
	Timeout *uint16 `path:"timeout" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius struct {
	Config *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config `path:"config" module:"openconfig-access-points"`
	State  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/radius/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config struct {
	AcctPort           *uint16 `path:"acct-port" module:"openconfig-access-points"`
	AuthPort           *uint16 `path:"auth-port" module:"openconfig-access-points"`
	RetransmitAttempts *uint8  `path:"retransmit-attempts" module:"openconfig-access-points"`
	SecretKey          *string `path:"secret-key" module:"openconfig-access-points"`
	SourceAddress      *string `path:"source-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/radius/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State struct {
	AcctPort           *uint16                                                                                                                   `path:"acct-port" module:"openconfig-access-points"`
	AuthPort           *uint16                                                                                                                   `path:"auth-port" module:"openconfig-access-points"`
	Counters           *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters `path:"counters" module:"openconfig-access-points"`
	RetransmitAttempts *uint8                                                                                                                    `path:"retransmit-attempts" module:"openconfig-access-points"`
	SecretKey          *string                                                                                                                   `path:"secret-key" module:"openconfig-access-points"`
	SourceAddress      *string                                                                                                                   `path:"source-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters struct {
	AccessAccepts         *uint64 `path:"access-accepts" module:"openconfig-access-points"`
	AccessRejects         *uint64 `path:"access-rejects" module:"openconfig-access-points"`
	RetriedAccessRequests *uint64 `path:"retried-access-requests" module:"openconfig-access-points"`
	TimeoutAccessRequests *uint64 `path:"timeout-access-requests" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State struct {
	Address            *string `path:"address" module:"openconfig-access-points"`
	ConnectionAborts   *uint64 `path:"connection-aborts" module:"openconfig-access-points"`
	ConnectionCloses   *uint64 `path:"connection-closes" module:"openconfig-access-points"`
	ConnectionFailures *uint64 `path:"connection-failures" module:"openconfig-access-points"`
	ConnectionOpens    *uint64 `path:"connection-opens" module:"openconfig-access-points"`
	ConnectionTimeouts *uint64 `path:"connection-timeouts" module:"openconfig-access-points"`
	ErrorsReceived     *uint64 `path:"errors-received" module:"openconfig-access-points"`
	MessagesReceived   *uint64 `path:"messages-received" module:"openconfig-access-points"`
	MessagesSent       *uint64 `path:"messages-sent" module:"openconfig-access-points"`
	Name               *string `path:"name" module:"openconfig-access-points"`
	Timeout            *uint16 `path:"timeout" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs struct {
	Config *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config `path:"config" module:"openconfig-access-points"`
	State  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/tacacs/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config struct {
	Port          *uint16 `path:"port" module:"openconfig-access-points"`
	SecretKey     *string `path:"secret-key" module:"openconfig-access-points"`
	SourceAddress *string `path:"source-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/servers/server/tacacs/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State struct {
	Port          *uint16 `path:"port" module:"openconfig-access-points"`
	SecretKey     *string `path:"secret-key" module:"openconfig-access-points"`
	SourceAddress *string `path:"source-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State represents the /openconfig-access-points/access-points/access-point/system/aaa/server-groups/server-group/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State struct {
	Name *string                              `path:"name" module:"openconfig-access-points"`
	Type E_OpenconfigAaaTypes_AAA_SERVER_TYPE `path:"type" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_ServerGroups_ServerGroup_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_State represents the /openconfig-access-points/access-points/access-point/system/aaa/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_State struct {
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms represents the /openconfig-access-points/access-points/access-point/system/alarms YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms struct {
	Alarm map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm `path:"alarm" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms) IsYANGGoStruct() {}

// NewAlarm creates a new entry in the Alarm list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms) NewAlarm(Id string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Alarm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Alarm", key)
	}

	t.Alarm[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm{
		Id: &Id,
	}

	return t.Alarm[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm represents the /openconfig-access-points/access-points/access-point/system/alarms/alarm YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm struct {
	Config *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_Config `path:"config" module:"openconfig-access-points"`
	Id     *string                                                                     `path:"id" module:"openconfig-access-points"`
	State  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_Config represents the /openconfig-access-points/access-points/access-point/system/alarms/alarm/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State represents the /openconfig-access-points/access-points/access-point/system/alarms/alarm/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State struct {
	Id          *string                                                                                `path:"id" module:"openconfig-access-points"`
	Resource    *string                                                                                `path:"resource" module:"openconfig-access-points"`
	Severity    E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY                                       `path:"severity" module:"openconfig-access-points"`
	Text        *string                                                                                `path:"text" module:"openconfig-access-points"`
	TimeCreated *uint64                                                                                `path:"time-created" module:"openconfig-access-points"`
	TypeId      OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union `path:"type-id" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/alarms/alarm/state/type-id within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID is used when /openconfig-access-points/access-points/access-point/system/alarms/alarm/state/type-id
// is to be set to a E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID struct {
	E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union() {
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_String is used when /openconfig-access-points/access-points/access-point/system/alarms/alarm/state/type-id
// is to be set to a string value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_String struct {
	String string
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_String
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_String) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union() {
}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID{v}, nil
	case string:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Alarms_Alarm_State_TypeId_Union, unknown union type, got: %T, want any of [E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID, string]", i, i)
	}
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock represents the /openconfig-access-points/access-points/access-point/system/clock YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock struct {
	Config *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_Config `path:"config" module:"openconfig-access-points"`
	State  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_Config represents the /openconfig-access-points/access-points/access-point/system/clock/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_Config struct {
	TimezoneName *string `path:"timezone-name" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_State represents the /openconfig-access-points/access-points/access-point/system/clock/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_State struct {
	TimezoneName *string `path:"timezone-name" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Clock_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Config represents the /openconfig-access-points/access-points/access-point/system/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Config struct {
	DomainName  *string `path:"domain-name" module:"openconfig-access-points"`
	Hostname    *string `path:"hostname" module:"openconfig-access-points"`
	LoginBanner *string `path:"login-banner" module:"openconfig-access-points"`
	MotdBanner  *string `path:"motd-banner" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus represents the /openconfig-access-points/access-points/access-point/system/cpus YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus struct {
	Cpu map[OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu `path:"cpu" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus) IsYANGGoStruct() {}

// NewCpu creates a new entry in the Cpu list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus) NewCpu(Index OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cpu[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cpu", key)
	}

	t.Cpu[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu{
		Index: Index,
	}

	return t.Cpu[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu struct {
	Index OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union `path:"index" module:"openconfig-access-points"`
	State *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State            `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-access-points/access-points/access-point/system/cpus/cpu/index within the YANG schema.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union interface {
	Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union()
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index is used when /openconfig-access-points/access-points/access-point/system/cpus/cpu/index
// is to be set to a E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index struct {
	E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union() {
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_Uint32 is used when /openconfig-access-points/access-points/access-point/system/cpus/cpu/index
// is to be set to a uint32 value.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_Uint32 struct {
	Uint32 uint32
}

// Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_Uint32
// implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union interface.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_Uint32) Is_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union() {
}

// To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu) To_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union(i interface{}) (OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index{v}, nil
	case uint32:
		return &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union, unknown union type, got: %T, want any of [E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index, uint32]", i, i)
	}
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State struct {
	HardwareInterrupt *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt `path:"hardware-interrupt" module:"openconfig-access-points"`
	Idle              *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle              `path:"idle" module:"openconfig-access-points"`
	Index             OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_Union        `path:"index" module:"openconfig-access-points"`
	Kernel            *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel            `path:"kernel" module:"openconfig-access-points"`
	Nice              *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice              `path:"nice" module:"openconfig-access-points"`
	SoftwareInterrupt *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt `path:"software-interrupt" module:"openconfig-access-points"`
	Total             *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total             `path:"total" module:"openconfig-access-points"`
	User              *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_User              `path:"user" module:"openconfig-access-points"`
	Wait              *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait              `path:"wait" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt struct {
	Avg      *uint8  `path:"avg" module:"openconfig-access-points"`
	Instant  *uint8  `path:"instant" module:"openconfig-access-points"`
	Interval *uint64 `path:"interval" module:"openconfig-access-points"`
	Max      *uint8  `path:"max" module:"openconfig-access-points"`
	Min      *uint8  `path:"min" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_HardwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state/idle YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle struct {
	Avg      *uint8  `path:"avg" module:"openconfig-access-points"`
	Instant  *uint8  `path:"instant" module:"openconfig-access-points"`
	Interval *uint64 `path:"interval" module:"openconfig-access-points"`
	Max      *uint8  `path:"max" module:"openconfig-access-points"`
	Min      *uint8  `path:"min" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Idle) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state/kernel YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel struct {
	Avg      *uint8  `path:"avg" module:"openconfig-access-points"`
	Instant  *uint8  `path:"instant" module:"openconfig-access-points"`
	Interval *uint64 `path:"interval" module:"openconfig-access-points"`
	Max      *uint8  `path:"max" module:"openconfig-access-points"`
	Min      *uint8  `path:"min" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Kernel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state/nice YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice struct {
	Avg      *uint8  `path:"avg" module:"openconfig-access-points"`
	Instant  *uint8  `path:"instant" module:"openconfig-access-points"`
	Interval *uint64 `path:"interval" module:"openconfig-access-points"`
	Max      *uint8  `path:"max" module:"openconfig-access-points"`
	Min      *uint8  `path:"min" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Nice) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state/software-interrupt YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt struct {
	Avg      *uint8  `path:"avg" module:"openconfig-access-points"`
	Instant  *uint8  `path:"instant" module:"openconfig-access-points"`
	Interval *uint64 `path:"interval" module:"openconfig-access-points"`
	Max      *uint8  `path:"max" module:"openconfig-access-points"`
	Min      *uint8  `path:"min" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_SoftwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state/total YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total struct {
	Avg      *uint8  `path:"avg" module:"openconfig-access-points"`
	Instant  *uint8  `path:"instant" module:"openconfig-access-points"`
	Interval *uint64 `path:"interval" module:"openconfig-access-points"`
	Max      *uint8  `path:"max" module:"openconfig-access-points"`
	Min      *uint8  `path:"min" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Total) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_User represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state/user YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_User struct {
	Avg      *uint8  `path:"avg" module:"openconfig-access-points"`
	Instant  *uint8  `path:"instant" module:"openconfig-access-points"`
	Interval *uint64 `path:"interval" module:"openconfig-access-points"`
	Max      *uint8  `path:"max" module:"openconfig-access-points"`
	Min      *uint8  `path:"min" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_User"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_User) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait represents the /openconfig-access-points/access-points/access-point/system/cpus/cpu/state/wait YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait struct {
	Avg      *uint8  `path:"avg" module:"openconfig-access-points"`
	Instant  *uint8  `path:"instant" module:"openconfig-access-points"`
	Interval *uint64 `path:"interval" module:"openconfig-access-points"`
	Max      *uint8  `path:"max" module:"openconfig-access-points"`
	Min      *uint8  `path:"min" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Wait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns represents the /openconfig-access-points/access-points/access-point/system/dns YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns struct {
	Config      *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Config      `path:"config" module:"openconfig-access-points"`
	HostEntries *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries `path:"host-entries" module:"openconfig-access-points"`
	Servers     *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers     `path:"servers" module:"openconfig-access-points"`
	State       *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_State       `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Config represents the /openconfig-access-points/access-points/access-point/system/dns/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Config struct {
	Search []string `path:"search" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries represents the /openconfig-access-points/access-points/access-point/system/dns/host-entries YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries struct {
	HostEntry map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry `path:"host-entry" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries) IsYANGGoStruct() {}

// NewHostEntry creates a new entry in the HostEntry list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries) NewHostEntry(Hostname string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry)
	}

	key := Hostname

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostEntry", key)
	}

	t.HostEntry[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry{
		Hostname: &Hostname,
	}

	return t.HostEntry[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry represents the /openconfig-access-points/access-points/access-point/system/dns/host-entries/host-entry YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry struct {
	Config   *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config `path:"config" module:"openconfig-access-points"`
	Hostname *string                                                                                  `path:"hostname" module:"openconfig-access-points"`
	State    *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Hostname == nil {
		return nil, fmt.Errorf("nil value for key Hostname")
	}

	return map[string]interface{}{
		"hostname": *t.Hostname,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config represents the /openconfig-access-points/access-points/access-point/system/dns/host-entries/host-entry/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config struct {
	Alias       []string `path:"alias" module:"openconfig-access-points"`
	Hostname    *string  `path:"hostname" module:"openconfig-access-points"`
	Ipv4Address []string `path:"ipv4-address" module:"openconfig-access-points"`
	Ipv6Address []string `path:"ipv6-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State represents the /openconfig-access-points/access-points/access-point/system/dns/host-entries/host-entry/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State struct {
	Alias       []string `path:"alias" module:"openconfig-access-points"`
	Hostname    *string  `path:"hostname" module:"openconfig-access-points"`
	Ipv4Address []string `path:"ipv4-address" module:"openconfig-access-points"`
	Ipv6Address []string `path:"ipv6-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_HostEntries_HostEntry_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers represents the /openconfig-access-points/access-points/access-point/system/dns/servers YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers struct {
	Server map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server `path:"server" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers) NewServer(Address string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server represents the /openconfig-access-points/access-points/access-point/system/dns/servers/server YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server struct {
	Address *string                                                                           `path:"address" module:"openconfig-access-points"`
	Config  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_Config `path:"config" module:"openconfig-access-points"`
	State   *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_Config represents the /openconfig-access-points/access-points/access-point/system/dns/servers/server/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_Config struct {
	Address *string `path:"address" module:"openconfig-access-points"`
	Port    *uint16 `path:"port" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_State represents the /openconfig-access-points/access-points/access-point/system/dns/servers/server/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_State struct {
	Address *string `path:"address" module:"openconfig-access-points"`
	Port    *uint16 `path:"port" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_State represents the /openconfig-access-points/access-points/access-point/system/dns/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_State struct {
	Search []string `path:"search" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Dns_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging represents the /openconfig-access-points/access-points/access-point/system/logging YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging struct {
	Console       *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console       `path:"console" module:"openconfig-access-points"`
	RemoteServers *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers `path:"remote-servers" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console represents the /openconfig-access-points/access-points/access-point/system/logging/console YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console struct {
	Config    *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Config    `path:"config" module:"openconfig-access-points"`
	Selectors *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors `path:"selectors" module:"openconfig-access-points"`
	State     *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_State     `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Config represents the /openconfig-access-points/access-points/access-point/system/logging/console/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors represents the /openconfig-access-points/access-points/access-point/system/logging/console/selectors YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors struct {
	Selector map[OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Key]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector `path:"selector" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors) IsYANGGoStruct() {
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Key represents the key for list Selector of element /openconfig-access-points/access-points/access-point/system/logging/console/selectors.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Key struct {
	Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity"`
}

// NewSelector creates a new entry in the Selector list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors) NewSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Key]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector)
	}

	key := OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector represents the /openconfig-access-points/access-points/access-point/system/logging/console/selectors/selector YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector struct {
	Config   *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config `path:"config" module:"openconfig-access-points"`
	Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY                                                         `path:"facility" module:"openconfig-access-points"`
	Severity E_OpenconfigSystemLogging_SyslogSeverity                                                          `path:"severity" module:"openconfig-access-points"`
	State    *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config represents the /openconfig-access-points/access-points/access-point/system/logging/console/selectors/selector/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config struct {
	Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-access-points"`
	Severity E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State represents the /openconfig-access-points/access-points/access-point/system/logging/console/selectors/selector/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State struct {
	Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-access-points"`
	Severity E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_Selectors_Selector_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_State represents the /openconfig-access-points/access-points/access-point/system/logging/console/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_State struct {
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_Console_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers represents the /openconfig-access-points/access-points/access-point/system/logging/remote-servers YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers struct {
	RemoteServer map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer `path:"remote-server" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers) IsYANGGoStruct() {
}

// NewRemoteServer creates a new entry in the RemoteServer list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers) NewRemoteServer(Host string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer)
	}

	key := Host

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteServer", key)
	}

	t.RemoteServer[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer{
		Host: &Host,
	}

	return t.RemoteServer[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer represents the /openconfig-access-points/access-points/access-point/system/logging/remote-servers/remote-server YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer struct {
	Config    *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config    `path:"config" module:"openconfig-access-points"`
	Host      *string                                                                                              `path:"host" module:"openconfig-access-points"`
	Selectors *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors `path:"selectors" module:"openconfig-access-points"`
	State     *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State     `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Host == nil {
		return nil, fmt.Errorf("nil value for key Host")
	}

	return map[string]interface{}{
		"host": *t.Host,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config represents the /openconfig-access-points/access-points/access-point/system/logging/remote-servers/remote-server/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config struct {
	Host          *string `path:"host" module:"openconfig-access-points"`
	RemotePort    *uint16 `path:"remote-port" module:"openconfig-access-points"`
	SourceAddress *string `path:"source-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors represents the /openconfig-access-points/access-points/access-point/system/logging/remote-servers/remote-server/selectors YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors struct {
	Selector map[OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector `path:"selector" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors) IsYANGGoStruct() {
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key represents the key for list Selector of element /openconfig-access-points/access-points/access-point/system/logging/remote-servers/remote-server/selectors.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key struct {
	Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity"`
}

// NewSelector creates a new entry in the Selector list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors) NewSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector)
	}

	key := OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector represents the /openconfig-access-points/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct {
	Config   *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config `path:"config" module:"openconfig-access-points"`
	Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY                                                                            `path:"facility" module:"openconfig-access-points"`
	Severity E_OpenconfigSystemLogging_SyslogSeverity                                                                             `path:"severity" module:"openconfig-access-points"`
	State    *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) IsYANGGoStruct() {
}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config represents the /openconfig-access-points/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config struct {
	Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-access-points"`
	Severity E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State represents the /openconfig-access-points/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State struct {
	Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-access-points"`
	Severity E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State represents the /openconfig-access-points/access-points/access-point/system/logging/remote-servers/remote-server/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State struct {
	Host          *string `path:"host" module:"openconfig-access-points"`
	RemotePort    *uint16 `path:"remote-port" module:"openconfig-access-points"`
	SourceAddress *string `path:"source-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Logging_RemoteServers_RemoteServer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory represents the /openconfig-access-points/access-points/access-point/system/memory YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory struct {
	Config *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_Config `path:"config" module:"openconfig-access-points"`
	State  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_Config represents the /openconfig-access-points/access-points/access-point/system/memory/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_Config struct {
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State represents the /openconfig-access-points/access-points/access-point/system/memory/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State struct {
	Physical *uint64 `path:"physical" module:"openconfig-access-points"`
	Reserved *uint64 `path:"reserved" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Memory_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp represents the /openconfig-access-points/access-points/access-point/system/ntp YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp struct {
	Config  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Config  `path:"config" module:"openconfig-access-points"`
	NtpKeys *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys `path:"ntp-keys" module:"openconfig-access-points"`
	Servers *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers `path:"servers" module:"openconfig-access-points"`
	State   *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_State   `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Config represents the /openconfig-access-points/access-points/access-point/system/ntp/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Config struct {
	EnableNtpAuth    *bool   `path:"enable-ntp-auth" module:"openconfig-access-points"`
	Enabled          *bool   `path:"enabled" module:"openconfig-access-points"`
	NtpSourceAddress *string `path:"ntp-source-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys represents the /openconfig-access-points/access-points/access-point/system/ntp/ntp-keys YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys struct {
	NtpKey map[uint16]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey `path:"ntp-key" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys) IsYANGGoStruct() {}

// NewNtpKey creates a new entry in the NtpKey list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys) NewNtpKey(KeyId uint16) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NtpKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NtpKey", key)
	}

	t.NtpKey[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey{
		KeyId: &KeyId,
	}

	return t.NtpKey[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey represents the /openconfig-access-points/access-points/access-point/system/ntp/ntp-keys/ntp-key YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey struct {
	Config *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config `path:"config" module:"openconfig-access-points"`
	KeyId  *uint16                                                                           `path:"key-id" module:"openconfig-access-points"`
	State  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config represents the /openconfig-access-points/access-points/access-point/system/ntp/ntp-keys/ntp-key/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config struct {
	KeyId    *uint16                          `path:"key-id" module:"openconfig-access-points"`
	KeyType  E_OpenconfigSystem_NTP_AUTH_TYPE `path:"key-type" module:"openconfig-access-points"`
	KeyValue *string                          `path:"key-value" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State represents the /openconfig-access-points/access-points/access-point/system/ntp/ntp-keys/ntp-key/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State struct {
	KeyId    *uint16                          `path:"key-id" module:"openconfig-access-points"`
	KeyType  E_OpenconfigSystem_NTP_AUTH_TYPE `path:"key-type" module:"openconfig-access-points"`
	KeyValue *string                          `path:"key-value" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_NtpKeys_NtpKey_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers represents the /openconfig-access-points/access-points/access-point/system/ntp/servers YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers struct {
	Server map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server `path:"server" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers) NewServer(Address string) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server represents the /openconfig-access-points/access-points/access-point/system/ntp/servers/server YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server struct {
	Address *string                                                                           `path:"address" module:"openconfig-access-points"`
	Config  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config `path:"config" module:"openconfig-access-points"`
	State   *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config represents the /openconfig-access-points/access-points/access-point/system/ntp/servers/server/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config struct {
	Address         *string                                                                                            `path:"address" module:"openconfig-access-points"`
	AssociationType E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType `path:"association-type" module:"openconfig-access-points"`
	Iburst          *bool                                                                                              `path:"iburst" module:"openconfig-access-points"`
	Port            *uint16                                                                                            `path:"port" module:"openconfig-access-points"`
	Prefer          *bool                                                                                              `path:"prefer" module:"openconfig-access-points"`
	Version         *uint8                                                                                             `path:"version" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_State represents the /openconfig-access-points/access-points/access-point/system/ntp/servers/server/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_State struct {
	Address         *string                                                                                            `path:"address" module:"openconfig-access-points"`
	AssociationType E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType `path:"association-type" module:"openconfig-access-points"`
	Iburst          *bool                                                                                              `path:"iburst" module:"openconfig-access-points"`
	Offset          *uint64                                                                                            `path:"offset" module:"openconfig-access-points"`
	PollInterval    *uint32                                                                                            `path:"poll-interval" module:"openconfig-access-points"`
	Port            *uint16                                                                                            `path:"port" module:"openconfig-access-points"`
	Prefer          *bool                                                                                              `path:"prefer" module:"openconfig-access-points"`
	RootDelay       *uint32                                                                                            `path:"root-delay" module:"openconfig-access-points"`
	RootDispersion  *uint64                                                                                            `path:"root-dispersion" module:"openconfig-access-points"`
	Stratum         *uint8                                                                                             `path:"stratum" module:"openconfig-access-points"`
	Version         *uint8                                                                                             `path:"version" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_State represents the /openconfig-access-points/access-points/access-point/system/ntp/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_State struct {
	AuthMismatch     *uint64 `path:"auth-mismatch" module:"openconfig-access-points"`
	EnableNtpAuth    *bool   `path:"enable-ntp-auth" module:"openconfig-access-points"`
	Enabled          *bool   `path:"enabled" module:"openconfig-access-points"`
	NtpSourceAddress *string `path:"ntp-source-address" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes represents the /openconfig-access-points/access-points/access-point/system/processes YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes struct {
	Process map[uint64]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process `path:"process" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes) IsYANGGoStruct() {}

// NewProcess creates a new entry in the Process list of the
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes) NewProcess(Pid uint64) (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process)
	}

	key := Pid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Process[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Process", key)
	}

	t.Process[key] = &OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process{
		Pid: &Pid,
	}

	return t.Process[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process represents the /openconfig-access-points/access-points/access-point/system/processes/process YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process struct {
	Pid   *uint64                                                                         `path:"pid" module:"openconfig-access-points"`
	State *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process_State `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process struct, which is a YANG list entry.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Pid == nil {
		return nil, fmt.Errorf("nil value for key Pid")
	}

	return map[string]interface{}{
		"pid": *t.Pid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process_State represents the /openconfig-access-points/access-points/access-point/system/processes/process/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process_State struct {
	Args              []string `path:"args" module:"openconfig-access-points"`
	CpuUsageSystem    *uint64  `path:"cpu-usage-system" module:"openconfig-access-points"`
	CpuUsageUser      *uint64  `path:"cpu-usage-user" module:"openconfig-access-points"`
	CpuUtilization    *uint8   `path:"cpu-utilization" module:"openconfig-access-points"`
	MemoryUsage       *uint64  `path:"memory-usage" module:"openconfig-access-points"`
	MemoryUtilization *uint8   `path:"memory-utilization" module:"openconfig-access-points"`
	Name              *string  `path:"name" module:"openconfig-access-points"`
	Pid               *uint64  `path:"pid" module:"openconfig-access-points"`
	StartTime         *uint64  `path:"start-time" module:"openconfig-access-points"`
	Uptime            *uint64  `path:"uptime" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process_State) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Processes_Process_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer represents the /openconfig-access-points/access-points/access-point/system/ssh-server YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer struct {
	Config *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config `path:"config" module:"openconfig-access-points"`
	State  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config represents the /openconfig-access-points/access-points/access-point/system/ssh-server/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config struct {
	Enable          *bool                                                                                     `path:"enable" module:"openconfig-access-points"`
	ProtocolVersion E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion `path:"protocol-version" module:"openconfig-access-points"`
	RateLimit       *uint16                                                                                   `path:"rate-limit" module:"openconfig-access-points"`
	SessionLimit    *uint16                                                                                   `path:"session-limit" module:"openconfig-access-points"`
	Timeout         *uint16                                                                                   `path:"timeout" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_State represents the /openconfig-access-points/access-points/access-point/system/ssh-server/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_State struct {
	Enable          *bool                                                                                     `path:"enable" module:"openconfig-access-points"`
	ProtocolVersion E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion `path:"protocol-version" module:"openconfig-access-points"`
	RateLimit       *uint16                                                                                   `path:"rate-limit" module:"openconfig-access-points"`
	SessionLimit    *uint16                                                                                   `path:"session-limit" module:"openconfig-access-points"`
	Timeout         *uint16                                                                                   `path:"timeout" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_State represents the /openconfig-access-points/access-points/access-point/system/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_State struct {
	BootTime        *uint64 `path:"boot-time" module:"openconfig-access-points"`
	CurrentDatetime *string `path:"current-datetime" module:"openconfig-access-points"`
	DomainName      *string `path:"domain-name" module:"openconfig-access-points"`
	Hostname        *string `path:"hostname" module:"openconfig-access-points"`
	LoginBanner     *string `path:"login-banner" module:"openconfig-access-points"`
	MotdBanner      *string `path:"motd-banner" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer represents the /openconfig-access-points/access-points/access-point/system/telnet-server YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer struct {
	Config *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_Config `path:"config" module:"openconfig-access-points"`
	State  *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_State  `path:"state" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_Config represents the /openconfig-access-points/access-points/access-point/system/telnet-server/config YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_Config struct {
	Enable       *bool   `path:"enable" module:"openconfig-access-points"`
	RateLimit    *uint16 `path:"rate-limit" module:"openconfig-access-points"`
	SessionLimit *uint16 `path:"session-limit" module:"openconfig-access-points"`
	Timeout      *uint16 `path:"timeout" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_Config"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_State represents the /openconfig-access-points/access-points/access-point/system/telnet-server/state YANG schema element.
type OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_State struct {
	Enable       *bool   `path:"enable" module:"openconfig-access-points"`
	RateLimit    *uint16 `path:"rate-limit" module:"openconfig-access-points"`
	SessionLimit *uint16 `path:"session-limit" module:"openconfig-access-points"`
	Timeout      *uint16 `path:"timeout" module:"openconfig-access-points"`
}

// IsYANGGoStruct ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_State"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigAccessPoints_AccessPoints_AccessPoint_System_TelnetServer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigGasket_Gasket represents the /openconfig-gasket/gasket YANG schema element.
type OpenconfigGasket_Gasket struct {
	CtrlInterface   *string `path:"ctrl-interface" module:"openconfig-gasket"`
	RadiusAttribute *string `path:"radius-attribute" module:"openconfig-gasket"`
}

// IsYANGGoStruct ensures that OpenconfigGasket_Gasket implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigGasket_Gasket) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigGasket_Gasket) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigGasket_Gasket"], s, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigGasket_Gasket) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE.
func (E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE
	OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_UNSET E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE = 0
	// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_COMMAND corresponds to the value AAA_ACCOUNTING_EVENT_COMMAND of OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE
	OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_COMMAND E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE = 1
	// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_LOGIN corresponds to the value AAA_ACCOUNTING_EVENT_LOGIN of OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE
	OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_LOGIN E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE = 2
	// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_COMMAND corresponds to the value AAA_AUTHORIZATION_EVENT_COMMAND of OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE
	OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_COMMAND E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE = 3
	// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_CONFIG corresponds to the value AAA_AUTHORIZATION_EVENT_CONFIG of OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE
	OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_CONFIG E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE = 4
)

// E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE.
func (E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
	OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_UNSET E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE = 0
)

// E_OpenconfigAaaTypes_AAA_METHOD_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_METHOD_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_METHOD_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_METHOD_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_METHOD_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_METHOD_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_METHOD_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_METHOD_TYPE.
func (E_OpenconfigAaaTypes_AAA_METHOD_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_UNSET E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 0
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_LOCAL corresponds to the value LOCAL of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_LOCAL E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 1
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_RADIUS_ALL corresponds to the value RADIUS_ALL of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_RADIUS_ALL E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 2
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_TACACS_ALL corresponds to the value TACACS_ALL of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_TACACS_ALL E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 3
)

// E_OpenconfigAaaTypes_AAA_SERVER_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_SERVER_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_SERVER_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_SERVER_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_SERVER_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_SERVER_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_SERVER_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_SERVER_TYPE.
func (E_OpenconfigAaaTypes_AAA_SERVER_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAaaTypes_AAA_SERVER_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_SERVER_TYPE
	OpenconfigAaaTypes_AAA_SERVER_TYPE_UNSET E_OpenconfigAaaTypes_AAA_SERVER_TYPE = 0
	// OpenconfigAaaTypes_AAA_SERVER_TYPE_RADIUS corresponds to the value RADIUS of OpenconfigAaaTypes_AAA_SERVER_TYPE
	OpenconfigAaaTypes_AAA_SERVER_TYPE_RADIUS E_OpenconfigAaaTypes_AAA_SERVER_TYPE = 1
	// OpenconfigAaaTypes_AAA_SERVER_TYPE_TACACS corresponds to the value TACACS of OpenconfigAaaTypes_AAA_SERVER_TYPE
	OpenconfigAaaTypes_AAA_SERVER_TYPE_TACACS E_OpenconfigAaaTypes_AAA_SERVER_TYPE = 2
)

// E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES. An additional value named
// OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES.
func (E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
	OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_UNSET E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES = 0
	// OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_SYSTEM_ROLE_ADMIN corresponds to the value SYSTEM_ROLE_ADMIN of OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
	OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_SYSTEM_ROLE_ADMIN E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES = 1
)

// E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode is a derived int64 type which is used to represent
// the enumerated node OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode. An additional value named
// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode int64

// IsYANGGoEnum ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode implements the yang.GoEnum
// interface. This ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) IsYANGGoEnum() {
}

// ΛMap returns the value lookup map associated with  OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_UNSET corresponds to the value UNSET of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_UNSET E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 0
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_A corresponds to the value A of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_A E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 1
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_B corresponds to the value B of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_B E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 2
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_G corresponds to the value G of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_G E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 3
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_N corresponds to the value N of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_N E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 4
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_AC corresponds to the value AC of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode_AC E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode = 5
)

// E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode is a derived int64 type which is used to represent
// the enumerated node OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode. An additional value named
// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode int64

// IsYANGGoEnum ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode implements the yang.GoEnum
// interface. This ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_UNSET corresponds to the value UNSET of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_UNSET E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode = 0
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_OPEN corresponds to the value OPEN of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_OPEN E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode = 1
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_WPA2_PERSONAL corresponds to the value WPA2_PERSONAL of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_WPA2_PERSONAL E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode = 2
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_WPA2_ENTERPRISE corresponds to the value WPA2_ENTERPRISE of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode_WPA2_ENTERPRISE E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode = 3
)

// E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod is a derived int64 type which is used to represent
// the enumerated node OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod. An additional value named
// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod int64

// IsYANGGoEnum ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod implements the yang.GoEnum
// interface. This ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod) IsYANGGoEnum() {
}

// ΛMap returns the value lookup map associated with  OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod_UNSET corresponds to the value UNSET of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod_UNSET E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod = 0
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod_OVA corresponds to the value OVA of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod_OVA E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod = 1
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod_ODS corresponds to the value ODS of OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod
	OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod_ODS E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod = 2
)

// E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record is a derived int64 type which is used to represent
// the enumerated node OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record. An additional value named
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record int64

// IsYANGGoEnum ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record implements the yang.GoEnum
// interface. This ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record) IsYANGGoEnum() {
}

// ΛMap returns the value lookup map associated with  OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record_UNSET corresponds to the value UNSET of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record_UNSET E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record = 0
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record_START_STOP corresponds to the value START_STOP of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record_START_STOP E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record = 1
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record_STOP corresponds to the value STOP of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record_STOP E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record = 2
)

// E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index is a derived int64 type which is used to represent
// the enumerated node OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index. An additional value named
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index int64

// IsYANGGoEnum ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index implements the yang.GoEnum
// interface. This ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_UNSET corresponds to the value UNSET of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_UNSET E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index = 0
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_ALL corresponds to the value ALL of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index_ALL E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index = 1
)

// E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType is a derived int64 type which is used to represent
// the enumerated node OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType. An additional value named
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType int64

// IsYANGGoEnum ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType implements the yang.GoEnum
// interface. This ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType) IsYANGGoEnum() {
}

// ΛMap returns the value lookup map associated with  OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_UNSET corresponds to the value UNSET of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_UNSET E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType = 0
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_SERVER corresponds to the value SERVER of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_SERVER E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType = 1
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_PEER corresponds to the value PEER of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_PEER E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType = 2
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_POOL corresponds to the value POOL of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType_POOL E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType = 3
)

// E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion is a derived int64 type which is used to represent
// the enumerated node OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion. An additional value named
// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion int64

// IsYANGGoEnum ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion implements the yang.GoEnum
// interface. This ensures that OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion) IsYANGGoEnum() {
}

// ΛMap returns the value lookup map associated with  OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion.
func (E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_UNSET corresponds to the value UNSET of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_UNSET E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion = 0
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_V2 corresponds to the value V2 of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_V2 E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion = 1
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_V1 corresponds to the value V1 of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_V1 E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion = 2
	// OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_V1_V2 corresponds to the value V1_V2 of OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion
	OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion_V1_V2 E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion = 3
)

// E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY. An additional value named
// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY int64

// IsYANGGoEnum ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY implements the yang.GoEnum
// interface. This ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET corresponds to the value UNSET of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 0
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_CRITICAL corresponds to the value CRITICAL of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_CRITICAL E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 1
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MAJOR corresponds to the value MAJOR of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MAJOR E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 2
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MINOR corresponds to the value MINOR of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MINOR E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 3
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNKNOWN corresponds to the value UNKNOWN of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNKNOWN E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 4
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_WARNING corresponds to the value WARNING of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_WARNING E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 5
)

// E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID is a derived int64 type which is used to represent
// the enumerated node OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID. An additional value named
// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID int64

// IsYANGGoEnum ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID implements the yang.GoEnum
// interface. This ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_UNSET corresponds to the value UNSET of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_UNSET E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 0
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_AIS corresponds to the value AIS of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_AIS E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 1
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_EQPT corresponds to the value EQPT of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_EQPT E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 2
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_LOS corresponds to the value LOS of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_LOS E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 3
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_OTS corresponds to the value OTS of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_OTS E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 4
)

// E_OpenconfigSystemLogging_SYSLOG_FACILITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystemLogging_SYSLOG_FACILITY. An additional value named
// OpenconfigSystemLogging_SYSLOG_FACILITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystemLogging_SYSLOG_FACILITY int64

// IsYANGGoEnum ensures that OpenconfigSystemLogging_SYSLOG_FACILITY implements the yang.GoEnum
// interface. This ensures that OpenconfigSystemLogging_SYSLOG_FACILITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystemLogging_SYSLOG_FACILITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystemLogging_SYSLOG_FACILITY.
func (E_OpenconfigSystemLogging_SYSLOG_FACILITY) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystemLogging_SYSLOG_FACILITY_UNSET corresponds to the value UNSET of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_UNSET E_OpenconfigSystemLogging_SYSLOG_FACILITY = 0
	// OpenconfigSystemLogging_SYSLOG_FACILITY_ALL corresponds to the value ALL of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_ALL E_OpenconfigSystemLogging_SYSLOG_FACILITY = 1
	// OpenconfigSystemLogging_SYSLOG_FACILITY_AUDIT corresponds to the value AUDIT of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_AUDIT E_OpenconfigSystemLogging_SYSLOG_FACILITY = 2
	// OpenconfigSystemLogging_SYSLOG_FACILITY_AUTH corresponds to the value AUTH of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_AUTH E_OpenconfigSystemLogging_SYSLOG_FACILITY = 3
	// OpenconfigSystemLogging_SYSLOG_FACILITY_AUTHPRIV corresponds to the value AUTHPRIV of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_AUTHPRIV E_OpenconfigSystemLogging_SYSLOG_FACILITY = 4
	// OpenconfigSystemLogging_SYSLOG_FACILITY_CONSOLE corresponds to the value CONSOLE of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_CONSOLE E_OpenconfigSystemLogging_SYSLOG_FACILITY = 5
	// OpenconfigSystemLogging_SYSLOG_FACILITY_KERNEL corresponds to the value KERNEL of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_KERNEL E_OpenconfigSystemLogging_SYSLOG_FACILITY = 6
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL0 corresponds to the value LOCAL0 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL0 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 7
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL1 corresponds to the value LOCAL1 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL1 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 8
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL2 corresponds to the value LOCAL2 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL2 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 9
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL3 corresponds to the value LOCAL3 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL3 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 10
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL4 corresponds to the value LOCAL4 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL4 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 11
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL5 corresponds to the value LOCAL5 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL5 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 12
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL6 corresponds to the value LOCAL6 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL6 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 13
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL7 corresponds to the value LOCAL7 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL7 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 14
	// OpenconfigSystemLogging_SYSLOG_FACILITY_MAIL corresponds to the value MAIL of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_MAIL E_OpenconfigSystemLogging_SYSLOG_FACILITY = 15
	// OpenconfigSystemLogging_SYSLOG_FACILITY_NTP corresponds to the value NTP of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_NTP E_OpenconfigSystemLogging_SYSLOG_FACILITY = 16
	// OpenconfigSystemLogging_SYSLOG_FACILITY_SYSLOG corresponds to the value SYSLOG of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_SYSLOG E_OpenconfigSystemLogging_SYSLOG_FACILITY = 17
	// OpenconfigSystemLogging_SYSLOG_FACILITY_SYSTEM_DAEMON corresponds to the value SYSTEM_DAEMON of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_SYSTEM_DAEMON E_OpenconfigSystemLogging_SYSLOG_FACILITY = 18
	// OpenconfigSystemLogging_SYSLOG_FACILITY_USER corresponds to the value USER of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_USER E_OpenconfigSystemLogging_SYSLOG_FACILITY = 19
)

// E_OpenconfigSystemLogging_SyslogSeverity is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystemLogging_SyslogSeverity. An additional value named
// OpenconfigSystemLogging_SyslogSeverity_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystemLogging_SyslogSeverity int64

// IsYANGGoEnum ensures that OpenconfigSystemLogging_SyslogSeverity implements the yang.GoEnum
// interface. This ensures that OpenconfigSystemLogging_SyslogSeverity can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystemLogging_SyslogSeverity) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystemLogging_SyslogSeverity.
func (E_OpenconfigSystemLogging_SyslogSeverity) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystemLogging_SyslogSeverity_UNSET corresponds to the value UNSET of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_UNSET E_OpenconfigSystemLogging_SyslogSeverity = 0
	// OpenconfigSystemLogging_SyslogSeverity_EMERGENCY corresponds to the value EMERGENCY of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_EMERGENCY E_OpenconfigSystemLogging_SyslogSeverity = 1
	// OpenconfigSystemLogging_SyslogSeverity_ALERT corresponds to the value ALERT of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_ALERT E_OpenconfigSystemLogging_SyslogSeverity = 2
	// OpenconfigSystemLogging_SyslogSeverity_CRITICAL corresponds to the value CRITICAL of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_CRITICAL E_OpenconfigSystemLogging_SyslogSeverity = 3
	// OpenconfigSystemLogging_SyslogSeverity_ERROR corresponds to the value ERROR of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_ERROR E_OpenconfigSystemLogging_SyslogSeverity = 4
	// OpenconfigSystemLogging_SyslogSeverity_WARNING corresponds to the value WARNING of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_WARNING E_OpenconfigSystemLogging_SyslogSeverity = 5
	// OpenconfigSystemLogging_SyslogSeverity_NOTICE corresponds to the value NOTICE of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_NOTICE E_OpenconfigSystemLogging_SyslogSeverity = 6
	// OpenconfigSystemLogging_SyslogSeverity_INFORMATIONAL corresponds to the value INFORMATIONAL of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_INFORMATIONAL E_OpenconfigSystemLogging_SyslogSeverity = 7
	// OpenconfigSystemLogging_SyslogSeverity_DEBUG corresponds to the value DEBUG of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_DEBUG E_OpenconfigSystemLogging_SyslogSeverity = 8
)

// E_OpenconfigSystem_NTP_AUTH_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_NTP_AUTH_TYPE. An additional value named
// OpenconfigSystem_NTP_AUTH_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_NTP_AUTH_TYPE int64

// IsYANGGoEnum ensures that OpenconfigSystem_NTP_AUTH_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_NTP_AUTH_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_NTP_AUTH_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_NTP_AUTH_TYPE.
func (E_OpenconfigSystem_NTP_AUTH_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystem_NTP_AUTH_TYPE_UNSET corresponds to the value UNSET of OpenconfigSystem_NTP_AUTH_TYPE
	OpenconfigSystem_NTP_AUTH_TYPE_UNSET E_OpenconfigSystem_NTP_AUTH_TYPE = 0
	// OpenconfigSystem_NTP_AUTH_TYPE_NTP_AUTH_MD5 corresponds to the value NTP_AUTH_MD5 of OpenconfigSystem_NTP_AUTH_TYPE
	OpenconfigSystem_NTP_AUTH_TYPE_NTP_AUTH_MD5 E_OpenconfigSystem_NTP_AUTH_TYPE = 1
)

// E_OpenconfigWifiTypes_CHANGE_REASON_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigWifiTypes_CHANGE_REASON_TYPE. An additional value named
// OpenconfigWifiTypes_CHANGE_REASON_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigWifiTypes_CHANGE_REASON_TYPE int64

// IsYANGGoEnum ensures that OpenconfigWifiTypes_CHANGE_REASON_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigWifiTypes_CHANGE_REASON_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigWifiTypes_CHANGE_REASON_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigWifiTypes_CHANGE_REASON_TYPE.
func (E_OpenconfigWifiTypes_CHANGE_REASON_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigWifiTypes_CHANGE_REASON_TYPE_UNSET corresponds to the value UNSET of OpenconfigWifiTypes_CHANGE_REASON_TYPE
	OpenconfigWifiTypes_CHANGE_REASON_TYPE_UNSET E_OpenconfigWifiTypes_CHANGE_REASON_TYPE = 0
	// OpenconfigWifiTypes_CHANGE_REASON_TYPE_BETTER_CHANNEL corresponds to the value BETTER_CHANNEL of OpenconfigWifiTypes_CHANGE_REASON_TYPE
	OpenconfigWifiTypes_CHANGE_REASON_TYPE_BETTER_CHANNEL E_OpenconfigWifiTypes_CHANGE_REASON_TYPE = 1
	// OpenconfigWifiTypes_CHANGE_REASON_TYPE_DFS corresponds to the value DFS of OpenconfigWifiTypes_CHANGE_REASON_TYPE
	OpenconfigWifiTypes_CHANGE_REASON_TYPE_DFS E_OpenconfigWifiTypes_CHANGE_REASON_TYPE = 2
	// OpenconfigWifiTypes_CHANGE_REASON_TYPE_ERRORS corresponds to the value ERRORS of OpenconfigWifiTypes_CHANGE_REASON_TYPE
	OpenconfigWifiTypes_CHANGE_REASON_TYPE_ERRORS E_OpenconfigWifiTypes_CHANGE_REASON_TYPE = 3
	// OpenconfigWifiTypes_CHANGE_REASON_TYPE_NOISE corresponds to the value NOISE of OpenconfigWifiTypes_CHANGE_REASON_TYPE
	OpenconfigWifiTypes_CHANGE_REASON_TYPE_NOISE E_OpenconfigWifiTypes_CHANGE_REASON_TYPE = 4
)

// E_OpenconfigWifiTypes_CLIENT_CAPABILITIES is a derived int64 type which is used to represent
// the enumerated node OpenconfigWifiTypes_CLIENT_CAPABILITIES. An additional value named
// OpenconfigWifiTypes_CLIENT_CAPABILITIES_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigWifiTypes_CLIENT_CAPABILITIES int64

// IsYANGGoEnum ensures that OpenconfigWifiTypes_CLIENT_CAPABILITIES implements the yang.GoEnum
// interface. This ensures that OpenconfigWifiTypes_CLIENT_CAPABILITIES can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigWifiTypes_CLIENT_CAPABILITIES) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigWifiTypes_CLIENT_CAPABILITIES.
func (E_OpenconfigWifiTypes_CLIENT_CAPABILITIES) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigWifiTypes_CLIENT_CAPABILITIES_UNSET corresponds to the value UNSET of OpenconfigWifiTypes_CLIENT_CAPABILITIES
	OpenconfigWifiTypes_CLIENT_CAPABILITIES_UNSET E_OpenconfigWifiTypes_CLIENT_CAPABILITIES = 0
	// OpenconfigWifiTypes_CLIENT_CAPABILITIES_DOT_11R corresponds to the value DOT_11R of OpenconfigWifiTypes_CLIENT_CAPABILITIES
	OpenconfigWifiTypes_CLIENT_CAPABILITIES_DOT_11R E_OpenconfigWifiTypes_CLIENT_CAPABILITIES = 1
	// OpenconfigWifiTypes_CLIENT_CAPABILITIES_DOT_11V corresponds to the value DOT_11V of OpenconfigWifiTypes_CLIENT_CAPABILITIES
	OpenconfigWifiTypes_CLIENT_CAPABILITIES_DOT_11V E_OpenconfigWifiTypes_CLIENT_CAPABILITIES = 2
	// OpenconfigWifiTypes_CLIENT_CAPABILITIES_MU_BEAMFORMEE corresponds to the value MU_BEAMFORMEE of OpenconfigWifiTypes_CLIENT_CAPABILITIES
	OpenconfigWifiTypes_CLIENT_CAPABILITIES_MU_BEAMFORMEE E_OpenconfigWifiTypes_CLIENT_CAPABILITIES = 3
	// OpenconfigWifiTypes_CLIENT_CAPABILITIES_MU_BEAMFORMER corresponds to the value MU_BEAMFORMER of OpenconfigWifiTypes_CLIENT_CAPABILITIES
	OpenconfigWifiTypes_CLIENT_CAPABILITIES_MU_BEAMFORMER E_OpenconfigWifiTypes_CLIENT_CAPABILITIES = 4
)

// E_OpenconfigWifiTypes_CLIENT_STATE is a derived int64 type which is used to represent
// the enumerated node OpenconfigWifiTypes_CLIENT_STATE. An additional value named
// OpenconfigWifiTypes_CLIENT_STATE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigWifiTypes_CLIENT_STATE int64

// IsYANGGoEnum ensures that OpenconfigWifiTypes_CLIENT_STATE implements the yang.GoEnum
// interface. This ensures that OpenconfigWifiTypes_CLIENT_STATE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigWifiTypes_CLIENT_STATE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigWifiTypes_CLIENT_STATE.
func (E_OpenconfigWifiTypes_CLIENT_STATE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigWifiTypes_CLIENT_STATE_UNSET corresponds to the value UNSET of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_UNSET E_OpenconfigWifiTypes_CLIENT_STATE = 0
	// OpenconfigWifiTypes_CLIENT_STATE_ASSOCIATED corresponds to the value ASSOCIATED of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_ASSOCIATED E_OpenconfigWifiTypes_CLIENT_STATE = 1
	// OpenconfigWifiTypes_CLIENT_STATE_AUTHENTICATED corresponds to the value AUTHENTICATED of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_AUTHENTICATED E_OpenconfigWifiTypes_CLIENT_STATE = 2
	// OpenconfigWifiTypes_CLIENT_STATE_BLACKLISTED corresponds to the value BLACKLISTED of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_BLACKLISTED E_OpenconfigWifiTypes_CLIENT_STATE = 3
	// OpenconfigWifiTypes_CLIENT_STATE_DHCP_FAILURE corresponds to the value DHCP_FAILURE of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_DHCP_FAILURE E_OpenconfigWifiTypes_CLIENT_STATE = 4
	// OpenconfigWifiTypes_CLIENT_STATE_DHCP_REQD corresponds to the value DHCP_REQD of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_DHCP_REQD E_OpenconfigWifiTypes_CLIENT_STATE = 5
	// OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_FAILURE_REJECT corresponds to the value L2AUTH_FAILURE_REJECT of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_FAILURE_REJECT E_OpenconfigWifiTypes_CLIENT_STATE = 6
	// OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_FAILURE_TIMEOUT corresponds to the value L2AUTH_FAILURE_TIMEOUT of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_FAILURE_TIMEOUT E_OpenconfigWifiTypes_CLIENT_STATE = 7
	// OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_REQD corresponds to the value L2AUTH_REQD of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_L2AUTH_REQD E_OpenconfigWifiTypes_CLIENT_STATE = 8
	// OpenconfigWifiTypes_CLIENT_STATE_L3AUTH_FAILURE corresponds to the value L3AUTH_FAILURE of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_L3AUTH_FAILURE E_OpenconfigWifiTypes_CLIENT_STATE = 9
	// OpenconfigWifiTypes_CLIENT_STATE_L3AUTH_REQD corresponds to the value L3AUTH_REQD of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_L3AUTH_REQD E_OpenconfigWifiTypes_CLIENT_STATE = 10
	// OpenconfigWifiTypes_CLIENT_STATE_POWERSAVE corresponds to the value POWERSAVE of OpenconfigWifiTypes_CLIENT_STATE
	OpenconfigWifiTypes_CLIENT_STATE_POWERSAVE E_OpenconfigWifiTypes_CLIENT_STATE = 11
)

// E_OpenconfigWifiTypes_DATA_RATE is a derived int64 type which is used to represent
// the enumerated node OpenconfigWifiTypes_DATA_RATE. An additional value named
// OpenconfigWifiTypes_DATA_RATE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigWifiTypes_DATA_RATE int64

// IsYANGGoEnum ensures that OpenconfigWifiTypes_DATA_RATE implements the yang.GoEnum
// interface. This ensures that OpenconfigWifiTypes_DATA_RATE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigWifiTypes_DATA_RATE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigWifiTypes_DATA_RATE.
func (E_OpenconfigWifiTypes_DATA_RATE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

const (
	// OpenconfigWifiTypes_DATA_RATE_UNSET corresponds to the value UNSET of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_UNSET E_OpenconfigWifiTypes_DATA_RATE = 0
	// OpenconfigWifiTypes_DATA_RATE_RATE_11MB corresponds to the value RATE_11MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_11MB E_OpenconfigWifiTypes_DATA_RATE = 1
	// OpenconfigWifiTypes_DATA_RATE_RATE_12MB corresponds to the value RATE_12MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_12MB E_OpenconfigWifiTypes_DATA_RATE = 2
	// OpenconfigWifiTypes_DATA_RATE_RATE_18MB corresponds to the value RATE_18MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_18MB E_OpenconfigWifiTypes_DATA_RATE = 3
	// OpenconfigWifiTypes_DATA_RATE_RATE_1MB corresponds to the value RATE_1MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_1MB E_OpenconfigWifiTypes_DATA_RATE = 4
	// OpenconfigWifiTypes_DATA_RATE_RATE_24MB corresponds to the value RATE_24MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_24MB E_OpenconfigWifiTypes_DATA_RATE = 5
	// OpenconfigWifiTypes_DATA_RATE_RATE_2MB corresponds to the value RATE_2MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_2MB E_OpenconfigWifiTypes_DATA_RATE = 6
	// OpenconfigWifiTypes_DATA_RATE_RATE_36MB corresponds to the value RATE_36MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_36MB E_OpenconfigWifiTypes_DATA_RATE = 7
	// OpenconfigWifiTypes_DATA_RATE_RATE_48MB corresponds to the value RATE_48MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_48MB E_OpenconfigWifiTypes_DATA_RATE = 8
	// OpenconfigWifiTypes_DATA_RATE_RATE_5_5MB corresponds to the value RATE_5_5MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_5_5MB E_OpenconfigWifiTypes_DATA_RATE = 9
	// OpenconfigWifiTypes_DATA_RATE_RATE_54MB corresponds to the value RATE_54MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_54MB E_OpenconfigWifiTypes_DATA_RATE = 10
	// OpenconfigWifiTypes_DATA_RATE_RATE_6MB corresponds to the value RATE_6MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_6MB E_OpenconfigWifiTypes_DATA_RATE = 11
	// OpenconfigWifiTypes_DATA_RATE_RATE_9MB corresponds to the value RATE_9MB of OpenconfigWifiTypes_DATA_RATE
	OpenconfigWifiTypes_DATA_RATE_RATE_9MB E_OpenconfigWifiTypes_DATA_RATE = 12
)

// E_OpenconfigWifiTypes_OPERATING_FREQUENCY is a derived int64 type which is used to represent
// the enumerated node OpenconfigWifiTypes_OPERATING_FREQUENCY. An additional value named
// OpenconfigWifiTypes_OPERATING_FREQUENCY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigWifiTypes_OPERATING_FREQUENCY int64

// IsYANGGoEnum ensures that OpenconfigWifiTypes_OPERATING_FREQUENCY implements the yang.GoEnum
// interface. This ensures that OpenconfigWifiTypes_OPERATING_FREQUENCY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigWifiTypes_OPERATING_FREQUENCY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigWifiTypes_OPERATING_FREQUENCY.
func (E_OpenconfigWifiTypes_OPERATING_FREQUENCY) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigWifiTypes_OPERATING_FREQUENCY_UNSET corresponds to the value UNSET of OpenconfigWifiTypes_OPERATING_FREQUENCY
	OpenconfigWifiTypes_OPERATING_FREQUENCY_UNSET E_OpenconfigWifiTypes_OPERATING_FREQUENCY = 0
	// OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_2GHZ corresponds to the value FREQ_2GHZ of OpenconfigWifiTypes_OPERATING_FREQUENCY
	OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_2GHZ E_OpenconfigWifiTypes_OPERATING_FREQUENCY = 1
	// OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_2_5_GHZ corresponds to the value FREQ_2_5_GHZ of OpenconfigWifiTypes_OPERATING_FREQUENCY
	OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_2_5_GHZ E_OpenconfigWifiTypes_OPERATING_FREQUENCY = 2
	// OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_5GHZ corresponds to the value FREQ_5GHZ of OpenconfigWifiTypes_OPERATING_FREQUENCY
	OpenconfigWifiTypes_OPERATING_FREQUENCY_FREQ_5GHZ E_OpenconfigWifiTypes_OPERATING_FREQUENCY = 3
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE": {
		1: {Name: "AAA_ACCOUNTING_EVENT_COMMAND", DefiningModule: "openconfig-aaa-types"},
		2: {Name: "AAA_ACCOUNTING_EVENT_LOGIN", DefiningModule: "openconfig-aaa-types"},
		3: {Name: "AAA_AUTHORIZATION_EVENT_COMMAND", DefiningModule: "openconfig-aaa-types"},
		4: {Name: "AAA_AUTHORIZATION_EVENT_CONFIG", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE": {},
	"E_OpenconfigAaaTypes_AAA_METHOD_TYPE": {
		1: {Name: "LOCAL", DefiningModule: "openconfig-aaa-types"},
		2: {Name: "RADIUS_ALL", DefiningModule: "openconfig-aaa-types"},
		3: {Name: "TACACS_ALL", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAaaTypes_AAA_SERVER_TYPE": {
		1: {Name: "RADIUS", DefiningModule: "openconfig-aaa-radius"},
		2: {Name: "TACACS", DefiningModule: "openconfig-aaa-tacacs"},
	},
	"E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES": {
		1: {Name: "SYSTEM_ROLE_ADMIN", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode": {
		1: {Name: "A"},
		2: {Name: "B"},
		3: {Name: "G"},
		4: {Name: "N"},
		5: {Name: "AC"},
	},
	"E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode": {
		1: {Name: "OPEN"},
		2: {Name: "WPA2_PERSONAL"},
		3: {Name: "WPA2_ENTERPRISE"},
	},
	"E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod": {
		1: {Name: "OVA"},
		2: {Name: "ODS"},
	},
	"E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record": {
		1: {Name: "START_STOP"},
		2: {Name: "STOP"},
	},
	"E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index": {
		1: {Name: "ALL"},
	},
	"E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType": {
		1: {Name: "SERVER"},
		2: {Name: "PEER"},
		3: {Name: "POOL"},
	},
	"E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion": {
		1: {Name: "V2"},
		2: {Name: "V1"},
		3: {Name: "V1_V2"},
	},
	"E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY": {
		1: {Name: "CRITICAL", DefiningModule: "openconfig-alarm-types"},
		2: {Name: "MAJOR", DefiningModule: "openconfig-alarm-types"},
		3: {Name: "MINOR", DefiningModule: "openconfig-alarm-types"},
		4: {Name: "UNKNOWN", DefiningModule: "openconfig-alarm-types"},
		5: {Name: "WARNING", DefiningModule: "openconfig-alarm-types"},
	},
	"E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID": {
		1: {Name: "AIS", DefiningModule: "openconfig-alarm-types"},
		2: {Name: "EQPT", DefiningModule: "openconfig-alarm-types"},
		3: {Name: "LOS", DefiningModule: "openconfig-alarm-types"},
		4: {Name: "OTS", DefiningModule: "openconfig-alarm-types"},
	},
	"E_OpenconfigSystemLogging_SYSLOG_FACILITY": {
		1:  {Name: "ALL", DefiningModule: "openconfig-system-logging"},
		2:  {Name: "AUDIT", DefiningModule: "openconfig-system-logging"},
		3:  {Name: "AUTH", DefiningModule: "openconfig-system-logging"},
		4:  {Name: "AUTHPRIV", DefiningModule: "openconfig-system-logging"},
		5:  {Name: "CONSOLE", DefiningModule: "openconfig-system-logging"},
		6:  {Name: "KERNEL", DefiningModule: "openconfig-system-logging"},
		7:  {Name: "LOCAL0", DefiningModule: "openconfig-system-logging"},
		8:  {Name: "LOCAL1", DefiningModule: "openconfig-system-logging"},
		9:  {Name: "LOCAL2", DefiningModule: "openconfig-system-logging"},
		10: {Name: "LOCAL3", DefiningModule: "openconfig-system-logging"},
		11: {Name: "LOCAL4", DefiningModule: "openconfig-system-logging"},
		12: {Name: "LOCAL5", DefiningModule: "openconfig-system-logging"},
		13: {Name: "LOCAL6", DefiningModule: "openconfig-system-logging"},
		14: {Name: "LOCAL7", DefiningModule: "openconfig-system-logging"},
		15: {Name: "MAIL", DefiningModule: "openconfig-system-logging"},
		16: {Name: "NTP", DefiningModule: "openconfig-system-logging"},
		17: {Name: "SYSLOG", DefiningModule: "openconfig-system-logging"},
		18: {Name: "SYSTEM_DAEMON", DefiningModule: "openconfig-system-logging"},
		19: {Name: "USER", DefiningModule: "openconfig-system-logging"},
	},
	"E_OpenconfigSystemLogging_SyslogSeverity": {
		1: {Name: "EMERGENCY"},
		2: {Name: "ALERT"},
		3: {Name: "CRITICAL"},
		4: {Name: "ERROR"},
		5: {Name: "WARNING"},
		6: {Name: "NOTICE"},
		7: {Name: "INFORMATIONAL"},
		8: {Name: "DEBUG"},
	},
	"E_OpenconfigSystem_NTP_AUTH_TYPE": {
		1: {Name: "NTP_AUTH_MD5", DefiningModule: "openconfig-system"},
	},
	"E_OpenconfigWifiTypes_CHANGE_REASON_TYPE": {
		1: {Name: "BETTER-CHANNEL", DefiningModule: "openconfig-wifi-types"},
		2: {Name: "DFS", DefiningModule: "openconfig-wifi-types"},
		3: {Name: "ERRORS", DefiningModule: "openconfig-wifi-types"},
		4: {Name: "NOISE", DefiningModule: "openconfig-wifi-types"},
	},
	"E_OpenconfigWifiTypes_CLIENT_CAPABILITIES": {
		1: {Name: "DOT_11R", DefiningModule: "openconfig-wifi-types"},
		2: {Name: "DOT_11V", DefiningModule: "openconfig-wifi-types"},
		3: {Name: "MU_BEAMFORMEE", DefiningModule: "openconfig-wifi-types"},
		4: {Name: "MU_BEAMFORMER", DefiningModule: "openconfig-wifi-types"},
	},
	"E_OpenconfigWifiTypes_CLIENT_STATE": {
		1:  {Name: "ASSOCIATED", DefiningModule: "openconfig-wifi-types"},
		2:  {Name: "AUTHENTICATED", DefiningModule: "openconfig-wifi-types"},
		3:  {Name: "BLACKLISTED", DefiningModule: "openconfig-wifi-types"},
		4:  {Name: "DHCP_FAILURE", DefiningModule: "openconfig-wifi-types"},
		5:  {Name: "DHCP_REQD", DefiningModule: "openconfig-wifi-types"},
		6:  {Name: "L2AUTH_FAILURE_REJECT", DefiningModule: "openconfig-wifi-types"},
		7:  {Name: "L2AUTH_FAILURE_TIMEOUT", DefiningModule: "openconfig-wifi-types"},
		8:  {Name: "L2AUTH_REQD", DefiningModule: "openconfig-wifi-types"},
		9:  {Name: "L3AUTH_FAILURE", DefiningModule: "openconfig-wifi-types"},
		10: {Name: "L3AUTH_REQD", DefiningModule: "openconfig-wifi-types"},
		11: {Name: "POWERSAVE", DefiningModule: "openconfig-wifi-types"},
	},
	"E_OpenconfigWifiTypes_DATA_RATE": {
		1:  {Name: "RATE_11MB", DefiningModule: "openconfig-wifi-types"},
		2:  {Name: "RATE_12MB", DefiningModule: "openconfig-wifi-types"},
		3:  {Name: "RATE_18MB", DefiningModule: "openconfig-wifi-types"},
		4:  {Name: "RATE_1MB", DefiningModule: "openconfig-wifi-types"},
		5:  {Name: "RATE_24MB", DefiningModule: "openconfig-wifi-types"},
		6:  {Name: "RATE_2MB", DefiningModule: "openconfig-wifi-types"},
		7:  {Name: "RATE_36MB", DefiningModule: "openconfig-wifi-types"},
		8:  {Name: "RATE_48MB", DefiningModule: "openconfig-wifi-types"},
		9:  {Name: "RATE_5.5MB", DefiningModule: "openconfig-wifi-types"},
		10: {Name: "RATE_54MB", DefiningModule: "openconfig-wifi-types"},
		11: {Name: "RATE_6MB", DefiningModule: "openconfig-wifi-types"},
		12: {Name: "RATE_9MB", DefiningModule: "openconfig-wifi-types"},
	},
	"E_OpenconfigWifiTypes_OPERATING_FREQUENCY": {
		1: {Name: "FREQ_2GHZ", DefiningModule: "openconfig-wifi-types"},
		2: {Name: "FREQ_2_5_GHZ", DefiningModule: "openconfig-wifi-types"},
		3: {Name: "FREQ_5GHZ", DefiningModule: "openconfig-wifi-types"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xfd, 0x6d, 0x73, 0xda, 0x48,
		0xf6, 0xff, 0x8f, 0xdf, 0xf7, 0xa3, 0x70, 0x51, 0x7b, 0xc3, 0xde, 0xb2, 0x62, 0xc0, 0x80, 0x2f,
		0xee, 0x4c, 0x91, 0xd8, 0x99, 0xf1, 0x6f, 0x93, 0xd8, 0x1f, 0xc7, 0x33, 0xfb, 0x9f, 0x89, 0x59,
		0x4a, 0x01, 0xd9, 0xd1, 0x37, 0x20, 0x58, 0x49, 0x64, 0xe2, 0x4d, 0x78, 0xee, 0xff, 0xe2, 0xd2,
		0x17, 0x18, 0x1b, 0xa9, 0xcf, 0x91, 0x04, 0xbc, 0xa6, 0xb6, 0x36, 0x57, 0xa6, 0x25, 0xba, 0x4f,
		0xbf, 0xfb, 0x75, 0x4e, 0x9f, 0x3e, 0xfd, 0x63, 0x63, 0x73, 0x73, 0x73, 0x33, 0xf7, 0xc1, 0x6e,
		0x3b, 0xb9, 0xa3, 0xcd, 0x5c, 0xd3, 0xf9, 0xe6, 0x36, 0x9c, 0xdc, 0xce, 0xe8, 0x6f, 0xff, 0xe5,
		0x7a, 0xcd, 0xdc, 0xd1, 0x66, 0x61, 0xfc, 0xc7, 0x37, 0x1d, 0xef, 0xda, 0xbd, 0xc9, 0x1d, 0x6d,
		0xe6, 0xc7, 0x7f, 0x71, 0xec, 0xfa, 0xb9, 0xa3, 0xcd, 0x51, 0x13, 0xc3, 0xbf, 0xb0, 0x1b, 0x0d,
		0x27, 0x08, 0xac, 0x6e, 0xc7, 0xf5, 0xc2, 0xe0, 0xc1, 0x3f, 0x3d, 0x78, 0xca, 0xc3, 0x1f, 0xdb,
		0x79, 0xf8, 0x43, 0x0f, 0x1f, 0x3a, 0xfd, 0xeb, 0xc7, 0x0f, 0x9f, 0xfe, 0xc3, 0xb9, 0xef, 0x5c,
		0xbb, 0xdf, 0x67, 0x1e, 0xb6, 0xf0, 0x03, 0x87, 0x3f, 0xf8, 0xb1, 0xd3, 0xf3, 0x1b, 0xce, 0x93,
		0x8d, 0x8c, 0x5e, 0xca, 0xb9, 0xfd, 0xbb, 0xe3, 0x0f, 0xde, 0x2b, 0xd7, 0x1d, 0x3d, 0x6f, 0xe7,
		0xe9, 0x1f, 0xfc, 0xcd, 0x0e, 0xaa, 0xfe, 0x4d, 0xaf, 0xed, 0x78, 0x61, 0xee, 0x68, 0x33, 0xf4,
		0x7b, 0xce, 0x9c, 0x1f, 0xbc, 0xf7, 0x53, 0x8f, 0x5e, 0x6f, 0xe6, 0xe7, 0xfb, 0x0f, 0xfe, 0xa6,
		0xff, 0xe8, 0xfb, 0x3f, 0x1e, 0x84, 0x27, 0x07, 0x63, 0xfe, 0x37, 0x7b, 0xaa, 0x8b, 0xe6, 0x7d,
		0xb9, 0xa7, 0x87, 0xe6, 0xc5, 0x21, 0x5a, 0x64, 0xa8, 0x22, 0x0f, 0xd9, 0xa2, 0x43, 0x17, 0x79,
		0x08, 0x23, 0x0f, 0x65, 0x9c, 0x21, 0x7d, 0x7a, 0x68, 0xe7, 0x0c, 0xf1, 0x8b, 0x43, 0x7d, 0x37,
		0xe4, 0x41, 0xe0, 0xde, 0x78, 0x4e, 0xd3, 0xb2, 0xbb, 0x56, 0xdb, 0xf6, 0xec, 0x1b, 0xc7, 0x0f,
		0x5e, 0xee, 0x99, 0x69, 0x97, 0x3f, 0xf5, 0xe9, 0x17, 0xbe, 0xf3, 0xf3, 0x26, 0xb1, 0xb0, 0x69,
		0x44, 0x31, 0x91, 0xd8, 0xa6, 0x12, 0xd5, 0x64, 0x62, 0x9b, 0x4e, 0x6c, 0x13, 0x32, 0x31, 0xa5,
		0xe7, 0x4d, 0xea, 0x05, 0xd3, 0x5a, 0xd8, 0xc4, 0xee, 0x4c, 0x6d, 0x6a, 0x23, 0x8b, 0xf7, 0xe3,
		0x74, 0xc0, 0xee, 0x3e, 0xbb, 0x60, 0x7f, 0x2c, 0x66, 0x66, 0x91, 0xcd, 0x2d, 0x8e, 0xd9, 0x19,
		0x9b, 0x5f, 0x5c, 0x33, 0x34, 0x36, 0x47, 0x63, 0xb3, 0x94, 0x30, 0xcf, 0xc5, 0xcc, 0x74, 0x41,
		0x73, 0x8d, 0x6c, 0xb6, 0xd3, 0x0f, 0x34, 0x26, 0x16, 0x12, 0xb1, 0xef, 0x27, 0x83, 0x3e, 0xfe,
		0x7c, 0xc4, 0x7e, 0x8b, 0x66, 0xc6, 0xb1, 0xcd, 0xd9, 0xc4, 0xac, 0xc5, 0xcc, 0xdb, 0xd4, 0xcc,
		0xc5, 0xcc, 0x5d, 0xcc, 0xec, 0x25, 0xcd, 0x3f, 0xda, 0x34, 0x88, 0x38, 0x1d, 0x62, 0x4f, 0x8b,
		0x27, 0xd4, 0xdd, 0x72, 0xbb, 0xdf, 0x4a, 0x96, 0xdd, 0x6c, 0xfa, 0x4e, 0x10, 0xc4, 0x1f, 0xc4,
		0x59, 0xe9, 0x7f, 0xd8, 0x70, 0xcc, 0x91, 0x18, 0x4f, 0xa8, 0x7c, 0xcc, 0x8f, 0xc7, 0x9d, 0x58,
		0x12, 0x13, 0x4c, 0x7c, 0xa2, 0x49, 0x4d, 0x38, 0xf1, 0x89, 0x27, 0x3e, 0x01, 0x35, 0x26, 0x62,
		0xbc, 0x09, 0x19, 0x73, 0x62, 0x4e, 0xbf, 0xc0, 0xe5, 0x6d, 0xd7, 0x91, 0xb1, 0x1e, 0x81, 0xd9,
		0xf4, 0x60, 0x89, 0x3a, 0x30, 0x68, 0xe3, 0xdc, 0x0e, 0x43, 0xc7, 0xf7, 0x72, 0x47, 0x9b, 0x9f,
		0xcc, 0xc6, 0xf7, 0x3f, 0x5b, 0x5b, 0x9f, 0xf2, 0xd6, 0x61, 0xed, 0xe7, 0xa7, 0x82, 0x75, 0x58,
		0x1b, 0xfd, 0xb6, 0x30, 0xfc, 0x65, 0xf4, 0xfb, 0xe2, 0xa7, 0xbc, 0x55, 0x9a, 0xfc, 0xbe, 0xfc,
		0x29, 0x6f, 0x95, 0x6b, 0xdb, 0x57, 0x57, 0xaf, 0xb6, 0x7f, 0xec, 0xf5, 0xa3, 0x7f, 0xf0, 0x1f,
		0xf1, 0x8d, 0xa6, 0xb6, 0x91, 0x8c, 0xa9, 0xc5, 0x30, 0xb3, 0x47, 0x8a, 0x5b, 0xd1, 0x92, 0xf2,
		0x0a, 0x52, 0x8e, 0x94, 0x23, 0xe5, 0x42, 0x52, 0x5e, 0x59, 0x55, 0x29, 0xb7, 0xad, 0xeb, 0xaa,
		0xf5, 0xb6, 0xf6, 0xa3, 0xb0, 0x53, 0xea, 0x1f, 0x6d, 0xff, 0xd8, 0xef, 0x3f, 0xfe, 0xcb, 0x9f,
		0x4f, 0xfd, 0x58, 0x61, 0x67, 0xbf, 0x7f, 0x34, 0xe7, 0x5f, 0x2a, 0xfd, 0xa3, 0x05, 0xdb, 0x28,
		0xf7, 0xb7, 0x66, 0x7e, 0x74, 0xf0, 0xf7, 0xc5, 0x79, 0x1f, 0x28, 0xcd, 0xf9, 0xc0, 0xde, 0xbc,
		0x0f, 0xec, 0xcd, 0xf9, 0xc0, 0xdc, 0x57, 0x2a, 0xce, 0xf9, 0x40, 0xb9, 0xff, 0x73, 0xe6, 0xe7,
		0xb7, 0x9e, 0xfe, 0xd1, 0x4a, 0x7f, 0xfb, 0xe7, 0xbc, 0x7f, 0xdb, 0xef, 0xff, 0x3c, 0xda, 0x4e,
		0x61, 0x61, 0x8b, 0x39, 0x85, 0xde, 0xb9, 0x41, 0x58, 0x0d, 0x43, 0xdf, 0x6c, 0x1a, 0xbd, 0x77,
		0xbd, 0x93, 0x96, 0x33, 0xd0, 0x92, 0xc1, 0x22, 0xe7, 0xf5, 0x5a, 0x2d, 0x03, 0xfb, 0x7f, 0x6f,
		0x7f, 0x97, 0x6b, 0xec, 0xcc, 0x6f, 0x3a, 0xbe, 0xd3, 0x7c, 0x7d, 0x3b, 0x6e, 0x2a, 0xc3, 0xd4,
		0x70, 0xfd, 0xdf, 0xa6, 0x67, 0x8e, 0x08, 0xc3, 0x56, 0xe0, 0x01, 0x78, 0x00, 0x1e, 0x30, 0xb0,
		0x9e, 0x66, 0xa7, 0x6d, 0xbb, 0x9e, 0xe5, 0x0d, 0xfe, 0x98, 0x32, 0x0e, 0xbc, 0x73, 0xbc, 0x9b,
		0xf0, 0x8b, 0x31, 0x0d, 0x98, 0x59, 0xef, 0x44, 0xe5, 0x8d, 0xa7, 0x81, 0x90, 0xd6, 0xcc, 0x34,
		0xf7, 0x87, 0xdd, 0xea, 0x39, 0xd1, 0xe3, 0xbc, 0x73, 0xdb, 0x7b, 0xeb, 0xdb, 0x8d, 0xd0, 0xed,
		0x78, 0xc7, 0xee, 0x8d, 0x3b, 0x5c, 0x87, 0xf2, 0xc6, 0xed, 0xf6, 0x77, 0x04, 0x86, 0xc0, 0xfe,
		0x9e, 0xf9, 0x21, 0x28, 0x96, 0xf7, 0x32, 0x3c, 0x08, 0x1b, 0xe9, 0x7c, 0xba, 0x96, 0x05, 0x87,
		0x60, 0x6b, 0x6b, 0xeb, 0x93, 0x6d, 0xfd, 0xaf, 0x6a, 0xfd, 0x95, 0xb7, 0x0e, 0xeb, 0xb5, 0x7b,
		0x7f, 0xb8, 0xba, 0xb2, 0xea, 0xb5, 0xed, 0x1f, 0xf9, 0x9d, 0x4a, 0xa1, 0xbf, 0xfd, 0xcb, 0xdd,
		0xdf, 0xd7, 0xae, 0xae, 0x5e, 0x6d, 0xff, 0x33, 0xce, 0xa7, 0x7e, 0xd9, 0xfe, 0x79, 0x75, 0xf5,
		0x6a, 0x35, 0xe3, 0x3b, 0x6e, 0xd3, 0x9c, 0xd3, 0xdc, 0x26, 0x94, 0x06, 0xa5, 0x41, 0x69, 0x26,
		0xd6, 0x13, 0x84, 0xbe, 0xeb, 0xdd, 0x88, 0x00, 0x5a, 0x52, 0x6a, 0xa3, 0xba, 0xf7, 0x58, 0xf5,
		0xbc, 0x4e, 0x68, 0x0f, 0x56, 0xcc, 0x78, 0x5b, 0x90, 0x41, 0xe3, 0x8b, 0xd3, 0xb6, 0xbb, 0xf6,
		0x10, 0x37, 0x73, 0xbb, 0x9d, 0xae, 0xe3, 0x8d, 0x36, 0xdd, 0xad, 0x07, 0x86, 0xb6, 0x3b, 0xff,
		0x4f, 0xbb, 0x4f, 0x25, 0x34, 0xed, 0xde, 0xfd, 0x7e, 0x37, 0xd6, 0x26, 0xfe, 0xe8, 0xe5, 0x42,
		0xbf, 0xd7, 0x08, 0xbd, 0xf1, 0xd0, 0x9f, 0x4d, 0xdf, 0xad, 0x3a, 0x7c, 0xfc, 0xf9, 0xf0, 0x5d,
		0xea, 0xf3, 0xfe, 0x50, 0xaf, 0x8e, 0xdf, 0xab, 0xda, 0x7d, 0x3f, 0x7e, 0xab, 0xfa, 0xf4, 0xb7,
		0xf5, 0xb1, 0x24, 0x6e, 0xe8, 0x8c, 0x64, 0x84, 0x51, 0x8c, 0xb3, 0xb2, 0xc4, 0x5f, 0x51, 0x62,
		0xae, 0x24, 0xe4, 0x46, 0x90, 0x1b, 0x11, 0x4f, 0x9f, 0x62, 0x2b, 0xff, 0x74, 0xf4, 0x5b, 0x8e,
		0x7d, 0xed, 0x3b, 0xd7, 0x71, 0xc6, 0x7d, 0x22, 0xf5, 0xfb, 0x31, 0x3e, 0x7b, 0x3e, 0x96, 0xc4,
		0x57, 0xaf, 0xc6, 0x02, 0xb6, 0xeb, 0x36, 0xb3, 0x20, 0x17, 0x41, 0x68, 0x87, 0x4e, 0x7c, 0xc5,
		0x18, 0x7d, 0x3c, 0xe1, 0x84, 0xaa, 0x22, 0xa2, 0x81, 0x68, 0x44, 0x78, 0x51, 0x12, 0xaa, 0xf0,
		0xe7, 0xf0, 0xe7, 0xd6, 0xc2, 0x9f, 0x23, 0xa1, 0x8a, 0x84, 0xaa, 0x05, 0xa4, 0x9c, 0x84, 0x2a,
		0xa4, 0x1c, 0x29, 0xcf, 0xbc, 0x94, 0x93, 0x50, 0x45, 0x42, 0x15, 0x09, 0x55, 0xf1, 0x2c, 0x8d,
		0x84, 0x2a, 0x01, 0x6a, 0x20, 0xa1, 0x0a, 0x1e, 0x80, 0x07, 0x36, 0x49, 0xa8, 0x7a, 0xa4, 0xd0,
		0x24, 0x54, 0x2d, 0xd0, 0x1c, 0x09, 0x55, 0x99, 0x19, 0x02, 0x12, 0xaa, 0x9e, 0xa2, 0x3a, 0x12,
		0xaa, 0x56, 0x27, 0xbe, 0x43, 0x42, 0x15, 0x94, 0x06, 0xa5, 0x91, 0x50, 0x95, 0x8c, 0xda, 0xfc,
		0xbf, 0x8e, 0xeb, 0x39, 0x02, 0x8a, 0x33, 0x6e, 0x07, 0xd5, 0x41, 0x75, 0x50, 0x1d, 0x03, 0xeb,
		0xf9, 0xdc, 0xe9, 0xb4, 0x1c, 0xdb, 0x93, 0x90, 0x9d, 0x02, 0x79, 0x9c, 0xc9, 0xe4, 0x71, 0xc6,
		0x49, 0x1d, 0xda, 0x54, 0x4e, 0xe3, 0xfc, 0x38, 0x7c, 0x27, 0xad, 0xb4, 0x2c, 0xd1, 0xe2, 0x59,
		0xff, 0x72, 0x6e, 0x23, 0x31, 0x6b, 0xbc, 0xb0, 0xb2, 0x51, 0x18, 0xd9, 0x28, 0x6c, 0x1c, 0x2f,
		0x4c, 0xbc, 0x68, 0xef, 0xc5, 0x9c, 0x1f, 0x09, 0xcc, 0x8b, 0x5c, 0xa4, 0xe4, 0x3d, 0xad, 0x99,
		0xb0, 0xd8, 0x1c, 0xe8, 0x2b, 0xd7, 0x35, 0x8c, 0x38, 0x4a, 0x5a, 0xa3, 0xb3, 0x48, 0x75, 0x4a,
		0xe9, 0xa1, 0x78, 0x7e, 0x00, 0xe6, 0x77, 0xeb, 0x33, 0x5d, 0x9a, 0xfb, 0x1c, 0x04, 0x6e, 0x33,
		0x42, 0x69, 0xd1, 0xf1, 0xcf, 0x2f, 0x41, 0x31, 0xd1, 0x4e, 0xc3, 0xfa, 0xdb, 0xbd, 0x76, 0xad,
		0xb6, 0xdd, 0x58, 0xbd, 0x52, 0xa2, 0xf7, 0xbf, 0x5c, 0x56, 0x0a, 0x89, 0x0e, 0x4d, 0x23, 0x7a,
		0x0d, 0xd1, 0xd1, 0xc7, 0x94, 0xcb, 0x87, 0x16, 0x13, 0x28, 0x1f, 0x1a, 0xcd, 0xe0, 0x4c, 0x9d,
		0x93, 0x8c, 0x15, 0x0f, 0x8d, 0x64, 0x90, 0x3a, 0xf4, 0x13, 0xb9, 0x74, 0x68, 0x34, 0x83, 0x35,
		0x32, 0x5c, 0x43, 0xff, 0x3c, 0xdd, 0x3c, 0xf7, 0x78, 0x86, 0x2d, 0xe5, 0x7d, 0x67, 0x3c, 0xcb,
		0x3d, 0x96, 0xe1, 0x27, 0xe3, 0xf0, 0xad, 0xc2, 0xc1, 0x98, 0xa1, 0x47, 0xb8, 0x3b, 0x9a, 0x6a,
		0x1c, 0x8d, 0x41, 0x32, 0x90, 0x8c, 0x6c, 0x1e, 0x8b, 0x89, 0xb7, 0x96, 0x8a, 0xac, 0xa9, 0x2b,
		0x19, 0xfb, 0x36, 0x9b, 0x40, 0x6b, 0x1e, 0xf9, 0x36, 0x9a, 0x60, 0xcb, 0x1e, 0xf7, 0x6e, 0xdb,
		0x8d, 0xd5, 0x4b, 0x91, 0xbe, 0x9f, 0xc2, 0xfb, 0x38, 0x33, 0xb8, 0xd8, 0xdf, 0xfe, 0x51, 0xee,
		0xaf, 0xe8, 0x19, 0x95, 0x46, 0xa7, 0xe7, 0x85, 0x8b, 0x5c, 0xfe, 0xf2, 0xa2, 0x5d, 0x4c, 0x5b,
		0x32, 0x53, 0xd7, 0x82, 0xa9, 0xba, 0x16, 0x51, 0x57, 0xd4, 0x35, 0x61, 0x75, 0x8d, 0x8b, 0x35,
		0xd3, 0x06, 0xfc, 0xef, 0xd6, 0xe7, 0xdb, 0xd0, 0x09, 0xac, 0xa6, 0x1d, 0xda, 0xe6, 0x03, 0x3e,
		0xb1, 0xc3, 0x87, 0xcd, 0x1a, 0x8e, 0x91, 0x4c, 0x9e, 0xa0, 0x31, 0x06, 0x49, 0x4e, 0x58, 0xa5,
		0x89, 0x2b, 0x3d, 0x81, 0xd5, 0x26, 0xb2, 0xda, 0x84, 0xd6, 0x9b, 0xd8, 0x66, 0x13, 0xdc, 0x70,
		0xa2, 0xcb, 0xe1, 0xd4, 0xbc, 0xe5, 0xb3, 0x52, 0x92, 0xb0, 0xbb, 0xf1, 0x54, 0x3d, 0x10, 0x68,
		0xea, 0xc2, 0xf6, 0x6e, 0x1c, 0x63, 0xc2, 0x9a, 0xfc, 0x27, 0x33, 0x0f, 0x36, 0xa5, 0xd3, 0xd0,
		0x85, 0x35, 0x6e, 0xa6, 0xd9, 0x49, 0x4e, 0xb4, 0x74, 0xbb, 0x0a, 0x99, 0xd1, 0x42, 0x33, 0xe4,
		0xe1, 0x50, 0x09, 0xa6, 0xab, 0x27, 0x35, 0x54, 0x85, 0x83, 0x52, 0xa9, 0xb2, 0x5f, 0x2a, 0xe5,
		0xf7, 0xf7, 0xf6, 0xf3, 0x87, 0xe5, 0x72, 0xa1, 0x52, 0x28, 0x2f, 0xd1, 0xe8, 0x6d, 0x64, 0xa3,
		0x95, 0x5a, 0x4a, 0x79, 0xf6, 0x06, 0xd6, 0x3b, 0x80, 0xa6, 0x46, 0xc7, 0x0b, 0xfd, 0x4e, 0x4b,
		0x14, 0xc4, 0x26, 0x6d, 0x42, 0x61, 0x50, 0x18, 0x14, 0x06, 0x85, 0x41, 0x61, 0x50, 0x18, 0x14,
		0x06, 0x85, 0x41, 0x61, 0xf3, 0x28, 0xac, 0x69, 0x87, 0xb6, 0xd5, 0x74, 0x83, 0x50, 0x94, 0xc3,
		0xee, 0x5a, 0x95, 0x21, 0xb1, 0x02, 0x24, 0x06, 0x89, 0xad, 0x3b, 0x89, 0x99, 0x06, 0xc0, 0xef,
		0x4f, 0xfb, 0xbc, 0x55, 0x29, 0xc9, 0x99, 0xc8, 0xbd, 0x99, 0x3f, 0x6c, 0x78, 0x27, 0x93, 0x87,
		0xe6, 0xa5, 0x44, 0x40, 0x43, 0x0c, 0x94, 0x45, 0x41, 0x4b, 0x1c, 0xd4, 0x45, 0x42, 0x5d, 0x2c,
		0xf4, 0x45, 0x43, 0x18, 0x54, 0x84, 0x6c, 0x57, 0xcc, 0xad, 0x53, 0x75, 0xef, 0x14, 0xdc, 0x3c,
		0x25, 0x77, 0x4f, 0xde, 0xed, 0x53, 0x75, 0xff, 0x94, 0x7d, 0x0b, 0x6d, 0x77, 0x30, 0x09, 0xc7,
		0x42, 0xc1, 0x3d, 0x54, 0x75, 0x13, 0x93, 0x1e, 0x52, 0x7d, 0xb7, 0x31, 0xd1, 0x51, 0xde, 0xc8,
		0x66, 0x6b, 0xb5, 0x8c, 0xb8, 0xb7, 0x12, 0x15, 0x95, 0xfc, 0xef, 0x56, 0x21, 0x5f, 0x2c, 0x5b,
		0xc5, 0x7c, 0xe9, 0x40, 0x05, 0x3e, 0xef, 0x5a, 0x87, 0x40, 0x21, 0x50, 0x08, 0x14, 0x02, 0x85,
		0x40, 0x21, 0x50, 0x08, 0x14, 0x02, 0x85, 0x40, 0x21, 0xd0, 0x31, 0x81, 0x16, 0x0f, 0xad, 0x62,
		0xb9, 0xa2, 0xc3, 0x9f, 0xe3, 0xb6, 0xa1, 0x4f, 0xe8, 0x13, 0xfa, 0x84, 0x3e, 0xa1, 0x4f, 0xe8,
		0x13, 0xfa, 0x84, 0x3e, 0xa1, 0x4f, 0xe8, 0x73, 0x4c, 0x9f, 0x7b, 0x85, 0xfc, 0xfe, 0x9e, 0x55,
		0xac, 0x14, 0x0b, 0x25, 0x9d, 0x0d, 0xf8, 0x87, 0x4f, 0x80, 0x44, 0x21, 0x51, 0x48, 0x14, 0x12,
		0x85, 0x44, 0x21, 0x51, 0x48, 0x14, 0x12, 0x85, 0x44, 0x21, 0xd1, 0x31, 0x89, 0x56, 0xf6, 0x0e,
		0xca, 0xd6, 0x5e, 0x71, 0xbf, 0xa2, 0xb4, 0x17, 0x7f, 0xaf, 0x7d, 0x28, 0x14, 0x0a, 0x85, 0x42,
		0xa1, 0x50, 0x28, 0x14, 0x0a, 0x85, 0x42, 0xa1, 0x50, 0x28, 0x14, 0x0a, 0x1d, 0x51, 0x68, 0x31,
		0x5f, 0x3a, 0xb4, 0x4a, 0xf9, 0x43, 0x9d, 0xfd, 0xf8, 0xbb, 0xd6, 0x21, 0x50, 0x08, 0x14, 0x02,
		0x85, 0x40, 0x21, 0x50, 0x08, 0x14, 0x02, 0x85, 0x40, 0x21, 0x50, 0x08, 0x74, 0x4c, 0xa0, 0xe5,
		0x7d, 0xab, 0x5c, 0x28, 0xea, 0xf0, 0xe7, 0xb8, 0x6d, 0xe8, 0x13, 0xfa, 0x84, 0x3e, 0xa1, 0x4f,
		0xe8, 0x13, 0xfa, 0x84, 0x3e, 0xa1, 0x4f, 0xe8, 0x13, 0xfa, 0x1c, 0xd3, 0x67, 0xa5, 0x58, 0x28,
		0x95, 0xad, 0x72, 0xb1, 0x54, 0x3c, 0xd0, 0xd9, 0x87, 0x7f, 0xf8, 0x04, 0x48, 0x14, 0x12, 0x85,
		0x44, 0x21, 0x51, 0x48, 0x14, 0x12, 0x85, 0x44, 0x21, 0x51, 0x48, 0x14, 0x12, 0x1d, 0x91, 0xe8,
		0x5e, 0x71, 0xbf, 0x72, 0x68, 0x55, 0xca, 0xe5, 0x3d, 0x9d, 0xbd, 0xf8, 0xfb, 0xed, 0x43, 0xa1,
		0x50, 0x28, 0x14, 0x0a, 0x85, 0x42, 0xa1, 0x50, 0x28, 0x14, 0x0a, 0x85, 0x42, 0xa1, 0x50, 0xe8,
		0x88, 0x42, 0x4b, 0xf9, 0xc3, 0x7d, 0xeb, 0xa0, 0x70, 0xa8, 0xb3, 0x1f, 0x7f, 0xd7, 0x3a, 0x04,
		0x0a, 0x81, 0x42, 0xa0, 0x10, 0x28, 0x04, 0x0a, 0x81, 0x42, 0xa0, 0x10, 0x28, 0x04, 0x0a, 0x81,
		0x8e, 0x08, 0xb4, 0x5c, 0xd8, 0xb3, 0x0a, 0xf9, 0xa2, 0x4e, 0x71, 0xa6, 0x69, 0xe3, 0xf0, 0x27,
		0xfc, 0x09, 0x7f, 0xc2, 0x9f, 0xf0, 0x27, 0xfc, 0x09, 0x7f, 0xc2, 0x9f, 0xf0, 0x27, 0xfc, 0x39,
		0xe6, 0xcf, 0x62, 0xa9, 0x78, 0x70, 0x68, 0x15, 0xf2, 0xa5, 0x83, 0xf2, 0xbe, 0xce, 0x56, 0xfc,
		0xa3, 0x47, 0xc0, 0xa2, 0xb0, 0x28, 0x2c, 0x0a, 0x8b, 0xc2, 0xa2, 0xb0, 0x28, 0x2c, 0x0a, 0x8b,
		0xc2, 0xa2, 0xb0, 0xe8, 0x88, 0x45, 0x2b, 0x65, 0xab, 0x50, 0xd4, 0x39, 0x96, 0x34, 0x6e, 0x1a,
		0xf6, 0x84, 0x3d, 0x61, 0x4f, 0xd8, 0x13, 0xf6, 0x84, 0x3d, 0x61, 0x4f, 0xd8, 0x13, 0xf6, 0x84,
		0x3d, 0x27, 0xec, 0x59, 0xde, 0xdb, 0x1f, 0xdd, 0x66, 0x54, 0x54, 0x22, 0xd0, 0x7b, 0x0f, 0x80,
		0x43, 0xe1, 0x50, 0x38, 0x14, 0x0e, 0x85, 0x43, 0xe1, 0x50, 0x38, 0x14, 0x0e, 0x85, 0x43, 0xe1,
		0xd0, 0x11, 0x87, 0x1e, 0x14, 0x0e, 0xf7, 0x86, 0x97, 0x19, 0xe9, 0x64, 0x84, 0xde, 0x6b, 0x1e,
		0x06, 0x85, 0x41, 0x61, 0x50, 0x18, 0x14, 0x06, 0x85, 0x41, 0x61, 0x50, 0x18, 0x14, 0x06, 0x5d,
		0x7e, 0x06, 0xdd, 0x48, 0x71, 0x0e, 0xe5, 0xaa, 0x9e, 0xd7, 0x09, 0xed, 0x81, 0x09, 0x88, 0x4c,
		0x9b, 0x5c, 0xd0, 0xf8, 0xe2, 0xb4, 0xed, 0xae, 0x1d, 0x7e, 0x19, 0xac, 0x58, 0xbb, 0x9d, 0xae,
		0xe3, 0x35, 0x86, 0x74, 0x68, 0xd9, 0x8d, 0x86, 0x13, 0x04, 0x56, 0xb7, 0xe3, 0x7a, 0x61, 0xb0,
		0x3b, 0xff, 0x4f, 0xbb, 0x9f, 0x83, 0xc0, 0x6d, 0x06, 0xa3, 0x5f, 0x76, 0x83, 0xd0, 0x0e, 0x9d,
		0xdd, 0xf1, 0xca, 0x17, 0xec, 0xfa, 0xdf, 0xad, 0xa6, 0x1d, 0xda, 0x56, 0xd3, 0x0d, 0x42, 0x81,
		0x55, 0x30, 0x17, 0x84, 0x7e, 0xaf, 0x11, 0x7a, 0xe3, 0x05, 0xf6, 0x6c, 0xfa, 0xb6, 0xd5, 0xe1,
		0x0b, 0x9d, 0x0f, 0xdf, 0xae, 0x3e, 0xef, 0x0f, 0xf5, 0xd7, 0xc3, 0x37, 0x1d, 0xfd, 0x52, 0xff,
		0x38, 0x78, 0xd3, 0xfa, 0x9b, 0xf1, 0x9b, 0xd6, 0x2f, 0xbe, 0x1f, 0xdb, 0xa1, 0x7d, 0x3c, 0x78,
		0xcf, 0x8d, 0x74, 0xcc, 0xc3, 0xc0, 0x34, 0x72, 0x93, 0x7e, 0xfe, 0xbb, 0xdd, 0x36, 0xb6, 0x8b,
		0xfb, 0xae, 0xcc, 0xb4, 0x51, 0x43, 0xb3, 0x1d, 0x2b, 0x71, 0xc1, 0xb0, 0x19, 0x29, 0xc7, 0x45,
		0xd2, 0x61, 0x51, 0x72, 0x54, 0xa4, 0x1d, 0x14, 0x35, 0xc7, 0x44, 0xcd, 0x21, 0xd1, 0x73, 0x44,
		0xd2, 0x95, 0xf0, 0x63, 0xd7, 0x97, 0x31, 0xbc, 0xcf, 0x8e, 0x7c, 0xf8, 0xe2, 0xb3, 0x43, 0xcc,
		0x82, 0x98, 0x05, 0x31, 0x0b, 0x62, 0x16, 0xc4, 0x2c, 0x88, 0x59, 0x10, 0xb3, 0x20, 0x66, 0x41,
		0xcc, 0x62, 0x05, 0x62, 0x16, 0x02, 0xfe, 0xc8, 0xe7, 0xaf, 0x0a, 0xb4, 0xf9, 0x15, 0xda, 0x84,
		0x36, 0xa1, 0x4d, 0x68, 0x13, 0xda, 0x84, 0x36, 0xa1, 0x4d, 0x68, 0x13, 0xda, 0x84, 0x36, 0x07,
		0xc3, 0xf8, 0xcd, 0x95, 0xa7, 0xcd, 0x6f, 0x2e, 0xb4, 0x09, 0x6d, 0x42, 0x9b, 0xd0, 0x26, 0xb4,
		0x09, 0x6d, 0x42, 0x9b, 0xd0, 0x26, 0xb4, 0x09, 0x6d, 0x0e, 0x69, 0xb3, 0xa3, 0x40, 0x9b, 0x1d,
		0x68, 0x13, 0xda, 0x84, 0x36, 0xa1, 0x4d, 0x68, 0x13, 0xda, 0x84, 0x36, 0xa1, 0x4d, 0x68, 0x73,
		0x05, 0x68, 0x93, 0xec, 0xff, 0xe8, 0xd9, 0xff, 0xe6, 0x09, 0xe4, 0x9b, 0x49, 0x24, 0xff, 0xff,
		0xbb, 0xdd, 0x5e, 0xd2, 0xdc, 0xff, 0x76, 0x23, 0x10, 0x4d, 0xfb, 0x1f, 0xb4, 0x47, 0xc6, 0x7f,
		0xc2, 0xce, 0x09, 0x19, 0xff, 0x64, 0xfc, 0xbf, 0xd0, 0x50, 0xbb, 0x11, 0xe4, 0xe5, 0x23, 0x15,
		0xc3, 0x56, 0x89, 0x55, 0x10, 0xab, 0x20, 0x56, 0x41, 0xac, 0x82, 0x58, 0x05, 0xb1, 0x0a, 0x62,
		0x15, 0xc4, 0x2a, 0x88, 0x55, 0x2c, 0x7f, 0xac, 0x62, 0x47, 0x84, 0x38, 0x0b, 0x2a, 0xc4, 0x59,
		0x80, 0x38, 0x21, 0x4e, 0x88, 0x13, 0xe2, 0x84, 0x38, 0x21, 0x4e, 0x88, 0x13, 0xe2, 0x84, 0x38,
		0x21, 0xce, 0x31, 0x71, 0x16, 0x55, 0x88, 0x93, 0x1b, 0x01, 0x20, 0x4e, 0x88, 0x13, 0xe2, 0x84,
		0x38, 0x21, 0x4e, 0x88, 0x13, 0xe2, 0x84, 0x38, 0x21, 0xce, 0x09, 0x71, 0xee, 0xa9, 0x10, 0xe7,
		0x1e, 0xc4, 0x09, 0x71, 0x42, 0x9c, 0x10, 0x27, 0xc4, 0x09, 0x71, 0x42, 0x9c, 0x10, 0x27, 0xc4,
		0x09, 0x71, 0x8e, 0x89, 0xb3, 0xa4, 0x42, 0x9c, 0xdc, 0x38, 0x05, 0x71, 0x42, 0x9c, 0x10, 0x27,
		0xc4, 0x09, 0x71, 0x42, 0x9c, 0x10, 0x27, 0xc4, 0x09, 0x71, 0x4e, 0x88, 0xb3, 0xac, 0x42, 0x9c,
		0x65, 0x88, 0x13, 0xe2, 0x84, 0x38, 0x21, 0x4e, 0x88, 0x13, 0xe2, 0x84, 0x38, 0x21, 0x4e, 0x88,
		0x13, 0xe2, 0x1c, 0x13, 0x67, 0x45, 0x85, 0x38, 0x2b, 0x10, 0x27, 0xc4, 0x09, 0x71, 0x42, 0x9c,
		0x10, 0x27, 0xc4, 0x09, 0x71, 0x42, 0x9c, 0x10, 0x27, 0xc4, 0x39, 0x26, 0xce, 0x7d, 0x15, 0xe2,
		0xdc, 0x87, 0x38, 0x21, 0x4e, 0x88, 0x13, 0xe2, 0x84, 0x38, 0x21, 0x4e, 0x88, 0x13, 0xe2, 0x84,
		0x38, 0x21, 0xce, 0x31, 0x71, 0x1e, 0xa8, 0x10, 0xe7, 0x01, 0xc4, 0x09, 0x71, 0x42, 0x9c, 0x10,
		0x27, 0xc4, 0x09, 0x71, 0x42, 0x9c, 0x10, 0x27, 0xc4, 0x09, 0x71, 0x8e, 0x89, 0xf3, 0x50, 0x85,
		0x38, 0x0f, 0x21, 0x4e, 0x88, 0x13, 0xe2, 0x84, 0x38, 0x21, 0x4e, 0x88, 0x13, 0xe2, 0x84, 0x38,
		0x21, 0xce, 0x15, 0x20, 0x4e, 0x6e, 0xab, 0x8b, 0x74, 0x5b, 0x9d, 0xf9, 0xbd, 0x67, 0x9b, 0xda,
		0x17, 0xd5, 0xbd, 0x6f, 0x04, 0xcb, 0x7a, 0x49, 0xdd, 0x4d, 0x3b, 0x94, 0xbd, 0xa5, 0x6e, 0xd0,
		0xa0, 0xcc, 0x35, 0x75, 0x79, 0xae, 0xa9, 0x4b, 0xcb, 0x1b, 0xe1, 0x9a, 0xba, 0xac, 0xe8, 0xb5,
		0x98, 0x77, 0xa1, 0xe2, 0x55, 0x08, 0x7a, 0x13, 0xc2, 0x5e, 0x84, 0xa0, 0x3b, 0xa6, 0xe1, 0x35,
		0x28, 0xa1, 0xa5, 0x96, 0x97, 0xa0, 0xc9, 0x8d, 0x82, 0x5e, 0x81, 0x8a, 0x37, 0xa0, 0x3d, 0x54,
		0xfa, 0xf4, 0xaf, 0x3a, 0x7a, 0x19, 0xa1, 0xea, 0xda, 0x72, 0xf2, 0x97, 0xef, 0x84, 0xbe, 0xeb,
		0xc8, 0x5e, 0x14, 0x3c, 0x69, 0x13, 0x0a, 0x83, 0xc2, 0xa0, 0x30, 0x28, 0x0c, 0x0a, 0x83, 0xc2,
		0xa0, 0x30, 0x28, 0x0c, 0x0a, 0x7b, 0x81, 0xc2, 0xac, 0xa6, 0x1d, 0xda, 0x1a, 0x28, 0x36, 0x6a,
		0x18, 0x1e, 0x83, 0xc7, 0xe0, 0x31, 0x78, 0x0c, 0x1e, 0x83, 0xc7, 0xe0, 0x31, 0x78, 0x0c, 0x1e,
		0x7b, 0x89, 0xc7, 0x82, 0xde, 0xe7, 0x6b, 0x7f, 0x24, 0xd0, 0xf2, 0x4c, 0x36, 0x6d, 0x1c, 0x2e,
		0x83, 0xcb, 0xe0, 0x32, 0xb8, 0x0c, 0x2e, 0x83, 0xcb, 0xe0, 0x32, 0xb8, 0x0c, 0x2e, 0x7b, 0x72,
		0x58, 0xc2, 0xef, 0xd6, 0xe7, 0xdb, 0x50, 0x3c, 0x4a, 0xf6, 0xb0, 0x59, 0x58, 0x0c, 0x16, 0x83,
		0xc5, 0x60, 0x31, 0x58, 0x0c, 0x16, 0x83, 0xc5, 0x60, 0x31, 0x58, 0x6c, 0x1e, 0x8b, 0x35, 0x3a,
		0x5e, 0xe8, 0x77, 0x5a, 0xa2, 0x20, 0x36, 0x69, 0x13, 0x0a, 0x83, 0xc2, 0xa0, 0x30, 0x28, 0x0c,
		0x0a, 0x83, 0xc2, 0xa0, 0x30, 0x28, 0x0c, 0x0a, 0x9b, 0x47, 0x61, 0x4d, 0x3b, 0xb4, 0xad, 0xa6,
		0x1b, 0x84, 0xa2, 0x1c, 0x76, 0xd7, 0xaa, 0x0c, 0x89, 0x15, 0x20, 0x31, 0x48, 0x6c, 0xdd, 0x49,
		0xec, 0xd8, 0xf5, 0x65, 0x0c, 0x2f, 0xfc, 0x6e, 0xe5, 0xad, 0x8a, 0xc2, 0x5d, 0xf1, 0x93, 0x86,
		0x29, 0xfa, 0x94, 0x31, 0x51, 0xd0, 0x12, 0x07, 0x75, 0x91, 0x50, 0x17, 0x0b, 0x7d, 0xd1, 0x10,
		0x06, 0x15, 0x8a, 0x3e, 0x09, 0x35, 0x49, 0xd1, 0x27, 0x8a, 0x3e, 0x25, 0xec, 0x1e, 0xaa, 0xba,
		0x89, 0x49, 0x0f, 0x29, 0x45, 0x9f, 0x92, 0x68, 0x6d, 0x95, 0xca, 0x8c, 0x86, 0xdf, 0xad, 0x42,
		0xbe, 0x58, 0xb6, 0x8a, 0xf9, 0xd2, 0x81, 0x0a, 0x7c, 0xde, 0xb5, 0x0e, 0x81, 0x42, 0xa0, 0x10,
		0x28, 0x04, 0x0a, 0x81, 0x42, 0xa0, 0x10, 0x28, 0x04, 0x0a, 0x81, 0x42, 0xa0, 0x63, 0x02, 0x2d,
		0x1e, 0x5a, 0xc5, 0x72, 0x45, 0x87, 0x3f, 0xc7, 0x6d, 0x43, 0x9f, 0xd0, 0x27, 0xf4, 0x09, 0x7d,
		0x42, 0x9f, 0xd0, 0x27, 0xf4, 0x09, 0x7d, 0x42, 0x9f, 0xd0, 0xe7, 0x98, 0x3e, 0xf7, 0x0a, 0xf9,
		0xfd, 0x3d, 0xab, 0x58, 0x29, 0x16, 0x4a, 0x3a, 0x1b, 0xf0, 0x0f, 0x9f, 0x00, 0x89, 0x42, 0xa2,
		0x90, 0x28, 0x24, 0x0a, 0x89, 0x42, 0xa2, 0x90, 0x28, 0x24, 0x0a, 0x89, 0x42, 0xa2, 0x63, 0x12,
		0xad, 0xec, 0x1d, 0x94, 0xad, 0xbd, 0xe2, 0x7e, 0x45, 0x69, 0x2f, 0xfe, 0x5e, 0xfb, 0x50, 0x28,
		0x14, 0x0a, 0x85, 0x42, 0xa1, 0x50, 0x28, 0x14, 0x0a, 0x85, 0x42, 0xa1, 0x50, 0x28, 0x14, 0x3a,
		0xa2, 0xd0, 0x62, 0xbe, 0x74, 0x68, 0x95, 0xf2, 0x87, 0x3a, 0xfb, 0xf1, 0x77, 0xad, 0x43, 0xa0,
		0x10, 0x28, 0x04, 0x0a, 0x81, 0x42, 0xa0, 0x10, 0x28, 0x04, 0x0a, 0x81, 0x42, 0xa0, 0x10, 0xe8,
		0x98, 0x40, 0xcb, 0xfb, 0x56, 0xb9, 0x50, 0xd4, 0xe1, 0xcf, 0x71, 0xdb, 0xd0, 0x27, 0xf4, 0x09,
		0x7d, 0x42, 0x9f, 0xd0, 0x27, 0xf4, 0x09, 0x7d, 0x42, 0x9f, 0xd0, 0x27, 0xf4, 0x39, 0xa6, 0xcf,
		0x4a, 0xb1, 0x50, 0x2a, 0x5b, 0xe5, 0x62, 0xa9, 0x78, 0xa0, 0xb3, 0x0f, 0xff, 0xf0, 0x09, 0x90,
		0x28, 0x24, 0x0a, 0x89, 0x42, 0xa2, 0x90, 0x28, 0x24, 0x0a, 0x89, 0x42, 0xa2, 0x90, 0x28, 0x24,
		0x3a, 0x22, 0xd1, 0xbd, 0xe2, 0x7e, 0xe5, 0xd0, 0xaa, 0x94, 0xcb, 0x7b, 0x3a, 0x7b, 0xf1, 0xf7,
		0xdb, 0x87, 0x42, 0xa1, 0x50, 0x28, 0x14, 0x0a, 0x85, 0x42, 0xa1, 0x50, 0x28, 0x14, 0x0a, 0x85,
		0x42, 0xa1, 0xd0, 0x11, 0x85, 0x96, 0xf2, 0x87, 0xfb, 0xd6, 0x41, 0xe1, 0x50, 0x67, 0x3f, 0xfe,
		0xae, 0x75, 0x08, 0x14, 0x02, 0x85, 0x40, 0x21, 0x50, 0x08, 0x14, 0x02, 0x85, 0x40, 0x21, 0x50,
		0x08, 0x14, 0x02, 0x1d, 0x11, 0x68, 0xb9, 0xb0, 0x67, 0x15, 0xf2, 0x45, 0x9d, 0xe2, 0x4c, 0xd3,
		0xc6, 0xe1, 0x4f, 0xf8, 0x13, 0xfe, 0x84, 0x3f, 0xe1, 0x4f, 0xf8, 0x13, 0xfe, 0x84, 0x3f, 0xe1,
		0x4f, 0xf8, 0x73, 0xcc, 0x9f, 0xc5, 0x52, 0xf1, 0xe0, 0xd0, 0x2a, 0xe4, 0x4b, 0x07, 0xe5, 0x7d,
		0x9d, 0xad, 0xf8, 0x47, 0x8f, 0x80, 0x45, 0x61, 0x51, 0x58, 0x14, 0x16, 0x85, 0x45, 0x61, 0x51,
		0x58, 0x14, 0x16, 0x85, 0x45, 0x61, 0xd1, 0x11, 0x8b, 0x56, 0xca, 0x56, 0xa1, 0xa8, 0x73, 0x2c,
		0x69, 0xdc, 0x34, 0xec, 0x09, 0x7b, 0xc2, 0x9e, 0xb0, 0x27, 0xec, 0x09, 0x7b, 0xc2, 0x9e, 0xb0,
		0x27, 0xec, 0x09, 0x7b, 0x4e, 0xd8, 0xb3, 0xbc, 0xb7, 0x3f, 0xba, 0xcd, 0xa8, 0xa8, 0x44, 0xa0,
		0xf7, 0x1e, 0x00, 0x87, 0xc2, 0xa1, 0x70, 0x28, 0x1c, 0x0a, 0x87, 0xc2, 0xa1, 0x70, 0x28, 0x1c,
		0x0a, 0x87, 0xc2, 0xa1, 0x23, 0x0e, 0x3d, 0x28, 0x1c, 0xee, 0x0d, 0x2f, 0x33, 0xd2, 0xc9, 0x08,
		0xbd, 0xd7, 0x3c, 0x0c, 0x0a, 0x83, 0xc2, 0xa0, 0x30, 0x28, 0x0c, 0x0a, 0x83, 0xc2, 0xa0, 0x30,
		0x28, 0x0c, 0xba, 0xfc, 0x0c, 0xba, 0x91, 0xe2, 0x1c, 0xca, 0x55, 0x3d, 0xaf, 0x13, 0xda, 0x03,
		0x13, 0x10, 0x99, 0x36, 0xb9, 0xa0, 0xf1, 0xc5, 0x69, 0xdb, 0x5d, 0x3b, 0xfc, 0x32, 0x58, 0xb1,
		0x76, 0x3b, 0x5d, 0xc7, 0x6b, 0x0c, 0xe9, 0xd0, 0xb2, 0x1b, 0x0d, 0x27, 0x08, 0xac, 0x6e, 0xc7,
		0xf5, 0xc2, 0x60, 0x77, 0xfe, 0x9f, 0x76, 0x3f, 0x07, 0x81, 0xdb, 0x0c, 0x46, 0xbf, 0xec, 0x06,
		0xa1, 0x1d, 0x3a, 0xbb, 0xe3, 0x95, 0x2f, 0xd8, 0x0d, 0xbf, 0x5b, 0x4d, 0x3b, 0xb4, 0xad, 0xa6,
		0x1b, 0x84, 0x02, 0xab, 0x60, 0x2e, 0x08, 0xfd, 0x5e, 0x23, 0xf4, 0xc6, 0x0b, 0xec, 0xd9, 0xf4,
		0x6d, 0xab, 0xc3, 0x17, 0x3a, 0x1f, 0xbe, 0x5d, 0x7d, 0xde, 0x1f, 0xea, 0xaf, 0x87, 0x6f, 0x3a,
		0xfa, 0xa5, 0xfe, 0x71, 0xf0, 0xa6, 0xf5, 0x37, 0xe3, 0x37, 0xad, 0x5f, 0x7e, 0x3f, 0xb6, 0x43,
		0xfb, 0x78, 0xf0, 0x9e, 0x1b, 0xe9, 0x98, 0x87, 0x81, 0x69, 0xe4, 0x26, 0xfd, 0xfc, 0x77, 0xbb,
		0x6d, 0x6c, 0x17, 0xf7, 0x5d, 0x99, 0x69, 0xa3, 0x86, 0x66, 0x3b, 0x56, 0xe2, 0x82, 0x61, 0x33,
		0x52, 0x8e, 0x8b, 0xa4, 0xc3, 0xa2, 0xe4, 0xa8, 0x48, 0x3b, 0x28, 0x6a, 0x8e, 0x89, 0x9a, 0x43,
		0xa2, 0xe7, 0x88, 0xa4, 0x2b, 0xe1, 0xc7, 0xae, 0x2f, 0x63, 0x78, 0x9f, 0x1d, 0xf9, 0xf0, 0xc5,
		0x67, 0x87, 0x98, 0x05, 0x31, 0x0b, 0x62, 0x16, 0xc4, 0x2c, 0x88, 0x59, 0x10, 0xb3, 0x20, 0x66,
		0x41, 0xcc, 0x82, 0x98, 0xc5, 0x0a, 0xc4, 0x2c, 0x04, 0xfc, 0x91, 0xcf, 0x5f, 0x15, 0x68, 0xf3,
		0x2b, 0xb4, 0x09, 0x6d, 0x42, 0x9b, 0xd0, 0x26, 0xb4, 0x09, 0x6d, 0x42, 0x9b, 0xd0, 0x26, 0xb4,
		0x09, 0x6d, 0x0e, 0x86, 0xf1, 0x9b, 0x2b, 0x4f, 0x9b, 0xdf, 0x5c, 0x68, 0x13, 0xda, 0x84, 0x36,
		0xa1, 0x4d, 0x68, 0x13, 0xda, 0x84, 0x36, 0xa1, 0x4d, 0x68, 0x13, 0xda, 0x1c, 0xd2, 0x66, 0x47,
		0x81, 0x36, 0x3b, 0xd0, 0x26, 0xb4, 0x09, 0x6d, 0x42, 0x9b, 0xd0, 0x26, 0xb4, 0x09, 0x6d, 0x42,
		0x9b, 0xd0, 0xe6, 0x0a, 0xd0, 0x26, 0xd9, 0xff, 0xd1, 0xb3, 0xff, 0xcd, 0x13, 0xc8, 0x37, 0x93,
		0x48, 0xfe, 0xff, 0x77, 0xbb, 0xbd, 0xa4, 0xb9, 0xff, 0xed, 0x46, 0x20, 0x9a, 0xf6, 0x3f, 0x68,
		0x8f, 0x8c, 0xff, 0x84, 0x9d, 0x13, 0x32, 0xfe, 0xc9, 0xf8, 0x7f, 0xa1, 0xa1, 0x76, 0x23, 0xc8,
		0xcb, 0x47, 0x2a, 0x86, 0xad, 0x12, 0xab, 0x20, 0x56, 0x41, 0xac, 0x82, 0x58, 0x05, 0xb1, 0x0a,
		0x62, 0x15, 0xc4, 0x2a, 0x88, 0x55, 0x10, 0xab, 0x58, 0xfe, 0x58, 0xc5, 0x8e, 0x08, 0x71, 0x16,
		0x54, 0x88, 0xb3, 0x00, 0x71, 0x42, 0x9c, 0x10, 0x27, 0xc4, 0x09, 0x71, 0x42, 0x9c, 0x10, 0x27,
		0xc4, 0x09, 0x71, 0x42, 0x9c, 0x63, 0xe2, 0x2c, 0xaa, 0x10, 0x27, 0x37, 0x02, 0x40, 0x9c, 0x10,
		0x27, 0xc4, 0x09, 0x71, 0x42, 0x9c, 0x10, 0x27, 0xc4, 0x09, 0x71, 0x42, 0x9c, 0x13, 0xe2, 0xdc,
		0x53, 0x21, 0xce, 0x3d, 0x88, 0x13, 0xe2, 0x84, 0x38, 0x21, 0x4e, 0x88, 0x13, 0xe2, 0x84, 0x38,
		0x21, 0x4e, 0x88, 0x13, 0xe2, 0x1c, 0x13, 0x67, 0x49, 0x85, 0x38, 0xb9, 0x71, 0x0a, 0xe2, 0x84,
		0x38, 0x21, 0x4e, 0x88, 0x13, 0xe2, 0x84, 0x38, 0x21, 0x4e, 0x88, 0x13, 0xe2, 0x9c, 0x10, 0x67,
		0x59, 0x85, 0x38, 0xcb, 0x10, 0x27, 0xc4, 0x09, 0x71, 0x42, 0x9c, 0x10, 0x27, 0xc4, 0x09, 0x71,
		0x42, 0x9c, 0x10, 0x27, 0xc4, 0x39, 0x26, 0xce, 0x8a, 0x0a, 0x71, 0x56, 0x20, 0x4e, 0x88, 0x13,
		0xe2, 0x84, 0x38, 0x21, 0x4e, 0x88, 0x13, 0xe2, 0x84, 0x38, 0x21, 0x4e, 0x88, 0x73, 0x4c, 0x9c,
		0xfb, 0x2a, 0xc4, 0xb9, 0x0f, 0x71, 0x42, 0x9c, 0x10, 0x27, 0xc4, 0x09, 0x71, 0x42, 0x9c, 0x10,
		0x27, 0xc4, 0x09, 0x71, 0x42, 0x9c, 0x63, 0xe2, 0x3c, 0x50, 0x21, 0xce, 0x03, 0x88, 0x13, 0xe2,
		0x84, 0x38, 0x21, 0x4e, 0x88, 0x13, 0xe2, 0x84, 0x38, 0x21, 0x4e, 0x88, 0x13, 0xe2, 0x1c, 0x13,
		0xe7, 0xa1, 0x0a, 0x71, 0x1e, 0x42, 0x9c, 0x10, 0x27, 0xc4, 0x09, 0x71, 0x42, 0x9c, 0x10, 0x27,
		0xc4, 0x09, 0x71, 0x42, 0x9c, 0x2b, 0x40, 0x9c, 0xdc, 0x56, 0x17, 0xe9, 0xb6, 0x3a, 0xf3, 0x7b,
		0xcf, 0x36, 0xb5, 0x2f, 0xaa, 0x7b, 0xdf, 0x08, 0x96, 0xf5, 0x92, 0xba, 0x9b, 0x76, 0x28, 0x7b,
		0x4b, 0xdd, 0xa0, 0x41, 0x99, 0x6b, 0xea, 0xf2, 0x5c, 0x53, 0x97, 0x96, 0x37, 0xc2, 0x35, 0x75,
		0x59, 0xd1, 0x6b, 0x31, 0xef, 0x42, 0xc5, 0xab, 0x10, 0xf4, 0x26, 0x84, 0xbd, 0x08, 0x41, 0x77,
		0x4c, 0xc3, 0x6b, 0x50, 0x42, 0x4b, 0x2d, 0x2f, 0x41, 0x93, 0x1b, 0x05, 0xbd, 0x02, 0x15, 0x6f,
		0x40, 0x7b, 0xa8, 0xf4, 0xe9, 0x5f, 0x75, 0xf4, 0x32, 0x42, 0xd5, 0xb5, 0xe5, 0xe4, 0x2f, 0xdf,
		0x09, 0x7d, 0xd7, 0x91, 0xbd, 0x28, 0x78, 0xd2, 0x26, 0x14, 0x06, 0x85, 0x41, 0x61, 0x50, 0x18,
		0x14, 0x06, 0x85, 0x41, 0x61, 0x50, 0x18, 0x14, 0xf6, 0x02, 0x85, 0x59, 0x4d, 0x3b, 0xb4, 0x35,
		0x50, 0x6c, 0xd4, 0x30, 0x3c, 0x06, 0x8f, 0xc1, 0x63, 0xf0, 0x18, 0x3c, 0x06, 0x8f, 0xc1, 0x63,
		0xf0, 0x18, 0x3c, 0xf6, 0x12, 0x8f, 0x05, 0xbd, 0xcf, 0xd7, 0xfe, 0x48, 0xa0, 0xe5, 0x99, 0x6c,
		0xda, 0x38, 0x5c, 0x06, 0x97, 0xc1, 0x65, 0x70, 0x19, 0x5c, 0x06, 0x97, 0xc1, 0x65, 0x70, 0xd9,
		0x2a, 0x73, 0xd9, 0x46, 0x82, 0x36, 0x2f, 0x95, 0x6b, 0xa8, 0x9c, 0x63, 0x68, 0xb0, 0xb0, 0xe8,
		0x25, 0x15, 0xc6, 0x03, 0x81, 0xe8, 0xc3, 0x1b, 0x63, 0x68, 0x73, 0x4e, 0x10, 0x7f, 0xbf, 0x7a,
		0xba, 0xae, 0x0f, 0x1a, 0x89, 0x69, 0x56, 0x66, 0x0a, 0x67, 0x0c, 0xda, 0x12, 0x80, 0x2d, 0x0c,
		0xd6, 0x52, 0x40, 0x2d, 0x0e, 0xd2, 0xe2, 0x00, 0x2d, 0x0f, 0xce, 0xc9, 0x4a, 0xa2, 0x31, 0x20,
		0x4f, 0x2d, 0xa7, 0xe5, 0xd8, 0xd7, 0xbe, 0x73, 0x6d, 0x62, 0x35, 0xe3, 0x89, 0x54, 0xd8, 0x37,
		0x68, 0xe3, 0x7c, 0xac, 0xca, 0xaf, 0x5e, 0xed, 0x4e, 0xff, 0x37, 0xd2, 0xda, 0xa1, 0xd4, 0x0e,
		0xa5, 0x31, 0xc3, 0x5a, 0xe6, 0xf5, 0xda, 0x96, 0x1d, 0x04, 0x9d, 0x86, 0x6b, 0x87, 0x4e, 0xd3,
		0x6a, 0xb4, 0x5c, 0xc7, 0x0b, 0x05, 0xe4, 0x6d, 0x4e, 0xbb, 0x28, 0x1e, 0x8a, 0x87, 0xe2, 0xc5,
		0xb4, 0x9c, 0x9e, 0xeb, 0x85, 0x07, 0x02, 0x7a, 0x67, 0xe0, 0xaf, 0x08, 0xb9, 0xfd, 0x02, 0xf1,
		0x11, 0x49, 0x37, 0x5f, 0xfa, 0x78, 0xb8, 0xb0, 0x5b, 0xaf, 0xe1, 0x10, 0x4a, 0x1c, 0xfb, 0x97,
		0x74, 0xdf, 0xb5, 0x86, 0xa0, 0x58, 0x2e, 0x67, 0x78, 0x10, 0x52, 0xf2, 0x82, 0x6b, 0x49, 0x01,
		0xc9, 0x86, 0xa2, 0x49, 0x9a, 0x7a, 0xd7, 0x3a, 0x5e, 0x75, 0x0c, 0x79, 0x16, 0x77, 0xa2, 0xa3,
		0xad, 0x8c, 0x8b, 0x0f, 0xd2, 0x62, 0x3f, 0xb9, 0xe0, 0x30, 0x0e, 0xc0, 0x63, 0xf0, 0x75, 0x87,
		0x7d, 0xb7, 0x60, 0xaf, 0xe5, 0xde, 0xb9, 0x41, 0x58, 0x0d, 0x43, 0x3f, 0xd2, 0x80, 0x0f, 0x96,
		0x8a, 0x93, 0x96, 0xd3, 0x1e, 0x83, 0xad, 0xd7, 0x6b, 0xb5, 0x76, 0x36, 0xa2, 0x88, 0x5c, 0xfc,
		0x0f, 0x9f, 0xf9, 0x4d, 0xc7, 0x77, 0x9a, 0xaf, 0x6f, 0xc7, 0x1f, 0x15, 0xed, 0xc0, 0x98, 0xf6,
		0x2f, 0x6d, 0xf7, 0x11, 0x2c, 0x5e, 0xd0, 0xd2, 0x17, 0xb3, 0xf1, 0x97, 0x2d, 0xf6, 0xf9, 0x9f,
		0x78, 0x61, 0x28, 0xa2, 0x0e, 0x81, 0x5c, 0xd7, 0x2f, 0xd0, 0xe9, 0x22, 0x9d, 0xfd, 0x7c, 0x37,
		0xcf, 0xef, 0xbc, 0x67, 0x3a, 0x2e, 0xf7, 0xa5, 0x13, 0x4c, 0xde, 0xea, 0xf9, 0x2e, 0x9b, 0x82,
		0xef, 0xf4, 0x13, 0x2f, 0x0c, 0xc7, 0x62, 0x0c, 0xb1, 0xb0, 0x3b, 0x18, 0xc5, 0xed, 0x9b, 0xbe,
		0xeb, 0x83, 0xa1, 0x5b, 0x64, 0x98, 0x22, 0x3a, 0x72, 0xb1, 0x1d, 0xb6, 0xd8, 0x8e, 0xd9, 0x03,
		0x07, 0xec, 0xe1, 0xd7, 0x53, 0x9e, 0x5e, 0x0b, 0xbb, 0x4e, 0xd3, 0xde, 0x6f, 0x76, 0xda, 0xb6,
		0xeb, 0x59, 0xde, 0x62, 0x69, 0x0d, 0xd3, 0x00, 0xd0, 0x02, 0x1b, 0xa2, 0xb9, 0x77, 0x8e, 0x77,
		0x33, 0x9c, 0xb7, 0x8b, 0xb9, 0x3e, 0xd1, 0xd6, 0xa7, 0xc8, 0x04, 0x13, 0x93, 0x97, 0xef, 0xb6,
		0xb1, 0x22, 0x7e, 0xce, 0x80, 0x7e, 0xfb, 0xd1, 0x56, 0xdb, 0xc4, 0xbb, 0xa2, 0x58, 0xde, 0x4b,
		0xb0, 0x33, 0x84, 0xd6, 0xad, 0xda, 0x02, 0x16, 0x7b, 0x6e, 0x87, 0xa1, 0xe3, 0x7b, 0x0b, 0x9b,
		0x6c, 0x6e, 0x6b, 0x6b, 0xeb, 0x93, 0x6d, 0xfd, 0xaf, 0x6a, 0xfd, 0x95, 0xb7, 0x0e, 0xeb, 0xb5,
		0x7b, 0x7f, 0xb8, 0xba, 0xb2, 0xea, 0xb5, 0xed, 0x1f, 0xf9, 0x9d, 0x4a, 0xa1, 0xbf, 0xfd, 0xcb,
		0xdd, 0xdf, 0xd7, 0xae, 0xae, 0x5e, 0x6d, 0xff, 0x33, 0xce, 0xa7, 0x7e, 0xd9, 0xfe, 0x79, 0x75,
		0xf5, 0xea, 0x65, 0x05, 0xa9, 0x29, 0xac, 0x40, 0xbe, 0xdd, 0x74, 0x3b, 0xc1, 0xe2, 0xeb, 0xcf,
		0xf8, 0xe7, 0x17, 0x5b, 0x7d, 0x0a, 0x69, 0xae, 0x3e, 0x93, 0xf8, 0x58, 0xf7, 0xcb, 0xed, 0xea,
		0xad, 0x3d, 0xf7, 0xbf, 0x9c, 0xf2, 0xca, 0x73, 0xec, 0x2e, 0xe6, 0x63, 0x8c, 0x4c, 0x63, 0xf1,
		0x0e, 0x7c, 0x60, 0x51, 0x8b, 0x76, 0xde, 0x62, 0x86, 0x15, 0x3b, 0xda, 0x1d, 0x27, 0xba, 0x1d,
		0xd3, 0xe0, 0x4c, 0xa3, 0xd7, 0xc6, 0xd1, 0x6a, 0xe3, 0xe8, 0x74, 0x7c, 0x83, 0xd4, 0xf1, 0xa2,
		0x17, 0x35, 0xd4, 0xe9, 0x07, 0x1a, 0x13, 0xeb, 0x88, 0xd8, 0xf3, 0x77, 0xf9, 0x68, 0xc3, 0xcf,
		0xef, 0xc4, 0x5a, 0xa2, 0xa3, 0x52, 0x47, 0xdc, 0x8d, 0x1b, 0x93, 0x0d, 0x1b, 0x43, 0xd3, 0x36,
		0x35, 0x71, 0x31, 0x53, 0x17, 0x33, 0x79, 0x39, 0xd3, 0x4f, 0x26, 0x2e, 0x18, 0x75, 0x4a, 0x4c,
		0x3f, 0x68, 0xb7, 0x5a, 0x9d, 0xbf, 0x9d, 0xa6, 0xd5, 0xf8, 0x62, 0x7b, 0x9e, 0xd3, 0x12, 0xd8,
		0x05, 0x9d, 0x69, 0x91, 0xfd, 0x4f, 0xc3, 0x69, 0x25, 0x35, 0xbd, 0xc4, 0xa7, 0x99, 0xf8, 0x74,
		0x93, 0x9f, 0x76, 0x66, 0x1b, 0x07, 0xe9, 0xef, 0x7f, 0x4e, 0x66, 0x91, 0x15, 0x0e, 0x9a, 0x64,
		0x1f, 0x74, 0x73, 0x59, 0xf6, 0x41, 0x0b, 0xec, 0x83, 0xa6, 0x3e, 0x04, 0xa5, 0x95, 0xdd, 0x06,
		0xdd, 0x61, 0x0a, 0xbe, 0x3c, 0xfe, 0x7b, 0x15, 0xe6, 0x20, 0x63, 0xc0, 0x1c, 0x4c, 0x73, 0xfc,
		0x4b, 0xe4, 0x03, 0x31, 0x06, 0xcc, 0xc1, 0x74, 0xc7, 0xbf, 0xc4, 0x1c, 0x64, 0x0c, 0x98, 0x83,
		0xa9, 0x8e, 0xff, 0x01, 0x73, 0x90, 0x31, 0x60, 0x0e, 0xa6, 0x39, 0xfe, 0xe5, 0x22, 0x73, 0x90,
		0x31, 0x60, 0x0e, 0xa6, 0x3a, 0xfe, 0xc4, 0x64, 0x18, 0x03, 0xe6, 0x60, 0xaa, 0xe3, 0x5f, 0x21,
		0x26, 0xc3, 0x18, 0x30, 0x07, 0xd3, 0x1d, 0x7f, 0x62, 0x32, 0x8c, 0x01, 0x73, 0x30, 0xd5, 0xf1,
		0x2f, 0xe4, 0x59, 0x08, 0x19, 0x04, 0x66, 0x61, 0xda, 0x06, 0xc0, 0x52, 0xc8, 0x20, 0x30, 0x0b,
		0xd3, 0x36, 0x00, 0x36, 0x28, 0x18, 0x04, 0x66, 0x61, 0xca, 0x06, 0x50, 0x60, 0x8b, 0x82, 0x41,
		0x60, 0x16, 0xa6, 0x6d, 0x00, 0x6c, 0x52, 0x30, 0x08, 0xcc, 0xc2, 0x94, 0x0d, 0xa0, 0x48, 0x74,
		0x86, 0x41, 0x60, 0x16, 0xa6, 0x6d, 0x00, 0x44, 0x67, 0x18, 0x04, 0x66, 0x61, 0xda, 0x06, 0x40,
		0x74, 0x86, 0x41, 0x60, 0x16, 0xa6, 0x6c, 0x00, 0x7b, 0x44, 0x67, 0x18, 0x04, 0x66, 0x61, 0xda,
		0x06, 0x40, 0x74, 0x86, 0x41, 0x60, 0x16, 0xa6, 0x6c, 0x00, 0x1c, 0xec, 0x65, 0x10, 0x98, 0x85,
		0xa9, 0x1b, 0x00, 0xd1, 0x19, 0x06, 0x81, 0x59, 0x98, 0xb6, 0x01, 0x1c, 0x32, 0x0b, 0x19, 0x04,
		0x66, 0x61, 0xba, 0x06, 0x10, 0xb5, 0xa4, 0x39, 0xb3, 0x70, 0xdd, 0x06, 0x81, 0x59, 0x98, 0x80,
		0x01, 0xec, 0x33, 0x0b, 0x19, 0x04, 0x66, 0x61, 0xba, 0x06, 0x50, 0xa1, 0xfc, 0x28, 0x83, 0xc0,
		0x2c, 0x4c, 0xdb, 0x00, 0xca, 0xcc, 0x42, 0x06, 0x41, 0x6f, 0x16, 0x26, 0x7d, 0x19, 0x6a, 0xcc,
		0x6a, 0xe8, 0xb1, 0x6e, 0xb0, 0x7c, 0x6a, 0xc6, 0xc7, 0xbe, 0x94, 0xf2, 0x29, 0xcb, 0x95, 0x6b,
		0x2c, 0xd6, 0x8d, 0x97, 0xe6, 0x83, 0x19, 0xe7, 0xea, 0x7b, 0xdb, 0x0b, 0x1d, 0xcf, 0xb3, 0xad,
		0x1b, 0xdb, 0x40, 0x3f, 0xef, 0xae, 0x7a, 0xb8, 0xdf, 0x1a, 0xd7, 0x3c, 0x70, 0xcd, 0x43, 0xd4,
		0x06, 0xb9, 0xe6, 0x61, 0x6c, 0x39, 0x42, 0xb7, 0xdc, 0x17, 0xb8, 0xdd, 0x41, 0xbc, 0x63, 0x9e,
		0xa6, 0x0a, 0x12, 0x32, 0x33, 0x80, 0x76, 0xc5, 0x7d, 0xd0, 0x4e, 0x08, 0xed, 0x12, 0xa1, 0x8f,
		0xf1, 0x65, 0x36, 0xe6, 0xe0, 0x31, 0x69, 0x08, 0xe6, 0x80, 0x39, 0x60, 0x8e, 0x98, 0x96, 0xd3,
		0x13, 0x82, 0x0e, 0xae, 0x94, 0x4a, 0x6a, 0xbd, 0x03, 0x39, 0x88, 0x26, 0x81, 0x1c, 0x71, 0x90,
		0xc3, 0xfa, 0xdb, 0x6d, 0x0e, 0x2f, 0xb2, 0x97, 0x01, 0x8f, 0x71, 0x73, 0x31, 0x25, 0xfc, 0xd8,
		0xb9, 0xb6, 0x7b, 0xad, 0xe1, 0x02, 0x54, 0xcc, 0xc3, 0x30, 0x30, 0x0c, 0x0c, 0x03, 0xc3, 0xac,
		0x09, 0xc3, 0x70, 0x6a, 0x20, 0xf5, 0x21, 0x28, 0x96, 0x61, 0x98, 0xa5, 0x62, 0x98, 0x66, 0xc3,
		0x36, 0x27, 0x97, 0x41, 0x23, 0xe6, 0xbc, 0x32, 0x58, 0xbb, 0x20, 0x16, 0x88, 0x05, 0x62, 0x89,
		0x6b, 0x39, 0x9f, 0x3b, 0x9d, 0x96, 0x63, 0x7b, 0x12, 0x9b, 0x3d, 0x85, 0x2c, 0x6b, 0x56, 0xd8,
		0x15, 0xd0, 0xac, 0xb0, 0x8b, 0x66, 0xa1, 0x59, 0x68, 0x16, 0x9a, 0x95, 0x90, 0x66, 0x59, 0x6d,
		0x03, 0x80, 0xbf, 0xaf, 0x5b, 0xc3, 0x86, 0xcc, 0xb5, 0xab, 0x50, 0x46, 0xb9, 0x50, 0x2e, 0x94,
		0x8b, 0xf8, 0x10, 0xf1, 0x21, 0xe2, 0x43, 0xc4, 0x87, 0x88, 0x0f, 0xcd, 0xe3, 0x16, 0x89, 0x7c,
		0xde, 0x49, 0x43, 0xe6, 0xdc, 0xb2, 0x07, 0xb6, 0x80, 0x2d, 0x60, 0x0b, 0xd8, 0x02, 0xb6, 0x80,
		0x2d, 0x60, 0x0b, 0xd8, 0xf2, 0x44, 0x37, 0x3b, 0x9e, 0xfd, 0xb9, 0xe5, 0x34, 0xcd, 0xb1, 0x65,
		0xd2, 0x10, 0xa1, 0x62, 0xc8, 0x05, 0x72, 0x49, 0x97, 0x5c, 0xd6, 0x24, 0x54, 0xec, 0x0a, 0xc8,
		0x96, 0xdb, 0x44, 0x6a, 0x90, 0x1a, 0xa4, 0x06, 0x27, 0x09, 0x27, 0x09, 0x27, 0x09, 0x27, 0x09,
		0x27, 0xe9, 0x89, 0x6e, 0xee, 0x74, 0x1d, 0xdf, 0x0e, 0x5d, 0xef, 0xc6, 0xba, 0xf6, 0x9d, 0xff,
		0xf6, 0x1c, 0xaf, 0x71, 0x6b, 0x4e, 0x1e, 0x4f, 0x35, 0x0a, 0x8a, 0x80, 0x22, 0xa0, 0x48, 0x6c,
		0x94, 0x77, 0xbc, 0xd0, 0x0d, 0x6f, 0x7d, 0xe7, 0x5a, 0xc2, 0xf3, 0x31, 0x21, 0x92, 0xd3, 0xf1,
		0xab, 0xbc, 0xb6, 0x03, 0x01, 0x1b, 0x9c, 0x7c, 0xc1, 0xb3, 0xf3, 0x93, 0x8b, 0xea, 0xe5, 0xe9,
		0x87, 0x5f, 0xeb, 0x6f, 0x2f, 0x4e, 0xfe, 0xef, 0xf7, 0x93, 0x0f, 0x6f, 0xfe, 0x34, 0xb5, 0xc6,
		0xe1, 0x92, 0x14, 0x18, 0xb3, 0x93, 0x0c, 0x3f, 0x3d, 0xf8, 0xb2, 0x83, 0xaf, 0x58, 0x2f, 0xff,
		0xfa, 0xdb, 0x5f, 0xb9, 0x2c, 0x70, 0x85, 0xc6, 0x97, 0x2b, 0xae, 0xf4, 0x97, 0xab, 0x97, 0xeb,
		0x32, 0xdf, 0xcf, 0xa8, 0x85, 0x5a, 0xd2, 0x2a, 0x98, 0x08, 0x8f, 0x04, 0x0d, 0xdb, 0xf3, 0x5c,
		0xef, 0xc6, 0x1c, 0x42, 0xa6, 0x2d, 0x11, 0xb6, 0x05, 0x60, 0x00, 0x98, 0x74, 0x01, 0x66, 0x4d,
		0xc2, 0xb6, 0x13, 0xcd, 0xb1, 0x9a, 0xce, 0xb5, 0xe3, 0x5b, 0x8d, 0x96, 0x3b, 0xae, 0x00, 0x28,
		0xa4, 0x65, 0x8f, 0xda, 0x45, 0x92, 0x90, 0x24, 0x24, 0x29, 0xa6, 0xe5, 0x10, 0xde, 0xbd, 0x1f,
		0x5b, 0x24, 0xbc, 0x9b, 0xb2, 0xa7, 0x42, 0x78, 0x37, 0x5d, 0x77, 0x6a, 0x35, 0xc3, 0xbb, 0x8f,
		0xc0, 0x21, 0xf4, 0xed, 0xeb, 0x6b, 0xb7, 0x21, 0x0e, 0x24, 0x93, 0x76, 0x01, 0x12, 0x80, 0x04,
		0x20, 0xc1, 0x47, 0x5a, 0x4c, 0x92, 0xfe, 0x76, 0x5a, 0x2d, 0x2b, 0x74, 0xdb, 0x8e, 0xa4, 0x1e,
		0xdd, 0x35, 0x8a, 0x18, 0x21, 0x46, 0x88, 0x91, 0x81, 0x77, 0x54, 0xa8, 0x08, 0x68, 0x51, 0x05,
		0xf7, 0x08, 0xf7, 0x68, 0x4d, 0xdc, 0xa3, 0x4a, 0xb9, 0xbc, 0x87, 0x83, 0xb4, 0x9c, 0x0e, 0x92,
		0xeb, 0x85, 0x8e, 0xff, 0xcd, 0x6e, 0x09, 0xb2, 0xc8, 0xb4, 0x49, 0x48, 0x04, 0x12, 0x81, 0x44,
		0x0c, 0x48, 0x84, 0x38, 0x2d, 0x20, 0x02, 0x88, 0x2c, 0x3e, 0x04, 0xc4, 0x69, 0x97, 0x0c, 0x43,
		0x42, 0xdf, 0xf6, 0x82, 0xb6, 0x1b, 0x5a, 0xdd, 0xce, 0xdf, 0x8e, 0x6f, 0xce, 0x20, 0x8f, 0xda,
		0x33, 0x4f, 0x81, 0x39, 0x04, 0x62, 0x80, 0x18, 0x20, 0x06, 0x88, 0x01, 0x62, 0x80, 0x18, 0x20,
		0x66, 0xf5, 0x21, 0x66, 0x43, 0xd1, 0x24, 0x73, 0x55, 0xcf, 0xeb, 0x84, 0xf6, 0x60, 0x48, 0x62,
		0x59, 0x61, 0x2e, 0x68, 0x7c, 0x71, 0xda, 0x76, 0xd7, 0x1e, 0x5e, 0xb9, 0x92, 0xdb, 0xed, 0x74,
		0x1d, 0xaf, 0x31, 0x04, 0x05, 0xcb, 0x6e, 0x34, 0x9c, 0x20, 0xb0, 0xba, 0x1d, 0xd7, 0x0b, 0x83,
		0xdd, 0xf9, 0x7f, 0xda, 0xf5, 0xed, 0xa6, 0xdb, 0x09, 0x46, 0xbf, 0xec, 0x8e, 0x3e, 0x9c, 0x8b,
		0x13, 0x3f, 0x0a, 0xfd, 0x5e, 0x23, 0xf4, 0x26, 0xc7, 0x18, 0xa6, 0x2f, 0x52, 0x1d, 0x3e, 0xeb,
		0x7c, 0xf8, 0xe0, 0xfa, 0xbc, 0x3f, 0xd4, 0x2f, 0x86, 0x2f, 0x31, 0xfa, 0xa5, 0x3e, 0x46, 0x9d,
		0x0d, 0x9d, 0x61, 0x8a, 0x30, 0x44, 0x71, 0x4e, 0x9f, 0xc7, 0x3f, 0x75, 0x1e, 0x53, 0x3e, 0x62,
		0x93, 0xa1, 0x09, 0x11, 0x0a, 0x91, 0xa0, 0x29, 0x01, 0x8a, 0x91, 0x9f, 0x18, 0xf1, 0xc9, 0x91,
		0x9e, 0xae, 0xf0, 0xc4, 0x26, 0xba, 0xe9, 0xc8, 0xb7, 0x1c, 0xfb, 0x3a, 0xde, 0x31, 0xac, 0xe9,
		0xee, 0x7c, 0x8c, 0x5b, 0x45, 0x73, 0xe7, 0x63, 0xad, 0x7b, 0xf5, 0x6a, 0x2c, 0x56, 0xbb, 0x6e,
		0x33, 0x0b, 0x52, 0xe1, 0x39, 0xee, 0xcd, 0x97, 0xcf, 0x1d, 0x3f, 0x88, 0xaf, 0x18, 0x77, 0x4d,
		0xc4, 0x13, 0x8e, 0x02, 0xc2, 0x81, 0x70, 0x68, 0x0b, 0xc7, 0xb1, 0x1b, 0x2f, 0x2a, 0x33, 0xb5,
		0x6e, 0xf3, 0x98, 0xce, 0xb4, 0x25, 0xb3, 0x48, 0x4c, 0xc1, 0x34, 0x12, 0x53, 0x24, 0x12, 0x43,
		0x24, 0x26, 0xe1, 0x48, 0x4c, 0xdc, 0xe9, 0x37, 0x6d, 0xe0, 0x73, 0x10, 0x18, 0xd4, 0x54, 0x9a,
		0xb1, 0xbf, 0x51, 0x73, 0x86, 0x63, 0x22, 0xe3, 0x37, 0x1b, 0x4f, 0x4c, 0xc9, 0x09, 0xaa, 0x34,
		0x51, 0xa5, 0x27, 0xac, 0xda, 0xc4, 0x55, 0x9b, 0xc0, 0x7a, 0x13, 0x59, 0x28, 0xa2, 0x61, 0x68,
		0x7b, 0xc6, 0xa1, 0x56, 0x41, 0x50, 0x97, 0x04, 0xf7, 0xe7, 0x40, 0x3e, 0x08, 0xed, 0xd0, 0xd9,
		0x1d, 0x49, 0x49, 0x4a, 0xe1, 0x24, 0x83, 0x61, 0xcb, 0x0d, 0x5f, 0x5f, 0x4e, 0x52, 0x47, 0xcd,
		0xc9, 0x48, 0x6a, 0x01, 0x49, 0x45, 0x52, 0xd7, 0x5d, 0x52, 0x4d, 0x99, 0x49, 0x98, 0x9d, 0x54,
		0x18, 0x4a, 0x98, 0xa5, 0x8c, 0x63, 0x04, 0x49, 0x08, 0x81, 0xb2, 0x20, 0x68, 0x09, 0x83, 0xba,
		0x40, 0xa8, 0x0b, 0x85, 0xbe, 0x60, 0xc8, 0x08, 0x87, 0x90, 0x80, 0xc8, 0xb3, 0xd9, 0x8c, 0xe5,
		0xb6, 0xed, 0x86, 0x65, 0x37, 0x9b, 0xbe, 0x13, 0x04, 0x92, 0x96, 0x3b, 0xa1, 0x80, 0x03, 0xc1,
		0x36, 0xcf, 0xed, 0x30, 0x74, 0x7c, 0x4f, 0xa4, 0x9e, 0xd4, 0x83, 0x86, 0xff, 0xf3, 0x29, 0x6f,
		0x1d, 0xda, 0xd6, 0x75, 0xd5, 0x7a, 0x5b, 0xfb, 0x51, 0xec, 0x6f, 0x1d, 0x3d, 0xfc, 0xf3, 0xf6,
		0x8f, 0x72, 0xff, 0x1f, 0x72, 0x96, 0x55, 0xdb, 0xc8, 0x86, 0x7d, 0x4a, 0x6c, 0x62, 0x37, 0xbe,
		0xd8, 0x9e, 0xe7, 0xb4, 0xe4, 0x57, 0xa6, 0x49, 0xc3, 0xac, 0x4d, 0xac, 0x4d, 0xac, 0x4d, 0x6b,
		0xba, 0x36, 0x19, 0x9f, 0x80, 0x9b, 0xa7, 0x03, 0x15, 0xc1, 0x26, 0x65, 0x72, 0xba, 0x1e, 0xff,
		0x27, 0x3b, 0xa9, 0x36, 0xa5, 0x73, 0xbe, 0x94, 0x05, 0x76, 0xa6, 0x79, 0xe1, 0x9c, 0xb0, 0x99,
		0xf6, 0x15, 0xd2, 0x93, 0x94, 0xa6, 0xdb, 0xc3, 0x21, 0xb5, 0xbf, 0x2f, 0xfd, 0x90, 0x0a, 0x9e,
		0xd8, 0x4b, 0x65, 0x58, 0x37, 0xb2, 0xd9, 0xda, 0x2a, 0x51, 0x66, 0xcb, 0x0e, 0x42, 0x2b, 0x70,
		0x1c, 0x4f, 0x9e, 0x33, 0xef, 0x9a, 0x86, 0x34, 0x21, 0x4d, 0x48, 0x73, 0x4d, 0x49, 0x33, 0x74,
		0xdb, 0x4e, 0xe8, 0x36, 0xbe, 0x06, 0x95, 0x92, 0x02, 0x6e, 0x1e, 0x80, 0x9b, 0xe0, 0x26, 0xb8,
		0x99, 0x89, 0x21, 0x2d, 0x1c, 0x94, 0x4a, 0x95, 0xfd, 0x52, 0x29, 0xbf, 0xbf, 0xb7, 0x9f, 0x3f,
		0x2c, 0x97, 0x0b, 0x95, 0x02, 0xf4, 0x09, 0x7d, 0x3e, 0x33, 0x8c, 0x5d, 0xdf, 0x6d, 0xdb, 0xfe,
		0xad, 0xa5, 0x16, 0xeb, 0x7c, 0xfc, 0x00, 0x48, 0x14, 0x12, 0x85, 0x44, 0xd7, 0x94, 0x44, 0x89,
		0x79, 0x02, 0xa1, 0x40, 0xe8, 0x8a, 0x43, 0x28, 0x31, 0x4f, 0xa8, 0xf3, 0x85, 0x61, 0xf4, 0x83,
		0xc0, 0x95, 0x47, 0xcd, 0x61, 0xab, 0xf0, 0x25, 0x7c, 0x09, 0x5f, 0xae, 0x29, 0x5f, 0x1a, 0x56,
		0x41, 0x99, 0xa7, 0x02, 0x05, 0xe8, 0x52, 0x07, 0x45, 0x0a, 0xda, 0xf1, 0xb0, 0xe2, 0x01, 0x7c,
		0xb9, 0x6a, 0x7c, 0x59, 0x28, 0xee, 0x43, 0x97, 0xd0, 0xe5, 0xfc, 0x61, 0xd4, 0x39, 0x4e, 0xc0,
		0x69, 0x02, 0xe8, 0x12, 0xba, 0x5c, 0x67, 0xba, 0x0c, 0x42, 0x3f, 0xfe, 0x7d, 0xaf, 0xcf, 0x62,
		0xd0, 0x41, 0x56, 0xd4, 0x37, 0xd5, 0x03, 0x65, 0x86, 0x55, 0xbb, 0x66, 0xd7, 0x01, 0xe1, 0x2a,
		0x5e, 0xd3, 0x42, 0x32, 0xd3, 0xdf, 0xed, 0x4a, 0x1c, 0x2a, 0xdd, 0x14, 0xae, 0xf3, 0xf5, 0x61,
		0xf2, 0x9a, 0xd3, 0xdf, 0xd5, 0x3f, 0x0e, 0x5f, 0x33, 0xad, 0x33, 0xc0, 0x89, 0x56, 0x72, 0xf8,
		0x97, 0x73, 0x6b, 0x7a, 0xf8, 0x2f, 0xf7, 0xce, 0x0d, 0xc2, 0x6a, 0x18, 0x1a, 0x96, 0x84, 0x78,
		0xef, 0x7a, 0x27, 0x2d, 0xa7, 0x3d, 0xbe, 0xa1, 0xd5, 0xeb, 0xb5, 0x5a, 0x06, 0x87, 0xa1, 0xdf,
		0xdb, 0xdf, 0xe5, 0x1a, 0x3b, 0xf3, 0x9b, 0x8e, 0xef, 0x34, 0x5f, 0xdf, 0x8e, 0x9b, 0x4a, 0x74,
		0x80, 0x84, 0x66, 0x79, 0x02, 0xb3, 0x3b, 0x67, 0x74, 0x78, 0x5d, 0x71, 0x3e, 0xe7, 0x28, 0xd2,
		0xa8, 0x69, 0x00, 0x29, 0xd7, 0x69, 0x9c, 0x8e, 0x77, 0x16, 0xea, 0xaf, 0xc5, 0x2b, 0xc2, 0x60,
		0x54, 0x74, 0xc1, 0xb8, 0xee, 0x5a, 0x91, 0xba, 0x6b, 0xd4, 0x5d, 0x5b, 0xf0, 0x35, 0x63, 0xd7,
		0x5d, 0xb3, 0x5b, 0xad, 0xce, 0xdf, 0x4e, 0x73, 0x92, 0xd7, 0x24, 0x70, 0x09, 0xfb, 0x4c, 0x8b,
		0x54, 0xc4, 0xa7, 0x0e, 0x5b, 0xea, 0xce, 0xfe, 0xb2, 0x56, 0xc4, 0x9f, 0xcc, 0x22, 0x2b, 0x1c,
		0x34, 0x49, 0x65, 0xfc, 0xcd, 0x65, 0xa9, 0x8c, 0x5f, 0xa0, 0x32, 0x7e, 0xea, 0x43, 0x50, 0x5a,
		0xd9, 0xc2, 0xf8, 0x3b, 0x4c, 0xc1, 0x97, 0xc7, 0x7f, 0xaf, 0xc2, 0x1c, 0x64, 0x0c, 0x98, 0x83,
		0x69, 0x8e, 0x7f, 0x89, 0x1b, 0x62, 0x18, 0x03, 0xe6, 0x60, 0xba, 0xe3, 0x5f, 0x62, 0x0e, 0x32,
		0x06, 0xcc, 0xc1, 0x54, 0xc7, 0xff, 0x80, 0x39, 0xc8, 0x18, 0x30, 0x07, 0xd3, 0x1c, 0xff, 0x72,
		0x91, 0x39, 0xc8, 0x18, 0x30, 0x07, 0x53, 0x1d, 0x7f, 0x62, 0x32, 0x8c, 0x01, 0x73, 0x30, 0xd5,
		0xf1, 0xaf, 0x10, 0x93, 0x61, 0x0c, 0x98, 0x83, 0xe9, 0x8e, 0x3f, 0x31, 0x19, 0xc6, 0x80, 0x39,
		0x98, 0xea, 0xf8, 0x17, 0xf2, 0x2c, 0x84, 0x0c, 0x02, 0xb3, 0x30, 0x6d, 0x03, 0x60, 0x29, 0x64,
		0x10, 0x98, 0x85, 0x69, 0x1b, 0x00, 0x1b, 0x14, 0x0c, 0x02, 0xb3, 0x30, 0x65, 0x03, 0x28, 0xb0,
		0x45, 0xc1, 0x20, 0x30, 0x0b, 0xd3, 0x36, 0x00, 0x36, 0x29, 0x18, 0x04, 0x66, 0x61, 0xca, 0x06,
		0x50, 0x24, 0x3a, 0xc3, 0x20, 0x30, 0x0b, 0xd3, 0x36, 0x00, 0xa2, 0x33, 0x0c, 0x02, 0xb3, 0x30,
		0x6d, 0x03, 0x20, 0x3a, 0xc3, 0x20, 0x30, 0x0b, 0x53, 0x36, 0x80, 0x3d, 0xa2, 0x33, 0x0c, 0x02,
		0xb3, 0x30, 0x6d, 0x03, 0x20, 0x3a, 0xc3, 0x20, 0x30, 0x0b, 0x53, 0x36, 0x00, 0x0e, 0xf6, 0x32,
		0x08, 0xcc, 0xc2, 0xd4, 0x0d, 0x80, 0xe8, 0x0c, 0x83, 0xc0, 0x2c, 0x4c, 0xdb, 0x00, 0x0e, 0x99,
		0x85, 0x0c, 0x02, 0xb3, 0x30, 0x5d, 0x03, 0x28, 0xef, 0x31, 0x0b, 0x19, 0x04, 0x66, 0x61, 0xca,
		0x06, 0xb0, 0xcf, 0x2c, 0x64, 0x10, 0x98, 0x85, 0xe9, 0x1a, 0x40, 0x85, 0xf2, 0xa3, 0x0c, 0x02,
		0xb3, 0x30, 0x6d, 0x03, 0x28, 0x33, 0x0b, 0x19, 0x04, 0xbd, 0x59, 0x18, 0xfb, 0xd3, 0xb5, 0x44,
		0xab, 0xa1, 0x73, 0x0f, 0x91, 0xca, 0x60, 0xc6, 0x18, 0x8e, 0x9c, 0xed, 0x85, 0x8e, 0xe7, 0xd9,
		0xd6, 0x8d, 0x6d, 0xa0, 0x9f, 0x77, 0x57, 0x3d, 0xdc, 0x6f, 0x8d, 0x6b, 0x1e, 0xb8, 0xe6, 0x21,
		0x6a, 0x83, 0x5c, 0xf3, 0x20, 0x73, 0xe3, 0xb7, 0xc0, 0x45, 0xd4, 0xab, 0x7d, 0xbb, 0x43, 0x81,
		0x84, 0xcc, 0x15, 0x44, 0xbb, 0xe2, 0x3e, 0x68, 0x27, 0x84, 0x76, 0x89, 0xd0, 0xc7, 0x67, 0x3b,
		0x70, 0xac, 0xe1, 0x2d, 0x75, 0x56, 0xdb, 0x6e, 0x98, 0xf3, 0xc7, 0xa3, 0xf6, 0x20, 0x10, 0x08,
		0x04, 0x02, 0x89, 0x69, 0x39, 0x6d, 0xbb, 0x61, 0xd9, 0xcd, 0xa6, 0xef, 0x04, 0x81, 0x04, 0x88,
		0x18, 0x2c, 0x8f, 0xb9, 0x73, 0x3b, 0x0c, 0x1d, 0xdf, 0x33, 0x66, 0x91, 0xdc, 0x7f, 0x3e, 0xe5,
		0xad, 0x43, 0xdb, 0xba, 0xae, 0x5a, 0x6f, 0x6b, 0x3f, 0x8a, 0xfd, 0xad, 0xa3, 0x87, 0x7f, 0xde,
		0xfe, 0x51, 0xee, 0xff, 0x23, 0xb7, 0x92, 0x4a, 0x3b, 0xbe, 0x36, 0xcc, 0x5c, 0x62, 0x27, 0x0d,
		0xa1, 0xad, 0x68, 0x2b, 0xda, 0x1a, 0xd3, 0x72, 0x7a, 0x42, 0xee, 0x1d, 0x97, 0xf7, 0x25, 0xe5,
		0x59, 0xe0, 0xdc, 0xa5, 0x3e, 0x04, 0xc4, 0xed, 0x97, 0x12, 0x39, 0x86, 0xf7, 0xfe, 0xde, 0x38,
		0x96, 0xef, 0xd8, 0x41, 0xc7, 0x13, 0x03, 0x90, 0x47, 0xcd, 0x82, 0x23, 0xe0, 0x08, 0x38, 0x12,
		0xd3, 0x72, 0xdc, 0xa6, 0xe3, 0x85, 0x6e, 0x78, 0xeb, 0x3b, 0xd7, 0x12, 0xae, 0x9e, 0x09, 0x95,
		0x9c, 0x8e, 0x5f, 0xe5, 0xb5, 0x1d, 0x08, 0xd8, 0xe0, 0xe4, 0x0b, 0xbe, 0xf9, 0xad, 0xfa, 0xe1,
		0xd7, 0x93, 0xfa, 0xc5, 0x49, 0xf5, 0xe3, 0xd9, 0x87, 0xfa, 0xe5, 0x9f, 0xe7, 0x27, 0xa6, 0xc6,
		0x38, 0x5c, 0x95, 0x02, 0x63, 0x7c, 0x92, 0x41, 0xa8, 0x07, 0xdf, 0xf5, 0xe4, 0xe2, 0xe2, 0xec,
		0xe2, 0x63, 0x2e, 0x0b, 0x5c, 0x21, 0xfc, 0xcd, 0x8e, 0xdf, 0xae, 0xe4, 0xd7, 0xfa, 0x70, 0x76,
		0xfa, 0xf1, 0x64, 0x15, 0xbf, 0xd8, 0xeb, 0x93, 0xcb, 0xcb, 0x93, 0x0b, 0x6b, 0x30, 0xf9, 0x3e,
		0x9c, 0xbc, 0xcb, 0xa5, 0x0c, 0x59, 0xb5, 0xa4, 0x65, 0x3d, 0x51, 0xc8, 0xfa, 0xdb, 0x6d, 0x86,
		0x5f, 0xe4, 0xe0, 0x6a, 0xd4, 0x5c, 0xcc, 0x85, 0xe9, 0xd8, 0xb9, 0xb6, 0x7b, 0xad, 0xe1, 0xb2,
		0x5a, 0xcc, 0x43, 0x66, 0x90, 0x19, 0x64, 0x46, 0xa0, 0x68, 0x4d, 0x02, 0x45, 0x1c, 0x82, 0x4f,
		0x7d, 0x08, 0x8a, 0x65, 0x02, 0x45, 0xcb, 0x15, 0x28, 0xea, 0xf4, 0xbc, 0xd0, 0xf1, 0x03, 0x01,
		0x7c, 0x99, 0xb4, 0x64, 0x06, 0x1d, 0x05, 0xa0, 0x03, 0xe8, 0x58, 0x36, 0xe8, 0x38, 0x76, 0x0d,
		0xf3, 0xa9, 0xaf, 0x6d, 0xb7, 0xe5, 0x34, 0xad, 0xeb, 0x46, 0x60, 0x5d, 0xfb, 0x76, 0xdb, 0x09,
		0xe4, 0xe2, 0x2f, 0xb3, 0x4d, 0x1b, 0x8e, 0x95, 0xcc, 0xd2, 0x61, 0x3c, 0x61, 0x25, 0x27, 0xae,
		0xd2, 0x04, 0x96, 0x9e, 0xc8, 0x6a, 0x13, 0x5a, 0x6d, 0x62, 0xeb, 0x4d, 0x70, 0xa1, 0x45, 0xdd,
		0xd0, 0xf6, 0x8c, 0xbd, 0x8d, 0x79, 0xcb, 0x68, 0xa5, 0x24, 0x61, 0x77, 0xe3, 0xa9, 0x2a, 0x90,
		0x1e, 0x2b, 0xe4, 0x89, 0xc8, 0x46, 0xbb, 0xc4, 0x3d, 0x13, 0x25, 0x3c, 0xd6, 0xf2, 0x54, 0x34,
		0x61, 0x59, 0xd0, 0x73, 0x51, 0xf1, 0x60, 0x92, 0x1a, 0xaa, 0xc2, 0x41, 0xa9, 0x54, 0xd9, 0x2f,
		0x95, 0xf2, 0xfb, 0x7b, 0xfb, 0xf9, 0xc3, 0x72, 0xb9, 0x50, 0x29, 0x94, 0x97, 0x68, 0xf4, 0x36,
		0xb2, 0xd1, 0x4a, 0x2d, 0x25, 0xd7, 0xcb, 0xc0, 0x7a, 0x73, 0x5e, 0xc7, 0x0d, 0x1c, 0xeb, 0xba,
		0xd5, 0xe9, 0xf8, 0x72, 0x34, 0x76, 0xbf, 0x51, 0x38, 0x0c, 0x0e, 0x83, 0xc3, 0x32, 0xca, 0x61,
		0x86, 0xc1, 0x5f, 0xa1, 0xb0, 0x06, 0x08, 0x56, 0xd0, 0x5a, 0xd7, 0xa5, 0x0e, 0x8d, 0x01, 0x61,
		0x09, 0x40, 0x98, 0xd4, 0xe1, 0x32, 0x98, 0x2b, 0x01, 0xe6, 0x4a, 0x34, 0xf4, 0x56, 0xf5, 0xbc,
		0x4e, 0x68, 0x0f, 0x86, 0xd2, 0x2c, 0x02, 0x17, 0x34, 0xbe, 0x38, 0x6d, 0xbb, 0x6b, 0x0f, 0x77,
		0xf2, 0x73, 0xbb, 0x9d, 0xae, 0xe3, 0x35, 0x86, 0x64, 0x64, 0xd9, 0x8d, 0x86, 0x13, 0x04, 0x56,
		0xb7, 0xe3, 0x7a, 0x61, 0xb0, 0x3b, 0xff, 0x4f, 0xbb, 0xc3, 0xc3, 0x6f, 0xc1, 0xe8, 0x97, 0xdd,
		0x20, 0xb4, 0x43, 0x67, 0xd7, 0x30, 0x28, 0x3e, 0x7a, 0xb3, 0xd0, 0xef, 0x35, 0x42, 0x6f, 0xbc,
		0x2e, 0x9d, 0x4d, 0x5f, 0xac, 0x3a, 0x7c, 0xf6, 0xf9, 0xf0, 0x45, 0xea, 0xf3, 0xfe, 0x50, 0xbf,
		0x18, 0xbe, 0xd4, 0xe8, 0x97, 0xfa, 0xc7, 0xc1, 0x4b, 0xd5, 0xdf, 0x4c, 0x5e, 0x2a, 0xc3, 0xfb,
		0x12, 0xcd, 0x86, 0x6d, 0xbe, 0x25, 0x31, 0x68, 0xc4, 0x3c, 0x8f, 0x62, 0x40, 0x5f, 0x64, 0x52,
		0xb0, 0xa9, 0x91, 0x3e, 0x6b, 0x2f, 0x6b, 0x26, 0xc5, 0xe7, 0x4e, 0xa7, 0xe5, 0xd8, 0x9e, 0x44,
		0x7e, 0x6b, 0x21, 0xcb, 0x9a, 0x75, 0x1d, 0x58, 0x5f, 0xdc, 0xd0, 0x0a, 0xdd, 0xb6, 0x23, 0x20,
		0x5e, 0xf7, 0x5b, 0x43, 0x7e, 0x90, 0x1f, 0xe4, 0x27, 0xa6, 0xe5, 0x0c, 0x66, 0x50, 0xe8, 0x36,
		0xbe, 0x06, 0x46, 0x9b, 0x2a, 0x02, 0x9b, 0x29, 0xa4, 0x73, 0x45, 0x71, 0xfa, 0x48, 0xe7, 0x4a,
		0x7d, 0x08, 0xf4, 0x36, 0x3f, 0xc8, 0xef, 0x4a, 0x88, 0x49, 0xc2, 0xae, 0x00, 0x8a, 0x84, 0x5d,
		0xfc, 0x28, 0x40, 0x06, 0x90, 0xc1, 0x8f, 0x4a, 0x48, 0xb3, 0xac, 0xb6, 0xc1, 0xea, 0x78, 0x5f,
		0xb7, 0x86, 0x0d, 0x99, 0x6b, 0x57, 0xa1, 0x8c, 0x72, 0xa1, 0x5c, 0x28, 0x57, 0x5c, 0xcb, 0xe1,
		0x2c, 0x0d, 0xce, 0x17, 0xce, 0x57, 0xb4, 0x21, 0xe0, 0x2c, 0xcd, 0xf2, 0xf9, 0x5a, 0x56, 0x5b,
		0xa2, 0x94, 0xf7, 0xa4, 0x21, 0x73, 0x6e, 0xd9, 0x03, 0x5b, 0xc0, 0x16, 0xb0, 0x05, 0x6c, 0x01,
		0x5b, 0xc0, 0x16, 0xb0, 0x05, 0x6c, 0x79, 0xa2, 0x9b, 0x1d, 0xcf, 0xfe, 0xdc, 0x72, 0x9a, 0xe6,
		0xd8, 0x32, 0x69, 0x88, 0x50, 0x31, 0xe4, 0x02, 0xb9, 0xa4, 0x4b, 0x2e, 0x6b, 0x12, 0x2a, 0x76,
		0x05, 0x64, 0xcb, 0x6d, 0x22, 0x35, 0x48, 0x0d, 0x52, 0x83, 0x93, 0x84, 0x93, 0x84, 0x93, 0x84,
		0x93, 0x84, 0x93, 0xf4, 0x44, 0x37, 0x77, 0xba, 0x8e, 0x6f, 0x87, 0xae, 0x77, 0x63, 0x5d, 0xfb,
		0xce, 0x7f, 0x7b, 0x8e, 0xd7, 0xb8, 0x35, 0x27, 0x8f, 0xa7, 0x1a, 0x05, 0x45, 0x40, 0x11, 0x50,
		0x24, 0x36, 0xca, 0xaf, 0x78, 0x31, 0xed, 0xb3, 0xf3, 0x93, 0x8b, 0xea, 0xe5, 0xe9, 0x87, 0x5f,
		0xeb, 0x6f, 0x2f, 0x4e, 0xfe, 0xef, 0xf7, 0x93, 0x0f, 0x6f, 0xfe, 0x5c, 0xdd, 0x6a, 0xda, 0x83,
		0xaf, 0x58, 0x2f, 0xff, 0xfa, 0xdb, 0x5f, 0xab, 0x58, 0xa0, 0x79, 0xf8, 0xe5, 0x8a, 0x2b, 0xfd,
		0xe5, 0xea, 0xe5, 0xba, 0xcc, 0xf7, 0xa3, 0xf6, 0xf4, 0x4c, 0x4f, 0xfb, 0xdf, 0xad, 0x66, 0x27,
		0x2c, 0x14, 0xac, 0x49, 0xd5, 0xe8, 0x5e, 0xe8, 0xb6, 0xdc, 0xff, 0x99, 0x1d, 0x84, 0x9d, 0x8e,
		0xdf, 0xb3, 0xad, 0x43, 0x28, 0x10, 0x0a, 0x84, 0x12, 0xd3, 0x72, 0xba, 0x8e, 0xdf, 0x70, 0xbc,
		0xd0, 0xbe, 0x71, 0x88, 0x98, 0x10, 0x31, 0x21, 0x62, 0xb2, 0xf0, 0x10, 0x14, 0xf2, 0x79, 0x22,
		0x26, 0xcb, 0x14, 0x31, 0xf1, 0xbf, 0x5b, 0xa3, 0x62, 0x67, 0x5a, 0x84, 0x32, 0xbf, 0x75, 0x08,
		0x05, 0x42, 0x81, 0x50, 0x20, 0x14, 0x08, 0x05, 0x42, 0x81, 0x50, 0x20, 0x94, 0x39, 0xdd, 0x1c,
		0x34, 0x6c, 0xcf, 0x73, 0xbd, 0x1b, 0x73, 0x1a, 0x99, 0xb6, 0x44, 0xea, 0x1b, 0x00, 0x03, 0xc0,
		0xa4, 0x0b, 0x30, 0x6b, 0x92, 0xfa, 0x36, 0xd1, 0x1c, 0xab, 0xe9, 0x5c, 0x3b, 0xbe, 0xd5, 0x68,
		0xb9, 0x8e, 0x17, 0x06, 0x72, 0x5a, 0xf6, 0xa8, 0x5d, 0x24, 0x09, 0x49, 0x42, 0x92, 0x62, 0x5a,
		0x0e, 0x29, 0x72, 0xb8, 0x53, 0xb8, 0x53, 0xd1, 0x86, 0x80, 0x14, 0xb9, 0x25, 0x75, 0xa7, 0xc6,
		0xe0, 0x10, 0xfa, 0xf6, 0xf5, 0xb5, 0xdb, 0x10, 0x07, 0x92, 0x49, 0xbb, 0x00, 0x09, 0x40, 0x02,
		0x90, 0xe0, 0x23, 0x2d, 0x26, 0x49, 0x7f, 0x3b, 0xad, 0x96, 0x50, 0x61, 0xde, 0xa7, 0x1a, 0x45,
		0x8c, 0x10, 0x23, 0xc4, 0xc8, 0xc0, 0x3b, 0x2a, 0x54, 0x04, 0xb4, 0xa8, 0x82, 0x7b, 0x84, 0x7b,
		0xb4, 0x26, 0xee, 0x51, 0xa5, 0x5c, 0xde, 0xc3, 0x41, 0x5a, 0x4e, 0x07, 0xc9, 0xf5, 0x42, 0xc7,
		0xff, 0x66, 0xb7, 0x04, 0x59, 0x64, 0xda, 0x24, 0x24, 0x02, 0x89, 0x40, 0x22, 0x06, 0x24, 0x42,
		0x9c, 0x16, 0x10, 0x01, 0x44, 0x16, 0x1f, 0x02, 0xe2, 0xb4, 0x4b, 0x86, 0x21, 0x61, 0x27, 0xb4,
		0x5b, 0x3a, 0x59, 0xb9, 0xf3, 0x9b, 0x06, 0x4b, 0xc0, 0x12, 0xb0, 0x24, 0xa6, 0xe5, 0x90, 0x92,
		0x0b, 0x9b, 0xc0, 0x26, 0x31, 0x86, 0x80, 0x94, 0xdc, 0x65, 0x63, 0x13, 0xdf, 0xf6, 0x82, 0xb6,
		0x1b, 0x5a, 0xdd, 0xce, 0xdf, 0x8e, 0x2f, 0x00, 0x24, 0x0f, 0xdb, 0x33, 0x4f, 0xcf, 0x3d, 0x84,
		0x64, 0x20, 0x19, 0x48, 0x86, 0x00, 0x0b, 0x10, 0x03, 0xc4, 0x10, 0x60, 0x01, 0x62, 0x9e, 0x82,
		0x18, 0xd5, 0xda, 0x2c, 0x21, 0xb5, 0x59, 0x80, 0x13, 0xe0, 0x84, 0x30, 0x0b, 0x84, 0x02, 0xa1,
		0x10, 0x66, 0x81, 0x50, 0x36, 0x14, 0x4d, 0x32, 0x57, 0xf5, 0xbc, 0x4e, 0x18, 0x9f, 0x5c, 0x72,
		0x41, 0xe3, 0x8b, 0xd3, 0xb6, 0xbb, 0x76, 0xf8, 0x65, 0xa0, 0xb0, 0xbb, 0x9d, 0xae, 0xe3, 0x35,
		0x86, 0xb4, 0x60, 0xd9, 0x8d, 0x86, 0x13, 0x04, 0x56, 0xb7, 0xe3, 0x7a, 0x61, 0xb0, 0x3b, 0xff,
		0x4f, 0xbb, 0xbe, 0xdd, 0x74, 0x3b, 0xc1, 0xe8, 0x97, 0xdd, 0x20, 0xb4, 0xc3, 0x38, 0xf2, 0x9c,
		0x0b, 0x42, 0xbf, 0xd7, 0x08, 0xbd, 0x49, 0x1d, 0xcd, 0xe9, 0x7b, 0x54, 0x87, 0x8f, 0x3a, 0x1f,
		0x3e, 0xb7, 0x3e, 0xef, 0x0f, 0xf5, 0x8b, 0xe1, 0x3b, 0x8c, 0x7e, 0xa9, 0x7f, 0x1c, 0xbe, 0xc3,
		0x86, 0xce, 0x20, 0x2d, 0xf6, 0x93, 0x0b, 0x0e, 0xe3, 0x80, 0x3e, 0x22, 0x5d, 0x71, 0x90, 0x7b,
		0xe7, 0x06, 0x61, 0x35, 0x0c, 0xa3, 0x85, 0xde, 0x06, 0xeb, 0xc4, 0x49, 0xcb, 0x69, 0x8f, 0x0f,
		0xa0, 0x7a, 0xbd, 0x56, 0x6b, 0x67, 0x23, 0x8a, 0xc2, 0xc5, 0xff, 0xf0, 0x99, 0xdf, 0x74, 0x7c,
		0xa7, 0xf9, 0xfa, 0x76, 0xfc, 0x51, 0xd1, 0xde, 0x8b, 0x69, 0xfc, 0xd2, 0x46, 0x1f, 0xc1, 0xdc,
		0x05, 0xcd, 0x7c, 0x31, 0x03, 0x7f, 0xd9, 0x5c, 0x9f, 0xff, 0x89, 0x17, 0x86, 0x22, 0xea, 0x10,
		0xc8, 0x75, 0xfd, 0x02, 0x9d, 0x2e, 0xd2, 0xd9, 0xcf, 0x77, 0xf3, 0xfc, 0xce, 0x7b, 0xa6, 0xe3,
		0x72, 0x41, 0xe0, 0x36, 0x5f, 0x3e, 0x09, 0x7e, 0x97, 0x44, 0x38, 0xfc, 0xf1, 0x17, 0x06, 0x62,
		0x72, 0xdc, 0xe3, 0x85, 0x1f, 0x5b, 0xd4, 0x15, 0x8c, 0xe2, 0xf2, 0xcd, 0xb8, 0x76, 0x6d, 0x7b,
		0x91, 0xe3, 0x5f, 0x51, 0x5d, 0xb8, 0xd8, 0xae, 0x5a, 0x6c, 0x97, 0xec, 0x49, 0xd7, 0x6b, 0xf0,
		0xe5, 0x94, 0x27, 0xd5, 0xb1, 0xeb, 0x2f, 0x38, 0x9b, 0x82, 0x08, 0x17, 0xec, 0x3c, 0xb0, 0xa7,
		0x45, 0xbb, 0x6e, 0x31, 0xb3, 0x8a, 0x1d, 0x69, 0x88, 0x13, 0x59, 0x88, 0x69, 0x6e, 0xa6, 0x91,
		0x03, 0xe3, 0x48, 0x81, 0x71, 0x64, 0x20, 0xbe, 0x39, 0xea, 0xc0, 0xcb, 0xa2, 0x66, 0x3a, 0xfd,
		0xc0, 0x67, 0xdb, 0x6b, 0x5a, 0x41, 0xe8, 0x38, 0x7e, 0x9c, 0xaa, 0x3e, 0x77, 0x87, 0xe3, 0x1e,
		0x34, 0x13, 0xb1, 0x0f, 0xa3, 0x19, 0xb4, 0x71, 0x08, 0xcd, 0x24, 0x74, 0x66, 0x68, 0xe8, 0x52,
		0xa1, 0x32, 0xb1, 0x10, 0x99, 0x58, 0x68, 0xcc, 0x7c, 0x22, 0x24, 0xe3, 0x9c, 0x45, 0x9d, 0x20,
		0xd3, 0x0f, 0x36, 0x26, 0xd6, 0x66, 0x18, 0x8b, 0x1e, 0xb7, 0x63, 0x16, 0x75, 0x2e, 0xac, 0x52,
		0xd4, 0x39, 0xde, 0x14, 0x22, 0xea, 0x1c, 0x7f, 0x8a, 0xa5, 0x13, 0x75, 0x8e, 0x3b, 0xf5, 0x84,
		0xd6, 0x2a, 0x95, 0xb5, 0x4b, 0x29, 0x5c, 0x68, 0x3c, 0x51, 0x25, 0x27, 0xac, 0xd2, 0xc4, 0x95,
		0x9e, 0xc0, 0x6a, 0x13, 0x59, 0x6d, 0x42, 0xeb, 0x4d, 0x6c, 0xa1, 0x40, 0xae, 0xa1, 0xed, 0x19,
		0x6f, 0x33, 0xcd, 0x4e, 0x55, 0xe3, 0x1a, 0x0c, 0x33, 0x2b, 0x69, 0x21, 0xa5, 0x58, 0xb7, 0x41,
		0xe7, 0xe6, 0x26, 0x62, 0x65, 0xf9, 0x41, 0xe0, 0xca, 0x09, 0xe1, 0xc3, 0x66, 0x11, 0x42, 0x84,
		0x10, 0x21, 0xcc, 0xa8, 0x10, 0x1a, 0xe6, 0x04, 0x0a, 0xf9, 0x13, 0x0f, 0x9a, 0x92, 0xd9, 0x81,
		0x9f, 0xfc, 0x27, 0x33, 0x05, 0x36, 0xa5, 0x77, 0xe4, 0x15, 0x3a, 0xee, 0x41, 0xb3, 0xd3, 0xed,
		0xe1, 0xe2, 0x81, 0x70, 0xcb, 0x0a, 0xdb, 0xc4, 0x42, 0xd3, 0xe3, 0xe1, 0x60, 0x09, 0xee, 0xdd,
		0x0b, 0xaf, 0x45, 0xcf, 0x0c, 0xd6, 0xfe, 0x12, 0x0d, 0xd6, 0x46, 0x36, 0x5a, 0xa9, 0xa5, 0xc5,
		0x5d, 0x89, 0xfa, 0xbc, 0x86, 0xb9, 0x00, 0x77, 0xc4, 0x67, 0xbe, 0x47, 0x37, 0xdc, 0xb2, 0x1a,
		0xfe, 0xff, 0xee, 0x03, 0x8f, 0x77, 0xd7, 0x28, 0x22, 0xb5, 0x69, 0xbe, 0xa9, 0xf7, 0x71, 0xf0,
		0x62, 0xc3, 0xff, 0xaf, 0xbf, 0xb6, 0xbd, 0xe6, 0xc7, 0xf1, 0x7b, 0xd5, 0xc7, 0xe8, 0x97, 0xe5,
		0xea, 0x24, 0xc3, 0xac, 0x06, 0xf3, 0x8a, 0x24, 0x31, 0x13, 0x34, 0x44, 0x23, 0x82, 0x45, 0x22,
		0x82, 0x44, 0x04, 0x89, 0x08, 0x12, 0x11, 0xc4, 0x11, 0xc6, 0x11, 0x26, 0x22, 0x48, 0x44, 0x90,
		0x88, 0x20, 0x42, 0x88, 0x10, 0x12, 0x11, 0x24, 0x22, 0x48, 0x44, 0x90, 0x88, 0x20, 0x11, 0x41,
		0x22, 0x82, 0x6b, 0x13, 0x11, 0x34, 0x09, 0x48, 0x29, 0x06, 0x04, 0x63, 0x1c, 0x22, 0x32, 0x88,
		0x07, 0xae, 0xfa, 0x19, 0xb1, 0x79, 0xa3, 0x9f, 0xfc, 0x49, 0xb1, 0x39, 0xe3, 0xad, 0x76, 0x5c,
		0x2c, 0x42, 0x62, 0x7a, 0xdc, 0x2b, 0x02, 0xef, 0xd2, 0x3d, 0x63, 0xdd, 0x05, 0x48, 0x4a, 0x74,
		0x7a, 0xbe, 0x0d, 0x29, 0xd1, 0xd1, 0x26, 0x87, 0x40, 0x4a, 0xf4, 0xa8, 0x1d, 0x36, 0x40, 0xd8,
		0x00, 0x49, 0x3d, 0x3c, 0xb0, 0x64, 0x1b, 0x20, 0xa3, 0xa9, 0x63, 0x35, 0xec, 0xae, 0xfd, 0xd9,
		0x6d, 0xb9, 0xa1, 0xeb, 0x04, 0x72, 0xd1, 0xbf, 0xa7, 0x1a, 0x97, 0x89, 0x01, 0x16, 0xa4, 0x62,
		0x80, 0x45, 0x62, 0x80, 0xc4, 0x00, 0x97, 0x34, 0x06, 0x68, 0x3a, 0xf9, 0xef, 0xd1, 0xb7, 0x49,
		0x1a, 0xc2, 0x5c, 0x3b, 0x36, 0xf5, 0x02, 0x15, 0xa3, 0x63, 0x62, 0x9b, 0x00, 0x1a, 0x42, 0xa0,
		0x2c, 0x08, 0x5a, 0xc2, 0xa0, 0x2e, 0x10, 0xea, 0x42, 0xa1, 0x2f, 0x18, 0xc2, 0x21, 0x33, 0x21,
		0xdb, 0x95, 0x12, 0x92, 0x3b, 0xaa, 0x18, 0x97, 0xc9, 0x0b, 0x7a, 0xdd, 0x6e, 0xc7, 0x0f, 0xe5,
		0x4d, 0x6c, 0x4a, 0x18, 0x8f, 0x1e, 0xb4, 0xb3, 0x14, 0x51, 0x5e, 0x69, 0xf1, 0xd1, 0x14, 0xa1,
		0x84, 0xc4, 0x48, 0x5b, 0x94, 0x12, 0x13, 0xa7, 0xc4, 0x44, 0x2a, 0x39, 0xb1, 0x92, 0x15, 0x2d,
		0x61, 0xf1, 0x9a, 0x76, 0x83, 0xd8, 0x8e, 0xe8, 0x5c, 0xcb, 0xef, 0x09, 0x6d, 0x91, 0xce, 0x93,
		0x99, 0xb2, 0x42, 0xd3, 0xb2, 0x5b, 0xa8, 0x8f, 0xff, 0xd3, 0x99, 0xa3, 0x9b, 0x5a, 0x5b, 0xac,
		0x09, 0xe9, 0xfb, 0xcc, 0x63, 0x84, 0xcb, 0x26, 0xce, 0x7d, 0x8e, 0xe2, 0x1e, 0x9f, 0xf2, 0xec,
		0x7d, 0x38, 0xf4, 0xf6, 0xf7, 0x95, 0x1b, 0x7a, 0xb1, 0x82, 0xd2, 0x99, 0x18, 0xfc, 0x8d, 0xe5,
		0x68, 0xb5, 0x96, 0xe9, 0x05, 0x2b, 0x56, 0xd9, 0xbf, 0x28, 0xfa, 0x19, 0xbb, 0xc2, 0x5f, 0x94,
		0x99, 0xaa, 0xff, 0x90, 0x58, 0xe5, 0x06, 0x93, 0x37, 0x3a, 0xc9, 0x94, 0x15, 0x8d, 0xa8, 0xec,
		0x7c, 0x1f, 0x4a, 0x3c, 0x4a, 0x8b, 0x1f, 0x85, 0x1f, 0x85, 0x1f, 0x85, 0x1f, 0x35, 0xc7, 0xf2,
		0xdd, 0xa6, 0xe3, 0x85, 0x6e, 0x78, 0xeb, 0x3b, 0xd7, 0x8a, 0xde, 0x54, 0x41, 0xc3, 0x9d, 0x3a,
		0x1d, 0xbf, 0xfa, 0x6b, 0x3b, 0x50, 0x9c, 0x5b, 0x93, 0x8e, 0x7a, 0xf3, 0xee, 0xf4, 0xe4, 0xc3,
		0x65, 0xfd, 0x4d, 0xf5, 0xbc, 0xfa, 0xfa, 0xf4, 0xdd, 0xe9, 0xe5, 0xe9, 0xc9, 0x47, 0xad, 0x59,
		0x36, 0xe4, 0xd4, 0x40, 0xcd, 0x51, 0xd4, 0x75, 0x16, 0x1f, 0x74, 0xda, 0xf1, 0xd9, 0x65, 0xbd,
		0x50, 0xf8, 0x23, 0xb7, 0x8c, 0xae, 0x4f, 0x42, 0x5d, 0xf4, 0xfe, 0xf7, 0xfa, 0xeb, 0x93, 0xea,
		0xfb, 0xb7, 0x67, 0x17, 0xef, 0x4f, 0x4e, 0xe8, 0xa8, 0x97, 0x6c, 0xe9, 0x82, 0x2e, 0x5a, 0xcc,
		0x96, 0x34, 0x3b, 0x4a, 0xa5, 0xe5, 0xda, 0x9a, 0xad, 0xed, 0xb8, 0x9c, 0xab, 0xe5, 0x72, 0x66,
		0x6a, 0x17, 0x51, 0x28, 0x31, 0x7d, 0xa6, 0x5d, 0xd9, 0x54, 0xe5, 0x71, 0x3e, 0xed, 0xf8, 0xd7,
		0xdd, 0x27, 0x9c, 0xdf, 0x5d, 0xc9, 0xbc, 0x85, 0x4d, 0xd1, 0xec, 0xe6, 0x37, 0xa3, 0x97, 0x1f,
		0xff, 0x3a, 0xfe, 0xe5, 0xcd, 0xbd, 0x77, 0x37, 0x49, 0x71, 0x97, 0xb7, 0xae, 0x74, 0xd3, 0x63,
		0x84, 0xed, 0x31, 0x71, 0x3b, 0x94, 0xc8, 0xfd, 0x4a, 0xce, 0xf2, 0x72, 0x4b, 0x78, 0xe8, 0x79,
		0xd2, 0xe9, 0x1d, 0xcf, 0x73, 0x1a, 0x22, 0x86, 0x32, 0x13, 0x54, 0xbb, 0x6b, 0x9a, 0xc4, 0xc7,
		0x84, 0x43, 0x62, 0x24, 0x3e, 0x92, 0xf8, 0xf8, 0xa2, 0x3c, 0x92, 0xf8, 0x68, 0xda, 0x20, 0x89,
		0x8f, 0xea, 0x02, 0xa1, 0x2e, 0x14, 0xfa, 0x82, 0x91, 0x4d, 0x97, 0x45, 0x3e, 0xf1, 0x71, 0xb4,
		0xec, 0xcb, 0xea, 0xca, 0x3c, 0xb8, 0x90, 0xf6, 0x53, 0x36, 0xd9, 0xaa, 0x4b, 0x52, 0x86, 0xb4,
		0xe5, 0x28, 0x31, 0x59, 0x4a, 0x4c, 0x9e, 0x92, 0x93, 0xa9, 0xe5, 0x08, 0xe7, 0xb1, 0x55, 0xf7,
		0x4c, 0xdb, 0xa9, 0x6c, 0xd5, 0x7d, 0xbc, 0xac, 0x5e, 0x9e, 0xb0, 0x47, 0xf7, 0x52, 0x6f, 0x55,
		0x7f, 0xbf, 0xfc, 0xed, 0xe4, 0xc3, 0xe5, 0xe9, 0x9b, 0xea, 0xe5, 0xc9, 0x31, 0xbb, 0x2b, 0xf3,
		0x3b, 0xea, 0x5d, 0x71, 0xd0, 0x55, 0xf5, 0xb7, 0xd5, 0xd3, 0x77, 0xbf, 0x5f, 0x9c, 0xd4, 0x2f,
		0x4e, 0xfe, 0xbf, 0x93, 0x37, 0x97, 0x74, 0xd8, 0x8b, 0x1d, 0x76, 0x71, 0xf2, 0x7f, 0xd8, 0xd5,
		0x73, 0xdd, 0xb4, 0x77, 0xdf, 0xae, 0xe8, 0xa9, 0xf9, 0x3d, 0x75, 0x7e, 0xf6, 0xef, 0x93, 0x8b,
		0x8f, 0xd5, 0x3f, 0xe8, 0xa4, 0xc5, 0x65, 0xea, 0xf2, 0xf4, 0xfd, 0xc9, 0xd9, 0xef, 0xe8, 0xd4,
		0x33, 0x3d, 0x76, 0xfc, 0xdb, 0x9b, 0x73, 0xa6, 0xdf, 0x82, 0xfd, 0x84, 0x9a, 0xbf, 0x80, 0x53,
		0x1f, 0x3f, 0x9e, 0xbd, 0x39, 0x85, 0xa5, 0x16, 0x5a, 0xf3, 0x30, 0xa6, 0xe7, 0xbb, 0xe9, 0xf5,
		0xbb, 0xea, 0x9b, 0x7f, 0xbd, 0x3b, 0xfd, 0xa8, 0x6b, 0x4d, 0xeb, 0x99, 0xce, 0x93, 0xcd, 0xc3,
		0x06, 0xd3, 0x3d, 0x4a, 0x2b, 0x74, 0xdb, 0x9a, 0x61, 0xcb, 0x47, 0x0f, 0x22, 0x72, 0x49, 0xe4,
		0xf2, 0x85, 0x21, 0x25, 0x72, 0x99, 0x11, 0xe5, 0x5a, 0xca, 0xc3, 0xda, 0x85, 0x8a, 0x62, 0xd0,
		0xb2, 0xc2, 0x69, 0xed, 0xbb, 0x17, 0xe7, 0xb4, 0x76, 0xf4, 0xe7, 0x70, 0x5a, 0x3b, 0xb3, 0x43,
		0x5f, 0x29, 0x97, 0xf7, 0x38, 0xaf, 0x9d, 0x78, 0xab, 0xb5, 0x35, 0xa0, 0xed, 0x2f, 0x9d, 0x60,
		0x92, 0x8f, 0xa9, 0x84, 0xd9, 0xd3, 0x27, 0xc0, 0xd7, 0xf0, 0x35, 0x7c, 0x0d, 0x5f, 0xab, 0x58,
		0x7e, 0x10, 0x0a, 0xdc, 0x6d, 0xf7, 0x9c, 0xce, 0x14, 0x0e, 0xd6, 0x60, 0x35, 0x70, 0xbb, 0xdf,
		0x4a, 0x96, 0xdd, 0x6c, 0xfa, 0x4e, 0xa0, 0x58, 0xe1, 0xe1, 0xc1, 0x53, 0x58, 0x15, 0x58, 0x15,
		0x58, 0x15, 0x58, 0x15, 0x96, 0x4d, 0x69, 0x1e, 0xae, 0x0d, 0x0a, 0x6d, 0x9f, 0xdb, 0x61, 0xe8,
		0xf8, 0x9e, 0x5a, 0xf8, 0x25, 0xf7, 0x9f, 0xad, 0xad, 0x4f, 0x79, 0xeb, 0xb0, 0xf6, 0xf3, 0x53,
		0xc1, 0x3a, 0xac, 0x8d, 0x7e, 0x5b, 0x18, 0xfe, 0x32, 0xfa, 0x7d, 0xf1, 0x53, 0xde, 0x2a, 0x4d,
		0x7e, 0x5f, 0xfe, 0x94, 0xb7, 0xca, 0xb5, 0xed, 0xab, 0xab, 0x57, 0xdb, 0x3f, 0xf6, 0xfa, 0xd1,
		0x3f, 0xf8, 0x8f, 0x1c, 0xee, 0x59, 0xbc, 0x05, 0xb9, 0x92, 0xc8, 0x82, 0x5c, 0x61, 0x41, 0x66,
		0x41, 0x66, 0x41, 0x66, 0x41, 0x56, 0x5f, 0x90, 0x2b, 0x2c, 0xc8, 0xcf, 0x2f, 0xc8, 0xb6, 0x75,
		0x5d, 0xb5, 0xde, 0xd6, 0x7e, 0x14, 0x76, 0x4a, 0xfd, 0xa3, 0xed, 0x1f, 0xfb, 0xfd, 0xc7, 0x7f,
		0xf9, 0xf3, 0xa9, 0x1f, 0x2b, 0xec, 0xec, 0xf7, 0x8f, 0xe6, 0xfc, 0x4b, 0xa5, 0x7f, 0xb4, 0x60,
		0x1b, 0xe5, 0xfe, 0xd6, 0xcc, 0x8f, 0x0e, 0xfe, 0xbe, 0x38, 0xef, 0x03, 0xa5, 0x39, 0x1f, 0xd8,
		0x9b, 0xf7, 0x81, 0xbd, 0x39, 0x1f, 0x98, 0xfb, 0x4a, 0xc5, 0x39, 0x1f, 0x28, 0xf7, 0x7f, 0xce,
		0xfc, 0xfc, 0xd6, 0xd3, 0x3f, 0x5a, 0xe9, 0x6f, 0xff, 0x9c, 0xf7, 0x6f, 0xfb, 0xfd, 0x9f, 0x47,
		0xdb, 0xe0, 0x49, 0x3c, 0x8b, 0xed, 0x74, 0x1d, 0xdf, 0x0e, 0x5d, 0xef, 0xc6, 0x0a, 0x6e, 0x83,
		0xd0, 0x69, 0xeb, 0x21, 0xca, 0xcc, 0x93, 0xc0, 0x14, 0x30, 0x05, 0x4c, 0x01, 0x53, 0x54, 0x2c,
		0x9f, 0x68, 0xb2, 0xc4, 0x77, 0xed, 0x05, 0x8e, 0xaf, 0xbb, 0xb7, 0x38, 0x7d, 0x02, 0xab, 0x01,
		0xab, 0x01, 0xab, 0x01, 0xab, 0x01, 0xab, 0x01, 0x15, 0xfd, 0x22, 0xb7, 0x9b, 0x48, 0x25, 0xb5,
		0x69, 0xb2, 0xf9, 0xd2, 0xd5, 0xf3, 0x9b, 0xbe, 0x39, 0xd5, 0xfc, 0xd4, 0x6c, 0x31, 0x61, 0x1b,
		0x5c, 0x82, 0x5a, 0x7e, 0x77, 0xef, 0xba, 0xbc, 0x95, 0xfc, 0xfc, 0x6b, 0xf1, 0x0a, 0x7e, 0xfe,
		0x35, 0x95, 0xfb, 0x92, 0x66, 0x55, 0x2a, 0xf7, 0x51, 0xb9, 0xef, 0x45, 0x31, 0xa4, 0x72, 0x5f,
		0x06, 0x9d, 0x58, 0x2a, 0xf7, 0xa5, 0xe4, 0xa4, 0x52, 0xb9, 0xcf, 0xb0, 0xc1, 0x7b, 0x87, 0x53,
		0xdb, 0x9d, 0x66, 0x32, 0xa7, 0x60, 0x87, 0x0f, 0x22, 0x92, 0x46, 0x24, 0x8d, 0x48, 0x1a, 0x91,
		0x34, 0x15, 0xcb, 0x77, 0xbc, 0x5e, 0x7b, 0xb8, 0x8f, 0x2b, 0xe2, 0x82, 0xce, 0x25, 0x9c, 0x92,
		0x42, 0xdb, 0x27, 0x5e, 0x6f, 0xb8, 0xbd, 0xbd, 0x0e, 0x25, 0x18, 0xae, 0x7d, 0xe7, 0xbf, 0x3d,
		0xc7, 0x6b, 0xdc, 0xea, 0x2d, 0x3b, 0x77, 0x8f, 0x60, 0xc1, 0x61, 0xc1, 0x61, 0xc1, 0x61, 0xc1,
		0x51, 0xb1, 0x7c, 0xee, 0xc8, 0x7f, 0xfc, 0x1f, 0x55, 0x17, 0x16, 0x7a, 0x0c, 0x55, 0x17, 0xa2,
		0x0d, 0x3d, 0x77, 0xe4, 0x67, 0x7c, 0xf0, 0xa9, 0xb9, 0x90, 0x19, 0xbc, 0xee, 0x7e, 0xb9, 0xb5,
		0x7c, 0xd5, 0x1b, 0x19, 0xa6, 0x4f, 0x00, 0xae, 0x81, 0x6b, 0xe0, 0x1a, 0xb8, 0x56, 0x83, 0x6b,
		0x6a, 0x9a, 0x41, 0xd7, 0xd0, 0x35, 0x74, 0x1d, 0x79, 0xe8, 0xa9, 0x69, 0x06, 0x5f, 0x2b, 0xf1,
		0xb5, 0x1f, 0x04, 0xae, 0x1e, 0x5b, 0x0f, 0x5b, 0x87, 0xab, 0xe1, 0x6a, 0xb8, 0x1a, 0xae, 0x56,
		0xb1, 0x7c, 0xe5, 0x98, 0x75, 0x01, 0xaa, 0x4e, 0x87, 0xaa, 0x0b, 0x09, 0xa1, 0x55, 0xa1, 0x78,
		0x00, 0x57, 0xaf, 0x2b, 0x57, 0x17, 0x8a, 0xfb, 0x50, 0x35, 0x54, 0x2d, 0x4f, 0xd5, 0x81, 0xe7,
		0xeb, 0x41, 0xf5, 0xa0, 0x71, 0x98, 0x1a, 0xa6, 0x86, 0xa9, 0x61, 0x6a, 0x15, 0xcb, 0x27, 0x11,
		0x64, 0x45, 0xa1, 0x9a, 0x50, 0x35, 0x48, 0xad, 0x3c, 0xf4, 0x24, 0x82, 0x80, 0xd4, 0x3a, 0x48,
		0xad, 0x58, 0xd3, 0x95, 0x4a, 0xae, 0x00, 0x35, 0x40, 0x0d, 0x50, 0x03, 0xd4, 0x00, 0x35, 0x40,
		0x0d, 0x50, 0x03, 0xd4, 0x00, 0x75, 0x36, 0x81, 0x9a, 0x1a, 0x63, 0x42, 0xf5, 0x9d, 0xfc, 0xeb,
		0x65, 0xab, 0x2d, 0x76, 0x71, 0x4d, 0x4d, 0x31, 0x35, 0xdb, 0x4b, 0xc8, 0xe6, 0xb2, 0x5f, 0x4b,
		0xec, 0xe2, 0x7a, 0x19, 0x6b, 0x88, 0x35, 0x3b, 0x61, 0xa1, 0xf0, 0xd5, 0xf2, 0x1c, 0xf7, 0xe6,
		0xcb, 0xe7, 0x8e, 0x1f, 0xc8, 0x95, 0x12, 0x9b, 0x69, 0x99, 0x8a, 0x62, 0x09, 0x3b, 0xfa, 0x54,
		0x14, 0xa3, 0xa2, 0xd8, 0x8b, 0x92, 0x48, 0x45, 0xb1, 0x0c, 0x46, 0x00, 0xa9, 0x28, 0x96, 0x52,
		0x84, 0x8f, 0x8a, 0x62, 0x86, 0x0d, 0x36, 0xbe, 0xd8, 0x9e, 0xe7, 0xb4, 0xac, 0x56, 0xc7, 0x6e,
		0x5a, 0xbe, 0xd3, 0xed, 0xf8, 0xa1, 0x62, 0x55, 0xb1, 0x27, 0x1e, 0xc6, 0x76, 0x04, 0xdb, 0x11,
		0xe9, 0x8a, 0x54, 0x62, 0x62, 0x95, 0x9c, 0x68, 0xe9, 0xc4, 0x8b, 0xd8, 0x8e, 0x78, 0x2c, 0x33,
		0x6c, 0x47, 0xdc, 0x7b, 0x71, 0xb6, 0x23, 0xa2, 0x3f, 0x87, 0xed, 0x88, 0xcc, 0x0e, 0x3d, 0xdb,
		0x11, 0x29, 0xb4, 0xba, 0x0e, 0xf9, 0x3d, 0x93, 0x08, 0x9b, 0x65, 0x7b, 0xa1, 0xe3, 0x79, 0xb6,
		0x1e, 0x6f, 0xcf, 0x3c, 0x09, 0xd8, 0x06, 0xb6, 0x81, 0x6d, 0x60, 0x1b, 0xd8, 0x06, 0xb6, 0x81,
		0x6d, 0x60, 0x1b, 0xd8, 0x06, 0xb6, 0xd7, 0x04, 0xb6, 0x3f, 0x07, 0x81, 0xdb, 0x4c, 0x00, 0xb5,
		0x47, 0xcf, 0x01, 0xb4, 0x01, 0x6d, 0x40, 0x1b, 0xd0, 0x56, 0xb1, 0xfc, 0xb6, 0xdd, 0xb0, 0xec,
		0x66, 0xd3, 0x77, 0xc4, 0x4f, 0xf3, 0x6c, 0x3e, 0xb8, 0x7e, 0x56, 0xa1, 0xed, 0x73, 0x3b, 0x0c,
		0x1d, 0xdf, 0x53, 0x23, 0xee, 0xdc, 0x7f, 0x3e, 0xe5, 0xad, 0x43, 0xdb, 0xba, 0xae, 0x5a, 0x6f,
		0x6b, 0x3f, 0x8a, 0xfd, 0xad, 0xa3, 0x87, 0x7f, 0xde, 0xfe, 0x51, 0xee, 0xff, 0x23, 0xc7, 0x4a,
		0x6a, 0xb2, 0x92, 0x8e, 0x77, 0x71, 0x13, 0x58, 0x4b, 0x27, 0x4f, 0x62, 0x35, 0x65, 0x35, 0x65,
		0x35, 0x65, 0x35, 0x25, 0x6c, 0x45, 0xd8, 0x8a, 0xb0, 0x15, 0x61, 0x2b, 0xc2, 0x56, 0x84, 0xad,
		0xd6, 0x04, 0xb6, 0x75, 0xab, 0x16, 0x3f, 0x7c, 0x0c, 0x98, 0x0d, 0x66, 0x83, 0xd9, 0x60, 0xb6,
		0x8a, 0xe5, 0x53, 0xbe, 0x78, 0x35, 0x29, 0x9b, 0xf2, 0xc5, 0x70, 0x76, 0x02, 0x83, 0x4f, 0xf9,
		0x62, 0x38, 0x5b, 0xb4, 0xa5, 0xb5, 0x2e, 0x0d, 0xf1, 0xf8, 0xac, 0xf7, 0xf2, 0x54, 0x88, 0x38,
		0x1e, 0xbc, 0xf9, 0xbf, 0x3e, 0x4c, 0x5e, 0x9c, 0x42, 0x11, 0x6a, 0x96, 0x98, 0xac, 0x05, 0x66,
		0xb9, 0x5e, 0xc4, 0x23, 0x9b, 0x5b, 0xc6, 0xb2, 0x11, 0x03, 0x97, 0x46, 0xac, 0x52, 0x84, 0xb9,
		0xf3, 0x2a, 0xc4, 0x0f, 0x14, 0x87, 0xc8, 0xa0, 0x2f, 0x4f, 0x71, 0x88, 0xb4, 0x7c, 0xef, 0xa9,
		0xe5, 0xb5, 0x1c, 0xfb, 0xda, 0x77, 0x44, 0x6a, 0xf0, 0x4c, 0xbc, 0x3c, 0x01, 0xfe, 0xce, 0x9d,
		0x8f, 0x97, 0x92, 0x57, 0xaf, 0x46, 0xbc, 0xb1, 0x6b, 0x3c, 0x78, 0xe9, 0x88, 0xa9, 0x4c, 0x11,
		0x0e, 0xd1, 0xe2, 0x1b, 0x54, 0xdb, 0x41, 0x50, 0x11, 0xd4, 0xf1, 0xd7, 0x12, 0xab, 0xb6, 0xd3,
		0xe8, 0xf4, 0xbc, 0xd0, 0xf1, 0x03, 0xf9, 0x82, 0x3b, 0xd3, 0x96, 0xa9, 0xb9, 0x93, 0x31, 0x59,
		0xd0, 0x92, 0x07, 0x75, 0x99, 0x50, 0x97, 0x0b, 0x7d, 0xd9, 0xc8, 0x66, 0x84, 0x47, 0xbc, 0xe6,
		0x8e, 0xff, 0xdd, 0xfa, 0x7c, 0x1b, 0x3a, 0x8a, 0x65, 0xfe, 0xa7, 0x4f, 0x60, 0x4b, 0x97, 0x2d,
		0xdd, 0x74, 0xe5, 0x28, 0x31, 0x59, 0x4a, 0x4e, 0x9e, 0x64, 0x65, 0x4a, 0x58, 0xae, 0xe4, 0xdd,
		0xca, 0x97, 0x20, 0xa6, 0x52, 0x52, 0xdc, 0xd7, 0x3d, 0x60, 0x5f, 0xf7, 0xee, 0xc5, 0xc9, 0x9e,
		0x8c, 0xfe, 0x1c, 0x76, 0x75, 0x33, 0x3b, 0xf4, 0x85, 0x83, 0x52, 0xa9, 0xb2, 0x5f, 0x2a, 0xe5,
		0xf7, 0xf7, 0xf6, 0xf3, 0x87, 0xe5, 0x72, 0xa1, 0x52, 0x20, 0x9d, 0x32, 0xf1, 0x56, 0xd7, 0x21,
		0x9d, 0xd2, 0xff, 0x6e, 0xf9, 0x4e, 0xe8, 0xbb, 0xca, 0xcc, 0x3d, 0x79, 0x06, 0xd4, 0x0d, 0x75,
		0x43, 0xdd, 0x50, 0x37, 0xd4, 0x0d, 0x75, 0x43, 0xdd, 0x50, 0x37, 0xd4, 0x0d, 0x75, 0xaf, 0x21,
		0x75, 0x87, 0xea, 0x71, 0xee, 0x90, 0x38, 0x37, 0xc4, 0x0d, 0x71, 0x43, 0xdc, 0x10, 0x37, 0xc4,
		0x0d, 0x71, 0x43, 0xdc, 0x10, 0x37, 0xc4, 0xbd, 0xde, 0xc4, 0xad, 0x1e, 0xe7, 0x0e, 0x89, 0x73,
		0x43, 0xdd, 0x50, 0x37, 0xd4, 0x0d, 0x75, 0x43, 0xdd, 0x50, 0x37, 0xd4, 0x0d, 0x75, 0x43, 0xdd,
		0xcb, 0x47, 0xdd, 0x14, 0x11, 0x30, 0x3d, 0xc2, 0x3d, 0x3a, 0xc3, 0x27, 0x7c, 0x92, 0x65, 0x53,
		0xf3, 0x20, 0xf7, 0xb0, 0x58, 0x40, 0xfd, 0xcd, 0xe4, 0x8d, 0xb3, 0x52, 0x35, 0x40, 0xe0, 0x2c,
		0x9b, 0xc4, 0xf9, 0xee, 0x19, 0x02, 0x93, 0xf3, 0x39, 0x84, 0xb5, 0x9f, 0xf3, 0x49, 0x9c, 0x4f,
		0x4a, 0xd3, 0x45, 0xcb, 0xd6, 0xe2, 0x21, 0xee, 0x8a, 0x29, 0x5f, 0x34, 0xa0, 0x71, 0xc1, 0x80,
		0xda, 0xc5, 0x02, 0x09, 0x5f, 0x28, 0x50, 0xa3, 0x92, 0xcd, 0xb2, 0x55, 0xb2, 0x91, 0x2a, 0x9d,
		0xa4, 0x4b, 0x3d, 0xa9, 0xd5, 0x59, 0xd8, 0x48, 0xd0, 0x80, 0x06, 0x6b, 0x97, 0x19, 0xb8, 0xe4,
		0xde, 0xb9, 0x41, 0x58, 0x0d, 0x43, 0xb3, 0x13, 0x9f, 0xb9, 0xf7, 0xae, 0x77, 0xd2, 0x72, 0x06,
		0x6b, 0xd0, 0xc0, 0x0b, 0xf4, 0x7a, 0xad, 0x96, 0x41, 0xb9, 0x89, 0xf7, 0xf6, 0x77, 0xb9, 0xc6,
		0xce, 0xfc, 0xa6, 0xe3, 0x3b, 0xcd, 0xd7, 0xb7, 0xe3, 0xa6, 0x12, 0x1d, 0x1e, 0xa1, 0x79, 0xad,
		0x3a, 0x9f, 0x73, 0x46, 0x85, 0x41, 0x54, 0x66, 0x70, 0xbc, 0xb9, 0x1b, 0x7d, 0xe6, 0x45, 0xfb,
		0x44, 0x44, 0x23, 0x30, 0x1d, 0x7c, 0x9d, 0x41, 0x8f, 0x31, 0xda, 0xe2, 0xa3, 0x1c, 0x6d, 0x78,
		0x17, 0x1f, 0xa4, 0x08, 0x03, 0x94, 0x6b, 0x4c, 0x1c, 0xaa, 0x68, 0x03, 0x73, 0x2f, 0x58, 0x3f,
		0xfc, 0x7c, 0x44, 0x93, 0x88, 0x57, 0xb5, 0x22, 0xb6, 0xf7, 0x67, 0xe2, 0xe5, 0x09, 0x79, 0x73,
		0xa6, 0x5e, 0x9b, 0x98, 0x77, 0x26, 0xe6, 0x85, 0xc9, 0x79, 0x5b, 0xba, 0xf2, 0x13, 0xb7, 0x8a,
		0x43, 0xce, 0x6e, 0x7e, 0x73, 0xfc, 0xd0, 0x0d, 0x1c, 0xcb, 0xee, 0x8e, 0x27, 0x7d, 0xcc, 0xb1,
		0x9b, 0x98, 0xd0, 0x4c, 0x8b, 0x71, 0x69, 0xc7, 0x28, 0xa8, 0x62, 0x1c, 0x44, 0x91, 0x08, 0x9a,
		0x08, 0x07, 0x49, 0xa4, 0x82, 0x22, 0xe2, 0x41, 0x10, 0xf1, 0xa0, 0x87, 0x7c, 0x90, 0x23, 0x59,
		0x52, 0x37, 0x0e, 0x5a, 0x4c, 0x2d, 0xe7, 0x73, 0xa7, 0xd3, 0x72, 0x6c, 0xcf, 0xc4, 0x6a, 0x26,
		0xeb, 0x50, 0x21, 0x29, 0xd0, 0x8a, 0xb1, 0x70, 0x7c, 0xb6, 0x03, 0xb7, 0x61, 0x35, 0xed, 0xd0,
		0xb6, 0x7c, 0xdb, 0x24, 0xa9, 0xfe, 0xae, 0xe3, 0x1e, 0xb7, 0x88, 0x0c, 0x21, 0x43, 0xc8, 0x50,
		0x4c, 0xcb, 0x71, 0x9b, 0x8e, 0x17, 0xba, 0xe1, 0xad, 0x59, 0xdd, 0xcd, 0xa9, 0x14, 0x19, 0x6c,
		0x55, 0xe7, 0x4e, 0xc7, 0xaf, 0xf2, 0xda, 0x0e, 0x04, 0xcb, 0x54, 0x1e, 0x57, 0x2f, 0xab, 0xf5,
		0x8b, 0xea, 0xe5, 0x89, 0xa9, 0x0d, 0x0e, 0x37, 0xe8, 0x03, 0x91, 0x48, 0xad, 0xf0, 0x86, 0xd7,
		0xe0, 0xdb, 0xd5, 0x4b, 0x07, 0xef, 0x5f, 0xe7, 0xb2, 0xb0, 0xa9, 0xa7, 0xf1, 0xe5, 0xf6, 0x2a,
		0x2b, 0xfc, 0xe5, 0x0a, 0xab, 0x3c, 0x72, 0xe5, 0xd2, 0x0a, 0x7f, 0xb9, 0x55, 0xb6, 0xca, 0xc3,
		0x55, 0x9e, 0x71, 0x85, 0x55, 0x9e, 0x71, 0xaf, 0xca, 0x2b, 0xfc, 0xed, 0x8a, 0xab, 0xac, 0x27,
		0xc5, 0x55, 0x9e, 0x73, 0xab, 0xfc, 0xdd, 0x64, 0x06, 0xce, 0xa8, 0x85, 0xda, 0x92, 0xb8, 0x2e,
		0xec, 0x54, 0x66, 0x27, 0x36, 0xe3, 0x77, 0xec, 0x66, 0xc3, 0x0e, 0x42, 0xeb, 0xda, 0x6d, 0x85,
		0x8e, 0x2f, 0x10, 0x9b, 0x79, 0xdc, 0x22, 0xb1, 0x19, 0x62, 0x33, 0xc4, 0x66, 0xe2, 0xce, 0xa6,
		0xf5, 0x08, 0x11, 0x37, 0x02, 0xdb, 0x5c, 0x79, 0x06, 0x8d, 0xc4, 0x1c, 0xb0, 0x63, 0xe7, 0xda,
		0xee, 0xb5, 0x86, 0xe6, 0x36, 0xb0, 0x5e, 0x34, 0x0b, 0xcd, 0x42, 0xb3, 0xd0, 0xac, 0x67, 0xdf,
		0xb1, 0xf9, 0xa5, 0xd1, 0xb5, 0x7c, 0xe7, 0xbf, 0x3d, 0xd7, 0x77, 0x9a, 0xe6, 0xea, 0xf5, 0xb0,
		0x39, 0x04, 0x08, 0x01, 0x42, 0x80, 0x10, 0xa0, 0x67, 0x05, 0x68, 0x78, 0x11, 0xa9, 0x80, 0xf2,
		0x8c, 0xda, 0x41, 0x72, 0x90, 0x1c, 0x24, 0x07, 0xc9, 0x79, 0x56, 0x72, 0xbe, 0x09, 0xf8, 0x69,
		0x83, 0x46, 0x10, 0x1b, 0xc4, 0x06, 0xb1, 0x41, 0x6c, 0x9e, 0x7b, 0x47, 0xc7, 0xb3, 0x3f, 0xb7,
		0x24, 0x5c, 0xab, 0x49, 0x43, 0x04, 0x87, 0xd0, 0x2e, 0xb4, 0x0b, 0xed, 0x4a, 0x40, 0xbb, 0x6e,
		0xc2, 0xaf, 0x56, 0xe8, 0xb6, 0x9d, 0x4e, 0x2f, 0x34, 0xd7, 0xaf, 0xfb, 0x8d, 0x21, 0x3e, 0x88,
		0x0f, 0xe2, 0x13, 0xd3, 0x72, 0x7a, 0xae, 0x17, 0x16, 0x2a, 0x02, 0xda, 0x53, 0x31, 0x68, 0x42,
		0xa6, 0xca, 0x9e, 0x40, 0x6d, 0x01, 0xc9, 0xaa, 0x79, 0xd2, 0x65, 0x72, 0x84, 0xab, 0xe0, 0x69,
		0xd4, 0x37, 0x93, 0x28, 0x7e, 0x24, 0x59, 0xbd, 0x4e, 0x6b, 0x08, 0x2a, 0xe5, 0xf2, 0x5e, 0x39,
		0xc3, 0xc3, 0x90, 0x52, 0x79, 0x88, 0x5a, 0x86, 0xe9, 0xe3, 0x8b, 0xdb, 0x6c, 0x3a, 0x9e, 0x39,
		0x78, 0x8c, 0xdb, 0x31, 0xf7, 0x9b, 0xae, 0xed, 0x56, 0x80, 0xe3, 0x04, 0xbb, 0xc0, 0x2e, 0x38,
		0x4e, 0xcf, 0xbf, 0xa3, 0xdb, 0xfd, 0x56, 0xb1, 0xbc, 0x66, 0x57, 0x2c, 0x1f, 0xf1, 0x71, 0x83,
		0x88, 0x10, 0x22, 0x84, 0x08, 0x21, 0x42, 0x11, 0x44, 0x68, 0x18, 0x7c, 0x91, 0x97, 0xa2, 0x71,
		0xb3, 0x08, 0x12, 0x82, 0x84, 0x20, 0x11, 0xd1, 0x21, 0xa2, 0x43, 0x44, 0x87, 0x88, 0x0e, 0x11,
		0x9d, 0x27, 0xbb, 0xb9, 0xdd, 0xf9, 0xec, 0xb6, 0xdc, 0xf0, 0xd6, 0x6a, 0x76, 0xda, 0xb6, 0x2b,
		0x10, 0xda, 0x79, 0xdc, 0x20, 0x14, 0x02, 0x85, 0x40, 0x21, 0x31, 0x2d, 0x27, 0x08, 0x7d, 0xd7,
		0xbb, 0x91, 0xf0, 0x8a, 0x0e, 0xb2, 0xac, 0x41, 0xbd, 0x56, 0xe8, 0x8a, 0x9e, 0x15, 0x9d, 0x69,
		0x11, 0x15, 0x42, 0x85, 0x50, 0x21, 0x82, 0x33, 0xcf, 0xbd, 0xa3, 0x4c, 0x25, 0x53, 0xaa, 0x97,
		0x22, 0x37, 0xc8, 0x0d, 0xd0, 0xf3, 0xd2, 0x3b, 0x76, 0xbe, 0x36, 0xcc, 0xc5, 0x66, 0xd0, 0x08,
		0x5a, 0x83, 0xd6, 0xa0, 0x35, 0xa0, 0xcd, 0xb3, 0x62, 0xd3, 0x75, 0x7c, 0x3b, 0x74, 0xbd, 0x1b,
		0xeb, 0xda, 0x77, 0xfe, 0xdb, 0x73, 0xbc, 0xc6, 0xad, 0x80, 0xf8, 0x3c, 0xd1, 0xa8, 0x79, 0x46,
		0xcf, 0xc4, 0x1c, 0xc3, 0xdb, 0xae, 0x13, 0x1c, 0xbd, 0xbd, 0x38, 0xf9, 0xbf, 0x7a, 0xb1, 0x5e,
		0xae, 0xff, 0xfa, 0xdb, 0x5f, 0x28, 0x1d, 0x4a, 0x87, 0xd2, 0xc5, 0xb5, 0x9c, 0x95, 0x2f, 0xc6,
		0x7c, 0x76, 0x7e, 0x72, 0x51, 0xbd, 0x3c, 0xfd, 0xf0, 0x6b, 0x7d, 0x20, 0x1a, 0xbf, 0x9f, 0x7c,
		0x78, 0xf3, 0xe7, 0xea, 0x96, 0x65, 0x1e, 0xea, 0x62, 0x79, 0x20, 0x8a, 0x2b, 0x58, 0xf7, 0x70,
		0x24, 0xfa, 0x2b, 0xfd, 0xe5, 0xc6, 0x2b, 0xda, 0xba, 0xd5, 0x75, 0x4c, 0x08, 0x76, 0xda, 0x9d,
		0xa6, 0x23, 0xc1, 0x37, 0xc3, 0x76, 0xcc, 0x91, 0xe6, 0xec, 0xfc, 0xe4, 0x03, 0xf0, 0x02, 0xbc,
		0x00, 0x2f, 0x71, 0x2d, 0xc7, 0xf1, 0x7a, 0xed, 0xa1, 0xb3, 0xd1, 0x11, 0x71, 0xd5, 0x4a, 0x06,
		0x6d, 0x9c, 0x78, 0xbd, 0xf6, 0xe0, 0x4b, 0x65, 0x59, 0x01, 0xbb, 0x92, 0x87, 0x44, 0xbb, 0x1c,
		0x12, 0x45, 0xc4, 0x10, 0x31, 0x52, 0x0a, 0x45, 0x99, 0x98, 0x94, 0xc2, 0xd4, 0x1d, 0x1b, 0x52,
		0x0a, 0x49, 0x29, 0xd4, 0xa0, 0x8f, 0xff, 0x7e, 0x0e, 0x02, 0xab, 0xd5, 0xb1, 0x05, 0x0a, 0xec,
		0xdc, 0x35, 0x05, 0x79, 0x40, 0x1e, 0x90, 0x47, 0x4c, 0xcb, 0x59, 0x93, 0x5d, 0xae, 0xc0, 0xf1,
		0xbf, 0x39, 0xbe, 0x75, 0xe3, 0x77, 0x7a, 0x5d, 0x73, 0xed, 0x79, 0xd0, 0x1a, 0xf2, 0x83, 0xfc,
		0x20, 0x3f, 0x71, 0x67, 0xd2, 0x5a, 0x24, 0xf4, 0x04, 0xe1, 0x30, 0x3e, 0x65, 0xb9, 0x41, 0xa7,
		0x35, 0x8a, 0x54, 0x99, 0x4b, 0xd0, 0x4c, 0x93, 0xe8, 0x10, 0x3a, 0x84, 0x0e, 0x81, 0x41, 0xcf,
		0x0a, 0x51, 0xaf, 0xdb, 0xed, 0xf8, 0xa1, 0xd3, 0x14, 0xbd, 0x1a, 0xfd, 0xc9, 0x56, 0x91, 0x23,
		0xe4, 0x08, 0x39, 0x8a, 0x69, 0x39, 0x5c, 0x8f, 0x1e, 0x29, 0x18, 0xc8, 0xf5, 0xe8, 0xa9, 0x7c,
		0x39, 0xae, 0x47, 0x5f, 0xd6, 0x2f, 0xc7, 0xf5, 0xe8, 0x4b, 0xfa, 0xdd, 0xb8, 0x1e, 0x7d, 0x59,
		0x67, 0x1c, 0xd7, 0xa3, 0x2f, 0xed, 0x97, 0xe3, 0x7a, 0xf4, 0xe5, 0xfc, 0x6e, 0x5c, 0x8f, 0xbe,
		0x70, 0xc7, 0x71, 0x3d, 0x7a, 0x66, 0x62, 0x34, 0xdf, 0x5a, 0xb6, 0x67, 0xb9, 0x02, 0x3b, 0xe4,
		0x93, 0x86, 0x88, 0xc4, 0x10, 0x89, 0x21, 0x12, 0x93, 0xca, 0x24, 0xda, 0x24, 0x35, 0x4f, 0x4d,
		0x61, 0x9e, 0x0e, 0x05, 0xe5, 0x8e, 0x36, 0x0b, 0xa4, 0xe6, 0xa5, 0x3d, 0x04, 0xa5, 0xfc, 0x61,
		0x89, 0xcc, 0x3c, 0x19, 0x18, 0x4c, 0x86, 0x3a, 0xfe, 0xee, 0xda, 0x45, 0xab, 0x1b, 0x08, 0x5c,
		0xed, 0x3b, 0x6d, 0x09, 0xee, 0x80, 0x3b, 0xe0, 0x8e, 0x98, 0x96, 0x23, 0x98, 0x18, 0x63, 0xd0,
		0xc6, 0x3b, 0xc7, 0xbb, 0x09, 0xbf, 0x00, 0x1e, 0x8b, 0xad, 0x7a, 0x07, 0x80, 0x47, 0xda, 0x43,
		0x50, 0xd9, 0x03, 0x3b, 0x52, 0xc3, 0x8e, 0x0d, 0x45, 0x8b, 0xcc, 0x55, 0x3d, 0xaf, 0x13, 0xc6,
		0x4f, 0x9e, 0xcb, 0x05, 0x8d, 0x2f, 0x4e, 0xdb, 0xee, 0xda, 0x43, 0x39, 0xcb, 0xed, 0x76, 0xba,
		0x8e, 0xd7, 0x18, 0xa2, 0x82, 0x65, 0x37, 0x1a, 0x4e, 0x10, 0x58, 0xdd, 0x8e, 0xeb, 0x85, 0xc1,
		0xee, 0xfc, 0x3f, 0xed, 0x06, 0x81, 0xdb, 0x0c, 0x86, 0xff, 0xbf, 0x3b, 0xfa, 0x68, 0x2e, 0x56,
		0x2e, 0xa0, 0xdf, 0x6b, 0x84, 0xde, 0xa4, 0x32, 0xc5, 0xf4, 0x35, 0xaa, 0xc3, 0x27, 0x9d, 0x0f,
		0x1f, 0x5b, 0x9f, 0xf7, 0x87, 0xfa, 0xc7, 0xc1, 0x2b, 0x0c, 0xff, 0xbf, 0x3e, 0x06, 0x9d, 0x0d,
		0x9d, 0x21, 0x8a, 0x30, 0x3c, 0xb9, 0x66, 0x27, 0x2c, 0x14, 0xa2, 0x87, 0x0e, 0xef, 0x2e, 0x67,
		0x1f, 0x7d, 0x3e, 0xa2, 0x41, 0x4c, 0xd6, 0xb7, 0x88, 0x1f, 0x8b, 0xcb, 0x87, 0x26, 0x5c, 0x28,
		0xc4, 0x83, 0xa6, 0x1c, 0x28, 0xc6, 0x7f, 0x62, 0xdc, 0x27, 0xc7, 0x7b, 0xba, 0xe2, 0x73, 0xec,
		0xc6, 0x8b, 0x8c, 0xe7, 0x1a, 0x13, 0x6b, 0x33, 0x74, 0xaa, 0x62, 0xeb, 0x8d, 0xc1, 0x54, 0xc1,
		0xa5, 0xc2, 0xa5, 0x4a, 0xdf, 0xa5, 0x8a, 0x3b, 0xf5, 0x4c, 0x57, 0x27, 0xd9, 0xd5, 0x4a, 0x89,
		0x7f, 0x8d, 0xa7, 0xa6, 0xe4, 0x14, 0x55, 0x9a, 0xaa, 0xd2, 0x53, 0x56, 0x6d, 0xea, 0xaa, 0x4d,
		0x61, 0xbd, 0xa9, 0x2c, 0xe4, 0x9a, 0x18, 0xda, 0x9e, 0x71, 0xd4, 0x64, 0xc6, 0xf2, 0xcc, 0xd3,
		0xf9, 0x67, 0xd6, 0xce, 0x42, 0x4a, 0xde, 0x9b, 0x41, 0xe7, 0x8e, 0xa5, 0x6a, 0x7c, 0xdd, 0x8a,
		0xc1, 0x96, 0xf2, 0x1c, 0x0d, 0xbc, 0x6b, 0x18, 0x31, 0x44, 0x0c, 0x11, 0xc3, 0x8c, 0x8a, 0xa1,
		0x71, 0x71, 0x99, 0xc7, 0xf3, 0xb4, 0x22, 0xd0, 0x94, 0xcc, 0x8e, 0xf6, 0xe4, 0x3f, 0x99, 0x49,
		0xb0, 0x29, 0x1d, 0x68, 0x56, 0x8a, 0x76, 0xce, 0x44, 0x3d, 0xa5, 0xdb, 0x55, 0x08, 0x7e, 0x0a,
		0x4d, 0x8f, 0x87, 0x43, 0x25, 0x18, 0x90, 0x4e, 0x6a, 0xa8, 0x04, 0x8b, 0xd6, 0x24, 0x32, 0x5c,
		0x1b, 0xd9, 0x68, 0xa5, 0xb6, 0xbc, 0xf4, 0xd5, 0x76, 0xc2, 0x2f, 0x1d, 0x79, 0xf6, 0x1a, 0x37,
		0x6b, 0xb8, 0xda, 0xdc, 0x2f, 0x45, 0xfa, 0x47, 0x15, 0x8e, 0x83, 0xe3, 0xe0, 0xb8, 0xac, 0x72,
		0x9c, 0x4c, 0xa5, 0xd3, 0x19, 0xc7, 0x56, 0x20, 0x51, 0xcb, 0xb0, 0xf2, 0x69, 0x26, 0x64, 0xda,
		0x2f, 0x7c, 0x75, 0x6e, 0x8d, 0x4b, 0xa3, 0xce, 0x53, 0xeb, 0x87, 0xad, 0x23, 0xb3, 0xc8, 0x2c,
		0x32, 0x8b, 0xbb, 0x8c, 0xbb, 0x8c, 0xbb, 0x8c, 0xbb, 0x8c, 0xbb, 0xbc, 0x3a, 0xee, 0x72, 0xa2,
		0x5b, 0xc3, 0x86, 0x29, 0x61, 0xd3, 0x76, 0x64, 0x53, 0xc3, 0x46, 0xc4, 0xb7, 0x6b, 0x94, 0xb1,
		0xb1, 0x29, 0x9a, 0x29, 0x76, 0x3c, 0x78, 0xa3, 0x8b, 0x58, 0x09, 0x63, 0xf1, 0x07, 0x36, 0x6e,
		0x9d, 0x3c, 0x47, 0xa6, 0x36, 0x9e, 0x93, 0x76, 0xae, 0x4c, 0x91, 0x5c, 0x19, 0x6d, 0x68, 0x26,
		0x57, 0xe6, 0x71, 0x34, 0x8f, 0x5c, 0x19, 0xfc, 0x5d, 0xfc, 0x5d, 0xfc, 0xdd, 0x28, 0x96, 0x47,
		0xae, 0xcc, 0x26, 0xb9, 0x32, 0x88, 0x21, 0x62, 0x88, 0x18, 0x12, 0xfc, 0x23, 0xf8, 0x47, 0xf0,
		0x8f, 0xe0, 0x1f, 0xc1, 0xbf, 0x94, 0xe8, 0x8b, 0x5c, 0x19, 0x38, 0x0e, 0x8e, 0x83, 0xe3, 0x8c,
		0x2d, 0x8f, 0x5c, 0x19, 0x4d, 0x99, 0x26, 0x57, 0x06, 0x99, 0x45, 0x66, 0x91, 0x59, 0xdc, 0x65,
		0xdc, 0x65, 0xdc, 0x65, 0xdc, 0x65, 0xdc, 0xe5, 0xc4, 0x3e, 0xb9, 0x92, 0xb9, 0x32, 0x26, 0x09,
		0x1b, 0x9b, 0x1a, 0xa9, 0x32, 0x1f, 0x87, 0x2f, 0x44, 0xdd, 0x2c, 0xa5, 0x01, 0x4f, 0xb5, 0x6e,
		0xd6, 0x68, 0x88, 0x33, 0x53, 0x37, 0xeb, 0x9b, 0x61, 0xdd, 0xac, 0x6f, 0xd4, 0xcd, 0xd2, 0xf6,
		0x68, 0xa8, 0x9b, 0x15, 0x57, 0x7c, 0xa8, 0x9b, 0x45, 0xdd, 0xac, 0x64, 0x82, 0x02, 0xe4, 0x02,
		0x0a, 0x4d, 0xbd, 0x47, 0xab, 0x93, 0xf5, 0x79, 0xb0, 0x6e, 0xb7, 0x1c, 0xe1, 0x28, 0xdf, 0x5d,
		0xbb, 0xc4, 0xf7, 0x88, 0xef, 0x11, 0xdf, 0xcb, 0x68, 0x7c, 0x8f, 0xdc, 0xc0, 0x27, 0xa4, 0x50,
		0x69, 0xe3, 0x63, 0xb6, 0x7d, 0xa4, 0x11, 0x69, 0x44, 0x1a, 0x33, 0x2a, 0x8d, 0x6c, 0x7d, 0x44,
		0x79, 0x31, 0xb6, 0x3e, 0xd8, 0xfa, 0x60, 0xeb, 0x43, 0x46, 0x0b, 0xe5, 0x5a, 0xa9, 0x2d, 0x35,
		0x8b, 0x85, 0xbe, 0xed, 0x05, 0xae, 0xf1, 0x96, 0xc6, 0x1c, 0x12, 0xbb, 0xd7, 0x3a, 0x1c, 0x06,
		0x87, 0xc1, 0x61, 0xb8, 0xa8, 0x4b, 0x20, 0x8b, 0xcd, 0x76, 0x20, 0x2e, 0x86, 0x83, 0x36, 0x91,
		0x40, 0x24, 0x10, 0x09, 0x44, 0x02, 0xd5, 0x25, 0x90, 0xa4, 0x98, 0x51, 0x8e, 0xc4, 0xb7, 0xcc,
		0x15, 0x90, 0xf9, 0x83, 0x02, 0x32, 0x91, 0xa6, 0x10, 0x05, 0x64, 0xa4, 0xd7, 0x32, 0x36, 0x8d,
		0xb5, 0x05, 0x91, 0x4d, 0x63, 0x70, 0x14, 0x1c, 0x05, 0x47, 0xc1, 0x51, 0xc9, 0x40, 0x25, 0x9b,
		0xc6, 0x48, 0x23, 0xd2, 0x88, 0x34, 0xb2, 0x69, 0x1c, 0xed, 0xc5, 0xd8, 0x34, 0x66, 0xd3, 0x98,
		0x4d, 0x63, 0x19, 0x2d, 0x94, 0x6b, 0x85, 0x4d, 0xe3, 0xf9, 0x24, 0xc6, 0xa6, 0x31, 0x1c, 0x06,
		0x87, 0xe1, 0xa2, 0x2e, 0x97, 0x2c, 0xb2, 0x69, 0x8c, 0x04, 0x22, 0x81, 0x48, 0xe0, 0xd2, 0x4a,
		0x20, 0x9b, 0xc6, 0x93, 0x4d, 0xe3, 0x8c, 0x55, 0x52, 0xf8, 0x83, 0x4a, 0x0a, 0xba, 0x03, 0x9e,
		0x7e, 0x25, 0x85, 0x3f, 0xb2, 0x52, 0x49, 0xe1, 0xfb, 0x30, 0x04, 0xee, 0x07, 0x66, 0xf5, 0x14,
		0xa6, 0xad, 0x50, 0x55, 0x41, 0x19, 0x36, 0xa8, 0xaa, 0x10, 0x57, 0x88, 0xa8, 0xaa, 0x40, 0x55,
		0x85, 0x64, 0x78, 0x9d, 0x04, 0x19, 0xa1, 0xa9, 0x37, 0x6d, 0xe0, 0x73, 0xcb, 0x6e, 0x7c, 0x6d,
		0xb9, 0x41, 0x38, 0x5c, 0x67, 0xe4, 0xdc, 0xee, 0x47, 0xed, 0xe2, 0x7a, 0xe3, 0x7a, 0xe3, 0x7a,
		0x67, 0xd4, 0xf5, 0x66, 0x17, 0x38, 0xca, 0x8b, 0xb1, 0x0b, 0xcc, 0x2e, 0x30, 0xbb, 0xc0, 0x32,
		0x5a, 0x28, 0xd7, 0xca, 0x32, 0xee, 0x02, 0xb7, 0xed, 0xef, 0x96, 0xdd, 0x0b, 0xbf, 0x58, 0xd7,
		0xb6, 0xdb, 0xea, 0xf9, 0x8e, 0xe0, 0xae, 0xc7, 0x6c, 0xd3, 0x10, 0x18, 0x04, 0x06, 0x81, 0x65,
		0x98, 0xc0, 0x0e, 0x04, 0x01, 0xac, 0x0c, 0x80, 0x01, 0x60, 0x00, 0x58, 0xac, 0xa1, 0x2a, 0x96,
		0xc1, 0xaf, 0xe5, 0xc1, 0x2f, 0xb6, 0x5a, 0x77, 0xef, 0x6f, 0x13, 0x65, 0xed, 0x94, 0xee, 0xff,
		0xef, 0x72, 0xf8, 0x5a, 0x1c, 0xd5, 0x8d, 0xa2, 0x6c, 0x1c, 0xd5, 0x15, 0x87, 0x68, 0x76, 0x22,
		0xb4, 0xb5, 0x91, 0x9d, 0x08, 0xfc, 0x60, 0xfc, 0x60, 0xfc, 0x60, 0x63, 0x3f, 0x98, 0x9d, 0x08,
		0x1c, 0x61, 0x1c, 0xe1, 0x0c, 0x0c, 0x15, 0x3b, 0x11, 0xcb, 0xe5, 0x0a, 0xb3, 0x13, 0x01, 0x81,
		0x41, 0x60, 0x10, 0x98, 0x31, 0x81, 0xb1, 0x13, 0x01, 0x80, 0x01, 0x60, 0xe9, 0x0f, 0x15, 0x3b,
		0x11, 0xcb, 0x84, 0x5f, 0xec, 0x44, 0x3c, 0xdc, 0x89, 0xc8, 0xd6, 0xd1, 0xaf, 0xc9, 0x46, 0x04,
		0xe7, 0xbf, 0x12, 0x18, 0xfb, 0xd4, 0x4f, 0x81, 0x8d, 0x47, 0x3b, 0x0b, 0x47, 0xc1, 0xc6, 0xdf,
		0x28, 0xe6, 0x11, 0xb0, 0xe1, 0xa7, 0xe3, 0x1d, 0xfd, 0xca, 0x73, 0xf4, 0x2b, 0x71, 0x87, 0x66,
		0xed, 0x8e, 0x7e, 0xc5, 0x76, 0x40, 0xa6, 0x23, 0xdf, 0x72, 0xec, 0x6b, 0xdf, 0xb9, 0x8e, 0x33,
		0xea, 0x93, 0xed, 0xd2, 0xfd, 0x18, 0x9f, 0x3d, 0x1f, 0xcb, 0xde, 0xab, 0x57, 0xe3, 0x2d, 0xf3,
		0xdd, 0xe1, 0x54, 0xcb, 0x80, 0x60, 0xc4, 0xdb, 0x88, 0x36, 0xda, 0x80, 0x36, 0x3e, 0x2d, 0x5a,
		0x44, 0x32, 0x90, 0x8c, 0x05, 0x5f, 0x33, 0xf6, 0x69, 0x51, 0xbb, 0xf9, 0xcd, 0xf1, 0x43, 0x37,
		0x70, 0x2c, 0xbb, 0x1b, 0x6b, 0x55, 0x9d, 0x31, 0xa1, 0x99, 0x16, 0xcd, 0xf2, 0x36, 0xf2, 0x9c,
		0x20, 0x95, 0x0e, 0x39, 0x92, 0xb7, 0xa1, 0xed, 0x49, 0x1a, 0x87, 0x10, 0x05, 0x2b, 0xb8, 0x18,
		0x56, 0x6e, 0x49, 0x26, 0x51, 0xec, 0xb3, 0x1d, 0xb8, 0x0d, 0xab, 0x69, 0x87, 0xb6, 0xe5, 0xdb,
		0xa1, 0xc1, 0x56, 0xc9, 0x5d, 0xc7, 0x3d, 0x6e, 0x11, 0x19, 0x42, 0x86, 0x90, 0xa1, 0x98, 0x96,
		0xe3, 0x36, 0x1d, 0x2f, 0x74, 0xc3, 0xdb, 0x78, 0x4e, 0xc5, 0x8c, 0x14, 0x19, 0x84, 0x60, 0x73,
		0xa7, 0xe3, 0x57, 0x79, 0x6d, 0x07, 0x82, 0x09, 0x6d, 0xc7, 0xd5, 0xcb, 0x6a, 0xfd, 0xa2, 0x7a,
		0x79, 0x62, 0x6a, 0x83, 0xc3, 0x38, 0x73, 0x20, 0xb2, 0xb1, 0x22, 0xb4, 0xb1, 0x38, 0xf9, 0x8a,
		0x83, 0x6f, 0x57, 0x2f, 0x1d, 0xbc, 0x7f, 0x2d, 0xb0, 0x41, 0xb7, 0x93, 0xc9, 0x2f, 0xb7, 0x57,
		0x59, 0xe1, 0x2f, 0x57, 0x58, 0xe5, 0x91, 0x2b, 0x97, 0x56, 0xf8, 0xcb, 0xad, 0xb2, 0x55, 0x1e,
		0xae, 0xf2, 0x8c, 0x2b, 0xac, 0xf2, 0x8c, 0x7b, 0x55, 0x5e, 0xe1, 0x6f, 0x57, 0x5c, 0x65, 0x3d,
		0x29, 0xae, 0xf2, 0x9c, 0x5b, 0xe5, 0xef, 0x26, 0x33, 0x70, 0x46, 0x2d, 0xd4, 0x96, 0xc4, 0x75,
		0x79, 0xe7, 0x06, 0x61, 0x35, 0x0c, 0x0d, 0x8f, 0xbf, 0xbc, 0x77, 0xbd, 0x93, 0x96, 0x33, 0xf0,
		0xe0, 0x06, 0x44, 0xee, 0xf5, 0x5a, 0x2d, 0x03, 0xc7, 0xe3, 0xbd, 0xfd, 0x5d, 0xae, 0xb1, 0x33,
		0xbf, 0xe9, 0xf8, 0x4e, 0xf3, 0xf5, 0xed, 0xb8, 0xa9, 0x2c, 0xc7, 0x66, 0xfc, 0x8e, 0xdd, 0x6c,
		0xd8, 0x41, 0x68, 0x5d, 0xbb, 0xad, 0xd0, 0xf1, 0x05, 0x62, 0x33, 0x8f, 0x5b, 0x24, 0x36, 0x43,
		0x6c, 0x86, 0xd8, 0x4c, 0xdc, 0xd9, 0xb4, 0x26, 0x21, 0xe2, 0x20, 0xb0, 0x1a, 0x5f, 0x6c, 0xcf,
		0x73, 0x5a, 0x56, 0x2f, 0x74, 0x5b, 0xee, 0xff, 0xcc, 0x52, 0xb5, 0xee, 0xfa, 0x6f, 0x4e, 0xc3,
		0x88, 0x12, 0xa2, 0x84, 0x28, 0xc5, 0xb4, 0x9c, 0xae, 0xe3, 0x37, 0x1c, 0x2f, 0xb4, 0x6f, 0x1c,
		0x01, 0x5d, 0x32, 0x09, 0x17, 0xcb, 0xe4, 0xb9, 0x0b, 0x1c, 0x06, 0x90, 0xcc, 0x6b, 0x17, 0x4e,
		0x92, 0x96, 0xce, 0x63, 0xd7, 0x48, 0x89, 0x16, 0xf0, 0xe9, 0x44, 0xf3, 0xd5, 0xb5, 0x86, 0xa0,
		0x90, 0xcf, 0xf2, 0x20, 0xa4, 0x94, 0x07, 0x5e, 0xcb, 0x36, 0x97, 0xb8, 0x4d, 0x11, 0x0a, 0x71,
		0x9b, 0x30, 0x07, 0xcc, 0x01, 0x73, 0xc4, 0xb5, 0x9c, 0xb6, 0xdd, 0xb0, 0xec, 0x66, 0xd3, 0x77,
		0x82, 0x40, 0xc2, 0x19, 0x3a, 0x30, 0x68, 0xe3, 0xdc, 0x0e, 0x43, 0xc7, 0xf7, 0x8c, 0xb9, 0x23,
		0xf7, 0x9f, 0x4f, 0x79, 0xeb, 0xd0, 0xb6, 0xae, 0xab, 0xd6, 0xdb, 0xda, 0x8f, 0x62, 0x7f, 0xeb,
		0xe8, 0xe1, 0x9f, 0xb7, 0x7f, 0x94, 0xfb, 0xff, 0xc8, 0xad, 0xa4, 0xae, 0x36, 0x02, 0x5b, 0xe0,
		0x12, 0x8b, 0xc0, 0x8e, 0xab, 0xa9, 0xc7, 0xce, 0xb5, 0xdd, 0x6b, 0x0d, 0x67, 0xd5, 0x60, 0x92,
		0x22, 0xcd, 0x48, 0x33, 0xd2, 0x4c, 0x8c, 0xea, 0xd9, 0x77, 0x6c, 0x7e, 0x69, 0x74, 0x2d, 0xdf,
		0xf9, 0x6f, 0xcf, 0xf5, 0x1d, 0x01, 0x26, 0x7c, 0xd8, 0x1c, 0x02, 0x84, 0x00, 0x21, 0x40, 0x08,
		0xd0, 0xb3, 0x02, 0xd4, 0x09, 0x0b, 0x85, 0xaf, 0x02, 0xca, 0x33, 0x6a, 0x07, 0xc9, 0x41, 0x72,
		0x90, 0x1c, 0x24, 0xe7, 0x59, 0xc9, 0xf9, 0x26, 0xe0, 0xa7, 0x0d, 0x1a, 0x41, 0x6c, 0x10, 0x1b,
		0xc4, 0x06, 0xb1, 0x79, 0xee, 0x1d, 0x1d, 0xcf, 0xfe, 0xdc, 0x92, 0x70, 0xad, 0x26, 0x0d, 0x11,
		0x1c, 0x42, 0xbb, 0xd0, 0x2e, 0xb4, 0x2b, 0x01, 0xed, 0xba, 0x09, 0xbf, 0x0e, 0x4b, 0xf9, 0x74,
		0x7a, 0xa1, 0xb9, 0x7e, 0xdd, 0x6f, 0x0c, 0xf1, 0x41, 0x7c, 0x10, 0x9f, 0x98, 0x96, 0x63, 0x5c,
		0x1d, 0x5d, 0xa0, 0x2a, 0x3a, 0x49, 0x4a, 0x8b, 0x34, 0x47, 0x92, 0x52, 0x66, 0x86, 0x40, 0xb0,
		0x8a, 0x39, 0x69, 0x4a, 0xc9, 0xd0, 0xc7, 0x17, 0xb7, 0xd9, 0x74, 0x04, 0xb2, 0xa5, 0xc7, 0xed,
		0x98, 0xfb, 0x4d, 0xd7, 0x76, 0x2b, 0xc0, 0x71, 0x82, 0x5d, 0x60, 0x17, 0x1c, 0xa7, 0xe7, 0xdf,
		0xd1, 0xed, 0x7e, 0xab, 0x58, 0x5e, 0xb3, 0x2b, 0x76, 0xfe, 0xec, 0x71, 0x83, 0x88, 0x10, 0x22,
		0x84, 0x08, 0x21, 0x42, 0x11, 0x44, 0x68, 0x54, 0x94, 0x59, 0x5c, 0x8a, 0xc6, 0xcd, 0x22, 0x48,
		0x08, 0x12, 0x82, 0x44, 0x44, 0x87, 0x88, 0x0e, 0x11, 0x1d, 0x22, 0x3a, 0x44, 0x74, 0x9e, 0xec,
		0xe6, 0x76, 0xe7, 0xb3, 0xdb, 0x72, 0xc3, 0x5b, 0xab, 0xd9, 0x69, 0xdb, 0xae, 0x40, 0x68, 0xe7,
		0x71, 0x83, 0x50, 0x08, 0x14, 0x02, 0x85, 0xc4, 0xb4, 0x9c, 0x20, 0xf4, 0x5d, 0xef, 0x46, 0xe4,
		0x1c, 0x5a, 0x96, 0x35, 0xa8, 0xd7, 0x0a, 0x5d, 0xd1, 0xda, 0x40, 0x33, 0x2d, 0xa2, 0x42, 0xa8,
		0x10, 0x2a, 0x44, 0x70, 0xe6, 0xb9, 0x77, 0x94, 0xb9, 0xb9, 0x82, 0xdb, 0x2a, 0x90, 0x1b, 0xe4,
		0x06, 0xe8, 0x79, 0xe9, 0x1d, 0x3b, 0x5f, 0x1b, 0xe6, 0x62, 0x33, 0x68, 0x04, 0xad, 0x41, 0x6b,
		0xd0, 0x1a, 0xd0, 0xe6, 0x59, 0xb1, 0xe9, 0x3a, 0xbe, 0x1d, 0xba, 0xde, 0x8d, 0x75, 0xed, 0x3b,
		0xff, 0xed, 0x39, 0x5e, 0xe3, 0x56, 0x40, 0x7c, 0x9e, 0x68, 0xd4, 0x3c, 0xa3, 0x67, 0x62, 0x8e,
		0xe1, 0x6d, 0xd7, 0x09, 0x8e, 0xde, 0x5e, 0x9c, 0xfc, 0x5f, 0xbd, 0x58, 0x2f, 0xd7, 0x7f, 0xfd,
		0xed, 0x2f, 0x94, 0x0e, 0xa5, 0x43, 0xe9, 0xe2, 0x5a, 0xce, 0xca, 0x5f, 0xbe, 0x73, 0x76, 0x7e,
		0x72, 0x51, 0xbd, 0x3c, 0xfd, 0xf0, 0x6b, 0x7d, 0x20, 0x1a, 0xbf, 0x9f, 0x7c, 0x78, 0xf3, 0xe7,
		0xea, 0x5e, 0xc3, 0x33, 0xd4, 0xc5, 0xf2, 0x40, 0x14, 0x57, 0xb0, 0xce, 0xfd, 0x48, 0xf4, 0x57,
		0xfa, 0xcb, 0x8d, 0x57, 0xb4, 0x75, 0xab, 0xe3, 0x9f, 0x10, 0xec, 0xb4, 0x3b, 0x4d, 0x47, 0x82,
		0x6f, 0x86, 0xed, 0x98, 0x23, 0xcd, 0xd9, 0xf9, 0xc9, 0x07, 0xe0, 0x05, 0x78, 0x01, 0x5e, 0xe2,
		0x5a, 0x8e, 0xe3, 0xf5, 0xda, 0x43, 0x67, 0xa3, 0x23, 0xe2, 0xaa, 0x95, 0x0c, 0xda, 0x38, 0xf1,
		0x7a, 0xed, 0xc1, 0x97, 0xca, 0xb2, 0x02, 0x76, 0x25, 0x0f, 0x89, 0x76, 0x39, 0x24, 0x8a, 0x88,
		0x21, 0x62, 0xa4, 0x14, 0x8a, 0x32, 0x31, 0x29, 0x85, 0xa9, 0x3b, 0x36, 0xa4, 0x14, 0x92, 0x52,
		0xa8, 0x41, 0x1f, 0xff, 0xfd, 0x1c, 0x04, 0x56, 0xab, 0x63, 0x0b, 0x14, 0xd8, 0xb9, 0x6b, 0x0a,
		0xf2, 0x80, 0x3c, 0x20, 0x8f, 0x98, 0x96, 0xb3, 0x26, 0xbb, 0x5c, 0xfe, 0x77, 0x6b, 0xa0, 0x17,
		0xc3, 0xb2, 0xa3, 0x3a, 0xb7, 0x7c, 0xbd, 0xf8, 0x04, 0x64, 0x0a, 0x99, 0x42, 0xa6, 0xe2, 0x46,
		0x1a, 0xb8, 0xee, 0x0b, 0x27, 0x09, 0x27, 0x29, 0xfa, 0x10, 0x70, 0xdd, 0xd7, 0x92, 0xb9, 0x48,
		0x81, 0xe3, 0x7f, 0x73, 0x7c, 0xeb, 0xc6, 0xef, 0xf4, 0xba, 0xe6, 0x54, 0xf2, 0xa0, 0x35, 0x08,
		0x04, 0x02, 0x81, 0x40, 0xe2, 0xce, 0xa4, 0xb5, 0x48, 0x3d, 0x0e, 0xc2, 0xa1, 0xb3, 0x62, 0xb9,
		0x41, 0xa7, 0x25, 0xe4, 0x18, 0xcd, 0x36, 0x89, 0x0e, 0xa1, 0x43, 0xe8, 0x10, 0x01, 0x9b, 0x67,
		0x85, 0xa8, 0xd7, 0xed, 0x76, 0xfc, 0xd0, 0x69, 0x5a, 0x4d, 0x3b, 0xb4, 0x2d, 0xdf, 0x0e, 0x87,
		0xd9, 0x76, 0xa6, 0x5a, 0xf4, 0x54, 0xab, 0xc8, 0x11, 0x72, 0x84, 0x1c, 0xc5, 0xb4, 0x9c, 0x95,
		0xcf, 0x1d, 0x3e, 0xae, 0x5e, 0x56, 0xeb, 0x17, 0xd5, 0xcb, 0x93, 0xd5, 0xcd, 0x18, 0x1e, 0x7c,
		0xbb, 0x7a, 0xe9, 0xe0, 0xfd, 0xeb, 0x55, 0x4c, 0xaa, 0x1d, 0x7e, 0xb9, 0xbd, 0xca, 0x0a, 0x7f,
		0xb9, 0xc2, 0x2a, 0x8f, 0x5c, 0xb9, 0xb4, 0xc2, 0x5f, 0x6e, 0x95, 0xad, 0xf2, 0x70, 0x95, 0x67,
		0x5c, 0x61, 0x95, 0x67, 0xdc, 0xab, 0xf2, 0x0a, 0x7f, 0xbb, 0xe2, 0x2a, 0xeb, 0x49, 0x71, 0x95,
		0xe7, 0xdc, 0x2a, 0x7f, 0x37, 0x99, 0x81, 0x5b, 0xae, 0x03, 0x3f, 0x31, 0x5d, 0x97, 0x77, 0x6e,
		0x10, 0x56, 0xc3, 0xd0, 0x37, 0x73, 0x5f, 0xde, 0xbb, 0xde, 0x49, 0xcb, 0x19, 0x78, 0x70, 0x03,
		0x22, 0xf7, 0x7a, 0xad, 0x96, 0x81, 0xe3, 0xf1, 0xde, 0xfe, 0x2e, 0xd7, 0xd8, 0x99, 0xdf, 0x74,
		0x7c, 0xa7, 0xf9, 0xfa, 0x76, 0xdc, 0x54, 0x86, 0x63, 0x34, 0xa1, 0x7a, 0x52, 0x4d, 0x48, 0x52,
		0x0d, 0xb1, 0x1b, 0x62, 0x37, 0x4a, 0xb1, 0x1b, 0x92, 0x6a, 0x9e, 0x58, 0x16, 0x48, 0xaa, 0x49,
		0x15, 0xaf, 0x48, 0xaa, 0x49, 0x17, 0x03, 0x57, 0x33, 0xa9, 0xe6, 0x5b, 0xcb, 0xf6, 0x2c, 0x57,
		0xe0, 0xd4, 0xc1, 0xa4, 0x21, 0xb8, 0x03, 0xee, 0x80, 0x3b, 0x52, 0x99, 0x44, 0x9b, 0x1c, 0x77,
		0x4c, 0x61, 0xc5, 0x03, 0x3a, 0xd2, 0x1e, 0x82, 0x52, 0xfe, 0xb0, 0x04, 0x75, 0x2c, 0x13, 0x75,
		0xfc, 0xdd, 0xb5, 0x8b, 0x56, 0x37, 0xf8, 0x6a, 0x8e, 0x1d, 0xd3, 0x96, 0xe0, 0x0e, 0xb8, 0x03,
		0xee, 0x88, 0x69, 0x39, 0x82, 0x29, 0xbc, 0x06, 0x6d, 0xbc, 0x73, 0xbc, 0x9b, 0xf0, 0x0b, 0xe0,
		0xb1, 0xd8, 0xaa, 0x77, 0x00, 0x78, 0xa4, 0x3d, 0x04, 0x95, 0x3d, 0xb0, 0x23, 0x35, 0xec, 0xd8,
		0x50, 0xb4, 0xc8, 0x5c, 0xd5, 0xf3, 0x3a, 0x61, 0xfc, 0xad, 0x9a, 0x5c, 0xd0, 0xf8, 0xe2, 0xb4,
		0xed, 0xae, 0x3d, 0x94, 0xb3, 0xdc, 0x6e, 0xa7, 0xeb, 0x78, 0x8d, 0x21, 0x2a, 0x58, 0x76, 0xa3,
		0xe1, 0x04, 0x81, 0xd5, 0xed, 0xb8, 0x5e, 0x18, 0xec, 0xce, 0xff, 0xd3, 0x6e, 0x10, 0xb8, 0xcd,
		0x60, 0xf8, 0xff, 0xbb, 0x41, 0x68, 0x87, 0x71, 0x22, 0xd1, 0x03, 0x5d, 0xef, 0x35, 0x42, 0x6f,
		0x52, 0xec, 0x73, 0xfa, 0x16, 0xd5, 0xe1, 0x83, 0xce, 0x87, 0x4f, 0xad, 0xcf, 0xfb, 0x43, 0xfd,
		0xe3, 0xe0, 0x0d, 0x86, 0xff, 0x5f, 0xff, 0x38, 0x7c, 0x83, 0x0d, 0x9d, 0x01, 0x8a, 0x30, 0x38,
		0xb9, 0xbf, 0xdb, 0xed, 0xc8, 0x23, 0x72, 0x07, 0x8b, 0xed, 0x76, 0xc4, 0x5e, 0x9c, 0xae, 0x6b,
		0x11, 0x3f, 0x16, 0x97, 0x0b, 0x4d, 0x78, 0x50, 0x88, 0x03, 0x4d, 0xf9, 0x4f, 0x8c, 0xfb, 0xc4,
		0x78, 0x4f, 0x8e, 0xf3, 0x74, 0x45, 0xe7, 0xd8, 0x8d, 0xb7, 0x77, 0x9f, 0x6b, 0x4c, 0xac, 0xcd,
		0xd0, 0x99, 0x1a, 0xb7, 0x63, 0xe6, 0x4a, 0x15, 0x70, 0xa5, 0x70, 0xa5, 0x96, 0xcd, 0x95, 0x8a,
		0x3b, 0xf5, 0xa6, 0x0d, 0x84, 0x7e, 0x2f, 0x08, 0xad, 0x66, 0xd0, 0xe8, 0xca, 0x25, 0xd8, 0xdf,
		0x6b, 0xd3, 0x70, 0x74, 0xee, 0xd5, 0xd5, 0x1d, 0x8c, 0xb5, 0x69, 0x73, 0x32, 0x38, 0x6d, 0x3c,
		0xe3, 0x25, 0x67, 0xbe, 0x92, 0x02, 0x48, 0x2b, 0x81, 0x9a, 0x22, 0xa8, 0x29, 0x83, 0x9e, 0x42,
		0x08, 0x79, 0x3a, 0x86, 0xb6, 0x67, 0x1c, 0x84, 0x99, 0xb1, 0x3c, 0xf3, 0x73, 0x8c, 0x33, 0x4b,
		0x72, 0x21, 0x25, 0x67, 0xd0, 0xa0, 0x73, 0x07, 0xb0, 0x6e, 0x7d, 0x76, 0x2c, 0xdf, 0x69, 0xdb,
		0xfe, 0x57, 0x39, 0x51, 0x7d, 0xd8, 0x2c, 0x42, 0x88, 0x10, 0x22, 0x84, 0x19, 0x15, 0xc2, 0x9e,
		0xeb, 0x85, 0x07, 0x82, 0x32, 0x28, 0x50, 0x12, 0x55, 0x68, 0x6f, 0x7c, 0xf2, 0x9f, 0xcc, 0x1c,
		0xd8, 0x94, 0x0e, 0x59, 0x0b, 0xeb, 0xdb, 0x4c, 0xb3, 0xc2, 0x09, 0x7b, 0xd3, 0x76, 0x15, 0xc2,
		0xa8, 0x42, 0xb3, 0xe3, 0xe1, 0x50, 0x09, 0x86, 0xb6, 0x93, 0x1a, 0xaa, 0x62, 0xb9, 0xbc, 0x44,
		0x83, 0xb5, 0x91, 0x8d, 0x56, 0x6a, 0xa9, 0x0a, 0xb2, 0xc8, 0x79, 0x90, 0xfb, 0xfa, 0x22, 0x76,
		0x94, 0xe3, 0xfe, 0x4c, 0xb8, 0xd7, 0xa8, 0xf0, 0x01, 0xa2, 0x03, 0x29, 0x12, 0x10, 0x46, 0x96,
		0xc7, 0xd8, 0xd2, 0xb6, 0xbf, 0x5b, 0xce, 0xa4, 0x17, 0x04, 0x65, 0x46, 0x0b, 0x60, 0x66, 0x20,
		0xe6, 0x20, 0x97, 0x91, 0xf9, 0x26, 0xb1, 0xef, 0x28, 0x72, 0xca, 0x28, 0x03, 0x9e, 0xd3, 0x57,
		0x1d, 0xcf, 0xe9, 0x2b, 0x9e, 0x13, 0x9e, 0x13, 0x9e, 0x13, 0x9e, 0x13, 0x9e, 0x13, 0x9e, 0x13,
		0x9e, 0x13, 0x9e, 0x13, 0x9e, 0x13, 0x9e, 0x13, 0x9e, 0x13, 0x9e, 0xd3, 0xca, 0x78, 0x4e, 0xdf,
		0x5c, 0x15, 0xcf, 0xe9, 0xae, 0x59, 0x3c, 0x27, 0x3c, 0x27, 0x3c, 0x27, 0x3c, 0x27, 0x3c, 0x27,
		0x3c, 0x27, 0x3c, 0x27, 0x3c, 0x27, 0x3c, 0x27, 0x3c, 0x27, 0x3c, 0x27, 0x3c, 0xa7, 0xe5, 0xf7,
		0x9c, 0x3a, 0x3a, 0x9e, 0x53, 0x07, 0xcf, 0x09, 0xcf, 0x09, 0xcf, 0x09, 0xcf, 0x09, 0xcf, 0x09,
		0xcf, 0x09, 0xcf, 0x09, 0xcf, 0x09, 0xcf, 0x09, 0xcf, 0x09, 0xcf, 0x09, 0xcf, 0x29, 0x3b, 0x9e,
		0x53, 0xa2, 0x87, 0x55, 0x0d, 0x8b, 0x53, 0x4c, 0xdb, 0x91, 0x2d, 0x52, 0xf1, 0x77, 0xbb, 0xbd,
		0x6b, 0x74, 0x80, 0x7c, 0x53, 0xb4, 0x62, 0xc5, 0xbf, 0xdb, 0xed, 0xfa, 0xd8, 0x53, 0xcb, 0xf8,
		0xad, 0xa2, 0x8e, 0xcc, 0x4d, 0xa2, 0x4e, 0xda, 0xe7, 0xf6, 0x8b, 0x9c, 0xdb, 0xd7, 0x76, 0x77,
		0x39, 0xb7, 0xff, 0xe8, 0xf5, 0x39, 0xb7, 0x4f, 0x00, 0x8c, 0x00, 0x18, 0x01, 0xb0, 0x2c, 0x04,
		0xc0, 0x38, 0xb7, 0xbf, 0xc9, 0xb9, 0x7d, 0x84, 0x10, 0x21, 0x5c, 0x77, 0x21, 0x64, 0x27, 0x20,
		0x5a, 0xa4, 0x8e, 0x9d, 0x00, 0x76, 0x02, 0xd8, 0x09, 0x60, 0x27, 0x60, 0xdc, 0xc1, 0xec, 0x04,
		0xb0, 0x13, 0xc0, 0x4e, 0x40, 0xd4, 0x2f, 0xc6, 0xb9, 0xfd, 0x67, 0x3d, 0x27, 0xce, 0xed, 0xe3,
		0x39, 0xe1, 0x39, 0xe1, 0x39, 0xe1, 0x39, 0xe1, 0x39, 0xe1, 0x39, 0xe1, 0x39, 0xe1, 0x39, 0xe1,
		0x39, 0xe1, 0x39, 0xe1, 0x39, 0x71, 0x6e, 0xff, 0x05, 0xcf, 0x89, 0x73, 0xfb, 0x78, 0x4e, 0x78,
		0x4e, 0x78, 0x4e, 0x78, 0x4e, 0x78, 0x4e, 0x78, 0x4e, 0x78, 0x4e, 0x78, 0x4e, 0x78, 0x4e, 0x78,
		0x4e, 0x78, 0x4e, 0x9c, 0xdb, 0x7f, 0xd1, 0x73, 0xe2, 0xdc, 0x3e, 0x9e, 0x13, 0x9e, 0x13, 0x9e,
		0x13, 0x9e, 0x13, 0x9e, 0x13, 0x9e, 0x13, 0x9e, 0x13, 0x9e, 0x13, 0x9e, 0x13, 0x9e, 0x13, 0x9e,
		0x13, 0xe7, 0xf6, 0xb3, 0x76, 0x6e, 0xdf, 0xe4, 0xfc, 0xf8, 0xa6, 0xf8, 0xb1, 0xfd, 0x8f, 0xc3,
		0xb7, 0x49, 0xea, 0xd4, 0xbe, 0xea, 0x95, 0xfe, 0x86, 0x43, 0x2e, 0x3f, 0xd4, 0xb9, 0x58, 0x45,
		0x0a, 0xe4, 0x06, 0x37, 0xda, 0xb0, 0x2e, 0x3e, 0x38, 0x8b, 0xfd, 0xe4, 0x82, 0xc3, 0x37, 0x58,
		0x37, 0x06, 0x5f, 0x75, 0xf8, 0x95, 0x17, 0xfc, 0x48, 0x2c, 0x0e, 0x30, 0x5a, 0xef, 0x1f, 0xad,
		0xeb, 0x11, 0x3f, 0x1c, 0x4b, 0x81, 0x17, 0xed, 0xbf, 0x98, 0x66, 0x2f, 0x6b, 0xee, 0x11, 0x4c,
		0x5d, 0xcc, 0xc4, 0x17, 0x33, 0xef, 0x97, 0x8d, 0xf5, 0xf9, 0x9f, 0x78, 0x61, 0x18, 0xa2, 0x76,
		0xbf, 0x58, 0xb7, 0x2f, 0xd0, 0xe3, 0x12, 0x3d, 0xfd, 0x7c, 0x27, 0xcf, 0xef, 0xba, 0x67, 0xba,
		0x2d, 0x17, 0xdc, 0x06, 0xa1, 0xd3, 0x7e, 0xb1, 0xbb, 0xee, 0x2a, 0xae, 0x8c, 0x7e, 0xfe, 0x85,
		0x81, 0x58, 0xac, 0xb4, 0xca, 0xc2, 0x91, 0xc9, 0x28, 0x91, 0xc7, 0xfb, 0x91, 0xc5, 0xe0, 0x76,
		0xa1, 0xa1, 0x89, 0x48, 0xe0, 0xb1, 0x83, 0x82, 0xb1, 0x99, 0xf9, 0x71, 0x50, 0x6f, 0xf0, 0xbd,
		0x94, 0xa7, 0xd2, 0xa2, 0x05, 0x46, 0x72, 0xb6, 0x6d, 0x2f, 0xde, 0x73, 0x93, 0xb1, 0x19, 0x7c,
		0x68, 0xd1, 0x25, 0x29, 0x52, 0x95, 0x9e, 0xc8, 0xc1, 0xee, 0x38, 0x41, 0xed, 0xfb, 0x26, 0xb6,
		0xf8, 0x37, 0x31, 0x71, 0xf6, 0x8c, 0xe3, 0xd0, 0xc6, 0xee, 0xda, 0x63, 0x13, 0x1c, 0x7c, 0xef,
		0x94, 0x20, 0x25, 0x6a, 0xed, 0x9b, 0x9c, 0xdd, 0x68, 0x74, 0x7a, 0x5e, 0xe8, 0x7a, 0x37, 0xd1,
		0x3b, 0x7e, 0x6a, 0xb1, 0x77, 0x6d, 0x44, 0xec, 0xb8, 0x78, 0x65, 0xa6, 0x62, 0xef, 0xda, 0x98,
		0xec, 0xd2, 0xc4, 0x37, 0x6c, 0xa9, 0x68, 0x86, 0xd8, 0x86, 0x8b, 0x58, 0x7c, 0xc2, 0xc8, 0xf0,
		0x93, 0x71, 0xb6, 0xe2, 0x16, 0x83, 0xca, 0x35, 0x26, 0x36, 0x66, 0x58, 0x86, 0xcd, 0xa8, 0xfc,
		0x9d, 0x58, 0x1d, 0xb6, 0x7c, 0x36, 0xea, 0xb0, 0xc5, 0x9b, 0x38, 0xd2, 0xe1, 0xc0, 0xe5, 0x2b,
		0xc1, 0x16, 0x6b, 0x62, 0xa5, 0x13, 0xd0, 0x32, 0xae, 0xbe, 0x76, 0xb7, 0x9a, 0x58, 0x6d, 0x27,
		0xfc, 0xd2, 0x69, 0xca, 0x65, 0x20, 0xcc, 0x36, 0x4d, 0x16, 0x82, 0xfe, 0xb4, 0xd5, 0x8a, 0xe6,
		0x2f, 0x7f, 0x02, 0x82, 0xd1, 0xb4, 0x96, 0x09, 0xde, 0x67, 0x30, 0xf7, 0xc0, 0x73, 0x3b, 0xa2,
		0x05, 0xd3, 0x0e, 0x05, 0xda, 0x1a, 0x7f, 0xcd, 0xcc, 0xe5, 0x1e, 0x4c, 0x3a, 0xcd, 0x6d, 0x3a,
		0x5e, 0xe8, 0x86, 0xb7, 0xbe, 0x73, 0x2d, 0xb9, 0x91, 0x35, 0xe9, 0x42, 0xc1, 0x1d, 0xe8, 0xdc,
		0xe9, 0xf8, 0x55, 0x5f, 0xdb, 0x81, 0x23, 0xbf, 0x19, 0x3f, 0xe9, 0x90, 0x6a, 0xb5, 0x5a, 0x7f,
		0x7f, 0x72, 0xf9, 0xdb, 0xd9, 0x71, 0xfd, 0xf2, 0xcf, 0xf3, 0x93, 0x9c, 0xc6, 0xe6, 0x7c, 0x20,
		0x66, 0x11, 0x3a, 0xd6, 0xf1, 0x64, 0xc7, 0x5c, 0x54, 0x8f, 0x4f, 0x7f, 0xff, 0x58, 0xaf, 0xbe,
		0x7b, 0x97, 0x13, 0x7f, 0x50, 0x7f, 0x67, 0xd9, 0x7a, 0xe3, 0xdd, 0xd9, 0x9b, 0x2a, 0x1d, 0x71,
		0xb4, 0x99, 0xbb, 0xac, 0xbe, 0xa9, 0xbe, 0xd1, 0x32, 0x0b, 0xd1, 0x16, 0x6b, 0x59, 0x4b, 0x56,
		0xd9, 0xc9, 0xea, 0xa2, 0x10, 0x84, 0x7e, 0xf4, 0x98, 0xcc, 0x42, 0xeb, 0xc1, 0x01, 0x69, 0x3e,
		0xcb, 0x98, 0xe6, 0x23, 0xd4, 0x28, 0x89, 0x1a, 0x29, 0x27, 0x6a, 0x0c, 0xf7, 0x99, 0x76, 0x6d,
		0xdb, 0xde, 0xbd, 0xf3, 0x68, 0xd3, 0xbf, 0x67, 0x61, 0xf8, 0x56, 0xf5, 0xaa, 0x6d, 0x0f, 0xfe,
		0x7a, 0xfc, 0x56, 0x4b, 0x70, 0xdd, 0x82, 0xf3, 0xcd, 0x28, 0x09, 0x6e, 0xaa, 0xb6, 0xe3, 0x76,
		0x08, 0xf4, 0x11, 0xe8, 0x23, 0xd0, 0xb7, 0xf0, 0xc4, 0x93, 0x0b, 0xee, 0x8d, 0x9a, 0x93, 0x09,
		0xe8, 0x15, 0x08, 0xe8, 0x11, 0xd0, 0x5b, 0xcf, 0x80, 0x9e, 0xe9, 0xb4, 0x9e, 0x36, 0x64, 0xb8,
		0x81, 0x36, 0xd7, 0x7c, 0x8d, 0x39, 0x47, 0x61, 0xc2, 0x8b, 0x4f, 0x7c, 0x0d, 0x01, 0xd0, 0x13,
		0x02, 0x2d, 0x41, 0x50, 0x17, 0x06, 0x75, 0x81, 0x50, 0x15, 0x8a, 0x4c, 0xc6, 0x31, 0xc4, 0x04,
		0xe4, 0x21, 0x27, 0x58, 0xa1, 0xd4, 0x46, 0xc3, 0x7c, 0x78, 0x18, 0x3d, 0x63, 0x67, 0x29, 0x4e,
		0x87, 0x49, 0x0b, 0x8d, 0xa6, 0xe0, 0xe8, 0x0b, 0x8f, 0xb6, 0x00, 0x25, 0x26, 0x44, 0x89, 0x09,
		0x52, 0x22, 0xc2, 0x24, 0x2b, 0x50, 0xc2, 0x42, 0x35, 0xed, 0x81, 0x4b, 0x0d, 0x65, 0xd9, 0xd4,
		0xdf, 0x9d, 0x9b, 0x61, 0x98, 0xb2, 0x42, 0xdb, 0xaa, 0xbb, 0x75, 0x33, 0x1d, 0x55, 0xad, 0x56,
		0xeb, 0xd5, 0x37, 0x6f, 0xce, 0x7e, 0xff, 0x70, 0x79, 0xfa, 0xe1, 0xd7, 0xfa, 0xc9, 0x1f, 0x27,
		0x1f, 0x2e, 0x35, 0xf6, 0xef, 0xa6, 0x0f, 0x56, 0xdc, 0xc7, 0x9b, 0xfc, 0xf7, 0x43, 0xad, 0xe5,
		0xd9, 0xae, 0xfb, 0xfd, 0xf2, 0xb7, 0xb3, 0x8b, 0xd3, 0xbf, 0xaa, 0x97, 0xa7, 0x67, 0x1f, 0xc6,
		0xbd, 0xf7, 0xe6, 0xec, 0xc3, 0xdb, 0xd3, 0x5f, 0x73, 0x6a, 0x2f, 0xd1, 0xdf, 0x59, 0xdd, 0x9e,
		0x7b, 0xff, 0xbe, 0xfa, 0xe1, 0x98, 0xae, 0x8b, 0x38, 0x5f, 0xe9, 0xb7, 0x78, 0xfd, 0xf6, 0xee,
		0xec, 0xd7, 0xd3, 0x0f, 0x8a, 0xbd, 0xa6, 0xd2, 0x72, 0x2d, 0xeb, 0xb0, 0x90, 0xc9, 0x3a, 0x14,
		0xbe, 0xd3, 0x18, 0x51, 0xa4, 0x92, 0x3b, 0x33, 0x6e, 0x1f, 0x57, 0x06, 0x57, 0x06, 0x57, 0x06,
		0x57, 0x46, 0x32, 0x50, 0xe2, 0xf5, 0xda, 0x8e, 0x3f, 0xda, 0x07, 0x57, 0x74, 0x65, 0x4a, 0x0a,
		0x6d, 0x9f, 0x78, 0xbd, 0xe1, 0x61, 0xce, 0xcc, 0x2e, 0x30, 0x99, 0x0a, 0xe3, 0x09, 0xe5, 0x3b,
		0xcc, 0xb4, 0xab, 0x96, 0xff, 0x30, 0xda, 0x7f, 0x1f, 0xfd, 0xb2, 0x2b, 0xba, 0x49, 0xb0, 0xa9,
		0x95, 0x1c, 0x71, 0x32, 0x7c, 0xe5, 0xd1, 0x2f, 0x46, 0x99, 0x12, 0xf2, 0xa6, 0x24, 0x51, 0xd0,
		0x45, 0x21, 0x70, 0xab, 0x17, 0xb0, 0x15, 0xa6, 0x1b, 0x76, 0x82, 0xd8, 0x09, 0x4a, 0x9e, 0x52,
		0xb2, 0xb5, 0x84, 0x88, 0xd3, 0xc8, 0xd4, 0x5e, 0x5b, 0x8e, 0x7d, 0xad, 0x74, 0xd4, 0x61, 0x5f,
		0xb0, 0xcd, 0xf3, 0xf1, 0x2a, 0xf7, 0xea, 0xd5, 0x78, 0x41, 0xda, 0xbd, 0x27, 0x5b, 0x2b, 0x24,
		0xf4, 0xa3, 0x52, 0x51, 0xe2, 0x1a, 0x6f, 0x5a, 0x81, 0xea, 0xc9, 0xf1, 0x95, 0x96, 0xf7, 0x22,
		0xf2, 0x8e, 0xbc, 0xaf, 0xa5, 0xbc, 0xb3, 0xd1, 0x4f, 0x74, 0x8c, 0xe8, 0x18, 0xd1, 0x31, 0xa2,
		0x63, 0x6c, 0xf4, 0x47, 0xed, 0x28, 0x36, 0xfa, 0xcd, 0xba, 0x8e, 0x8d, 0x7e, 0xd1, 0x9e, 0x63,
		0xc3, 0x3a, 0xce, 0x7c, 0xa5, 0xdf, 0xe2, 0xf5, 0x1b, 0x1b, 0xfd, 0x1a, 0xb0, 0xc0, 0x46, 0x3f,
		0xae, 0x0c, 0xae, 0x0c, 0xae, 0x0c, 0xae, 0x8c, 0x4c, 0xa0, 0x84, 0x8d, 0x7e, 0xb5, 0x05, 0x86,
		0x8d, 0x7e, 0xb1, 0x8d, 0x7e, 0xc9, 0x3d, 0x82, 0xcd, 0x44, 0xf6, 0xf9, 0x0d, 0x6e, 0xb2, 0x90,
		0x37, 0xa4, 0x74, 0xcf, 0x9a, 0x8e, 0xaf, 0x54, 0x10, 0x8b, 0xc9, 0x52, 0x91, 0x45, 0xa4, 0x22,
		0x8b, 0x69, 0x49, 0x03, 0x59, 0x41, 0x49, 0x46, 0x48, 0x72, 0x22, 0xdb, 0xa0, 0xba, 0xd2, 0x91,
		0xa3, 0xd0, 0x4e, 0x76, 0xcc, 0x26, 0x6b, 0x85, 0x76, 0x46, 0x86, 0x92, 0xe5, 0x42, 0x3b, 0x66,
		0x59, 0x02, 0x22, 0x59, 0x01, 0x62, 0x65, 0x76, 0x8a, 0x94, 0xd9, 0x51, 0xf4, 0x30, 0x29, 0xb3,
		0x73, 0xf7, 0xe6, 0xd4, 0xd3, 0x4e, 0x2f, 0xd0, 0x44, 0xf9, 0x1d, 0xca, 0xef, 0x24, 0x0c, 0xcf,
		0xd4, 0xd3, 0x8e, 0xfe, 0x1f, 0xf5, 0xb4, 0xa9, 0xa7, 0x9d, 0x84, 0x75, 0x3c, 0xd9, 0x31, 0xd4,
		0xd3, 0xa6, 0x9e, 0xf6, 0x13, 0x1d, 0x41, 0x3d, 0xed, 0x94, 0xc7, 0x9a, 0x7a, 0xda, 0x89, 0xdb,
		0x02, 0xf5, 0xb4, 0xe3, 0x35, 0x4a, 0x3d, 0xed, 0x2c, 0x86, 0xf9, 0xd2, 0xbe, 0xff, 0xfc, 0xc9,
		0x28, 0x1f, 0xd7, 0xa0, 0xab, 0x0f, 0x7c, 0x0a, 0xb7, 0xa1, 0x3f, 0x35, 0xd4, 0x6a, 0x97, 0xa2,
		0x47, 0xb8, 0x91, 0xd5, 0xee, 0x85, 0x5f, 0x06, 0xce, 0x45, 0x23, 0xde, 0x30, 0xdd, 0xc5, 0x89,
		0x1e, 0xb6, 0xc3, 0x25, 0xa1, 0x7a, 0x41, 0x1d, 0x2e, 0x09, 0x4d, 0xf2, 0x92, 0x50, 0xbb, 0xd9,
		0x76, 0x3d, 0xab, 0x17, 0x38, 0xbe, 0xf9, 0xbe, 0xc6, 0xbd, 0xb6, 0xb8, 0x43, 0x80, 0xcd, 0x8d,
		0x94, 0xa2, 0xa0, 0x4b, 0xb6, 0xb9, 0x21, 0x54, 0x64, 0x5c, 0xb6, 0xb8, 0x38, 0xb7, 0x08, 0xa4,
		0x31, 0x51, 0xd5, 0x26, 0xac, 0xda, 0xc4, 0x55, 0x99, 0xc0, 0x32, 0xc1, 0x80, 0xcc, 0xdc, 0x22,
		0x30, 0x5a, 0x15, 0xbb, 0x76, 0x10, 0xfc, 0x2d, 0x99, 0x48, 0xff, 0x68, 0xd5, 0x9d, 0xb6, 0x4f,
		0x2d, 0x99, 0xec, 0x08, 0x83, 0x96, 0x40, 0xa8, 0x0b, 0x85, 0xba, 0x60, 0xa8, 0x0a, 0x87, 0x5c,
		0x34, 0x71, 0x73, 0x29, 0x6a, 0xc9, 0x64, 0x3e, 0xaa, 0x2b, 0xd4, 0x83, 0x27, 0xdf, 0x43, 0xd9,
		0x0d, 0x36, 0xbd, 0xd9, 0xd8, 0x69, 0x58, 0xce, 0xf7, 0xf0, 0xe8, 0x5e, 0x48, 0xe7, 0x8b, 0x1d,
		0x7c, 0x71, 0x9a, 0xd6, 0x37, 0xbb, 0xd5, 0x73, 0x74, 0x67, 0xe9, 0xb5, 0xdd, 0x0a, 0x34, 0xa7,
		0x69, 0xd6, 0x26, 0x68, 0x2d, 0x13, 0x15, 0x84, 0x1e, 0x2e, 0xc3, 0xe3, 0xe1, 0xd6, 0x5e, 0xed,
		0x27, 0x8f, 0x61, 0xd1, 0x67, 0xd1, 0x67, 0xd1, 0x5f, 0xab, 0x45, 0xbf, 0xe1, 0xdf, 0x76, 0xc3,
		0x3b, 0x21, 0x10, 0xae, 0x07, 0x94, 0xb9, 0x7d, 0xdd, 0x3e, 0x07, 0x42, 0xe6, 0xef, 0xfc, 0x3c,
		0xd8, 0x9c, 0xd8, 0xbd, 0x0b, 0xc3, 0xca, 0x15, 0x91, 0x15, 0xdc, 0x1f, 0x7a, 0xf0, 0xb2, 0xf5,
		0xea, 0xe0, 0x65, 0x7f, 0x0f, 0x1c, 0x5f, 0xa4, 0x7a, 0xac, 0xc1, 0xd6, 0xb1, 0xd1, 0x36, 0xa9,
		0x44, 0xf1, 0x40, 0xd1, 0xa2, 0x81, 0xe2, 0x01, 0xbc, 0x22, 0x01, 0x3c, 0x02, 0x78, 0x04, 0xf0,
		0x08, 0xe0, 0xc1, 0xf2, 0xb0, 0x3c, 0x2c, 0x4f, 0x00, 0x8f, 0x00, 0x1e, 0x01, 0x3c, 0x02, 0x78,
		0x04, 0xf0, 0x58, 0xf4, 0x59, 0xf4, 0x59, 0xf4, 0x09, 0xe0, 0x25, 0x27, 0xd1, 0xbd, 0xc0, 0xf1,
		0xc7, 0x81, 0x28, 0x15, 0x6d, 0x9e, 0xb6, 0x8f, 0x28, 0x23, 0xca, 0x88, 0x32, 0x9e, 0xd8, 0x6a,
		0xe9, 0x30, 0x1b, 0x29, 0x31, 0x36, 0x52, 0xa4, 0x8a, 0xf4, 0x25, 0xb0, 0x8f, 0x22, 0x50, 0x9d,
		0x8f, 0x13, 0x78, 0x2a, 0x56, 0x94, 0x8d, 0xa3, 0x78, 0x73, 0xec, 0x26, 0xcb, 0x75, 0xb7, 0x0c,
		0x73, 0xe4, 0x65, 0x72, 0xe3, 0x39, 0x9c, 0xa2, 0xc1, 0x61, 0x1c, 0x4e, 0x51, 0xd4, 0x47, 0xf3,
		0xca, 0x5b, 0x0f, 0xc4, 0x42, 0xbe, 0xfa, 0xd6, 0x93, 0xcd, 0x53, 0x81, 0x2b, 0x39, 0xb7, 0x8a,
		0x9d, 0x6f, 0x2a, 0x70, 0x2d, 0x60, 0x6f, 0x54, 0xe0, 0x8a, 0xd1, 0x69, 0x54, 0xe0, 0x7a, 0xd4,
		0x21, 0x54, 0xe0, 0x9a, 0xd3, 0x31, 0x54, 0xe0, 0xa2, 0x02, 0xd7, 0x13, 0x1d, 0x41, 0x05, 0xae,
		0x94, 0xc7, 0x9a, 0x00, 0x63, 0xe2, 0xb6, 0x40, 0x05, 0xae, 0x78, 0x8d, 0xde, 0xaf, 0xc0, 0x25,
		0xbc, 0x2b, 0x66, 0x18, 0xba, 0xd2, 0x74, 0x37, 0x1e, 0xbb, 0x1c, 0x9d, 0x51, 0x2f, 0x58, 0x9f,
		0x6f, 0x25, 0x67, 0x98, 0xe6, 0xce, 0xcd, 0x03, 0xf7, 0xa3, 0x17, 0x3b, 0x0e, 0x27, 0x3f, 0x8d,
		0xfb, 0x44, 0x90, 0x23, 0xb4, 0xa3, 0x1a, 0x41, 0x36, 0x3e, 0xc5, 0xa1, 0x16, 0x3d, 0x36, 0x39,
		0xb3, 0xc1, 0x95, 0x0d, 0x51, 0x23, 0x51, 0x5c, 0xd9, 0xa0, 0x19, 0x69, 0x22, 0x70, 0x7c, 0xf7,
		0xe6, 0x04, 0x8e, 0xe3, 0x37, 0x43, 0xe0, 0x38, 0x13, 0xd3, 0x59, 0x9d, 0xde, 0x08, 0x1c, 0x2f,
		0xe2, 0x3b, 0x10, 0x38, 0x8e, 0xde, 0x69, 0x04, 0x8e, 0x1f, 0x75, 0x08, 0x81, 0xe3, 0x39, 0x1d,
		0x43, 0xe0, 0x98, 0xc0, 0xf1, 0x13, 0x1d, 0x41, 0xe0, 0x38, 0xe5, 0xb1, 0x26, 0x70, 0x9c, 0xb8,
		0x2d, 0x10, 0x38, 0x8e, 0xd7, 0x28, 0x81, 0x63, 0x02, 0xc7, 0xa2, 0xd3, 0x98, 0xc0, 0x71, 0x94,
		0x76, 0x54, 0x03, 0xc7, 0x19, 0xba, 0x00, 0xe4, 0x61, 0xdc, 0x38, 0xd9, 0x4b, 0x40, 0x62, 0x84,
		0x8d, 0x07, 0x13, 0x2a, 0x30, 0x0f, 0x1b, 0x8f, 0x9a, 0x21, 0xdf, 0x98, 0xb0, 0x71, 0x4a, 0x71,
		0xa5, 0x25, 0x0b, 0x1b, 0x1b, 0xdd, 0x43, 0xa1, 0xc1, 0x1f, 0x14, 0xc2, 0x4f, 0x93, 0xd2, 0x08,
		0x0a, 0x4b, 0x10, 0x55, 0x56, 0xea, 0x68, 0x09, 0xdd, 0x74, 0x31, 0x63, 0xbe, 0x62, 0x45, 0x0e,
		0x05, 0x27, 0xbc, 0xf8, 0xc4, 0xd7, 0x10, 0x00, 0x3d, 0x21, 0xd0, 0x74, 0xdb, 0x36, 0x39, 0xad,
		0xbd, 0x54, 0xb1, 0x30, 0x31, 0x01, 0x99, 0x36, 0x28, 0x5e, 0x8a, 0x6f, 0x66, 0x22, 0x08, 0x17,
		0xe3, 0x7b, 0x2c, 0x2e, 0x79, 0xe1, 0x66, 0xa5, 0x45, 0x46, 0x53, 0x6c, 0xf4, 0x45, 0x47, 0x5b,
		0x7c, 0x12, 0x13, 0xa1, 0xc4, 0xc4, 0x28, 0x11, 0x51, 0x92, 0x15, 0x27, 0x61, 0x91, 0x9a, 0xf6,
		0x80, 0x78, 0x69, 0x89, 0x19, 0x7b, 0x17, 0x0f, 0xe4, 0xcf, 0xa0, 0xcb, 0x41, 0xa6, 0x7b, 0x58,
		0xbc, 0x08, 0xe0, 0xe4, 0x3f, 0xfd, 0x59, 0x9e, 0x68, 0x51, 0xc0, 0x39, 0xb3, 0x5f, 0xa1, 0x38,
		0xe0, 0x93, 0xd3, 0x7f, 0x8d, 0x76, 0x0e, 0x77, 0xe4, 0xd1, 0x44, 0xba, 0x7c, 0xe0, 0x5c, 0x42,
		0x91, 0x2d, 0x20, 0x08, 0xa8, 0x00, 0x2a, 0x80, 0x0a, 0xa0, 0x92, 0x40, 0x81, 0x42, 0x6d, 0x6a,
		0xc9, 0xe4, 0xf2, 0xe0, 0x77, 0x5a, 0x8a, 0x69, 0x72, 0xc3, 0xd6, 0x59, 0x08, 0x58, 0x08, 0x58,
		0x08, 0x58, 0x08, 0x04, 0xed, 0x5d, 0x2a, 0x89, 0x7b, 0xae, 0xf4, 0x1f, 0x2a, 0xb4, 0x2d, 0x9a,
		0xe4, 0x9d, 0x8c, 0xab, 0x99, 0x4c, 0x98, 0x40, 0x79, 0xe1, 0x55, 0x32, 0xf3, 0x04, 0x7b, 0x5e,
		0x27, 0xfd, 0x7e, 0x6e, 0xf7, 0x97, 0x15, 0x9f, 0xa1, 0x9a, 0x9e, 0x3f, 0xb7, 0x03, 0x3f, 0xfe,
		0xf9, 0xf1, 0xf2, 0xe4, 0x7d, 0xfd, 0xf8, 0xe4, 0xed, 0xe9, 0x87, 0x93, 0xe3, 0xfa, 0xc5, 0xd9,
		0xbb, 0x93, 0x8f, 0x8a, 0x3d, 0xb9, 0xa9, 0x9c, 0xc3, 0x9f, 0x9c, 0x09, 0x3e, 0xd7, 0x9b, 0x83,
		0x5e, 0xac, 0x57, 0x8f, 0xdf, 0x9f, 0x7e, 0xc8, 0xa9, 0x3f, 0xbf, 0xaf, 0xfa, 0x84, 0xda, 0xc6,
		0x72, 0xbd, 0xb7, 0x7c, 0xab, 0xb5, 0x35, 0x70, 0x75, 0x82, 0xe0, 0x8b, 0xf5, 0xd5, 0xb9, 0xd5,
		0xf3, 0x76, 0x26, 0x0f, 0xc0, 0xe1, 0xc1, 0xe1, 0xc1, 0xe1, 0xc1, 0xe1, 0x59, 0x06, 0xf6, 0x5e,
		0xab, 0x60, 0x97, 0xf8, 0x3d, 0x1d, 0xb3, 0x8e, 0xa9, 0xec, 0x4d, 0x1d, 0xac, 0x01, 0xac, 0x01,
		0xac, 0x01, 0xac, 0x01, 0xeb, 0xbe, 0x06, 0x64, 0x2a, 0x7b, 0x50, 0xf8, 0xc6, 0x90, 0x3b, 0xff,
		0x44, 0xf3, 0xe0, 0xd5, 0xf0, 0xdc, 0xcf, 0xae, 0xec, 0x15, 0xec, 0x77, 0x6f, 0xae, 0x74, 0x28,
		0xeb, 0xf7, 0xc1, 0x4b, 0xd7, 0xc5, 0xee, 0x62, 0x97, 0x33, 0xa7, 0xbe, 0xc8, 0xbd, 0x2b, 0x12,
		0x77, 0xb4, 0x3f, 0xa1, 0x12, 0x32, 0xf7, 0xc2, 0x6c, 0x6a, 0xa6, 0x9e, 0x17, 0x49, 0x3d, 0x5f,
		0x22, 0x9c, 0x20, 0xf5, 0x9c, 0xd4, 0x73, 0x52, 0xcf, 0xf1, 0x69, 0xf0, 0x69, 0xf0, 0x69, 0xd6,
		0xdd, 0xa7, 0x21, 0xf5, 0x9c, 0xd4, 0xf3, 0xec, 0x4d, 0x7c, 0x52, 0xcf, 0x49, 0x3d, 0x07, 0x54,
		0x00, 0x15, 0x40, 0x45, 0xcb, 0xde, 0x49, 0x3d, 0x17, 0x5f, 0x1e, 0x48, 0x3d, 0x67, 0x21, 0x60,
		0x21, 0x60, 0x21, 0x58, 0xae, 0x85, 0x80, 0xd4, 0xf3, 0x64, 0x5c, 0xcd, 0x4d, 0x52, 0xcf, 0xb3,
		0xd0, 0xf3, 0xa4, 0x9e, 0x1b, 0x76, 0x20, 0xa9, 0xe7, 0x0a, 0xbd, 0x49, 0xea, 0x79, 0x5a, 0xef,
		0x4d, 0xea, 0x79, 0x1c, 0xf3, 0x25, 0xf5, 0x1c, 0x87, 0x07, 0x87, 0x07, 0x87, 0x87, 0x2d, 0xba,
		0x75, 0x0d, 0x76, 0x91, 0x7a, 0xce, 0x1a, 0xc0, 0x1a, 0xc0, 0x1a, 0xc0, 0x1a, 0xb0, 0x64, 0x6b,
		0x00, 0xa9, 0xe7, 0x82, 0xa9, 0xe7, 0x92, 0xc9, 0xc9, 0x9b, 0x09, 0x65, 0x9e, 0x1b, 0xdc, 0x0c,
		0x22, 0x6f, 0x4c, 0x12, 0x89, 0xe7, 0xe2, 0x28, 0xa2, 0x85, 0x20, 0xc2, 0xe8, 0x41, 0xe5, 0x73,
		0xd2, 0xcf, 0x93, 0x47, 0x88, 0x6c, 0x2d, 0x20, 0xe2, 0xa8, 0x30, 0xb5, 0xd7, 0x96, 0x63, 0x5f,
		0x2b, 0x5d, 0x0f, 0xbb, 0x2f, 0xd8, 0xe6, 0xf9, 0x78, 0x8d, 0x7b, 0xf5, 0x6a, 0x7c, 0x0e, 0x6a,
		0x77, 0x2a, 0x5a, 0xab, 0x71, 0x5b, 0xd9, 0x8e, 0xf1, 0x65, 0x44, 0x82, 0x4a, 0xce, 0x1d, 0x86,
		0xe3, 0x26, 0x53, 0x1d, 0x53, 0x61, 0x6a, 0x4c, 0x8a, 0x16, 0x73, 0x22, 0x87, 0xec, 0xb4, 0xf9,
		0x30, 0xc7, 0xe5, 0x82, 0x99, 0x32, 0x9d, 0x2c, 0x5e, 0x2e, 0x38, 0xb4, 0x96, 0xc4, 0x2e, 0x17,
		0xdc, 0x50, 0x34, 0x08, 0x53, 0x43, 0x50, 0x35, 0x80, 0x18, 0x43, 0xaf, 0x35, 0xe4, 0xd1, 0x06,
		0x7b, 0xf1, 0x21, 0x8b, 0x30, 0x5c, 0xb9, 0x41, 0xe7, 0x74, 0x7c, 0xf7, 0x7f, 0xf1, 0x46, 0x6b,
		0x0a, 0x76, 0x0f, 0x9b, 0x89, 0x68, 0x2e, 0xf1, 0x0e, 0x10, 0xc7, 0xf6, 0xd4, 0x4c, 0x3c, 0x32,
		0x73, 0xcf, 0xcb, 0xd4, 0xc3, 0x12, 0xf3, 0xa4, 0xc4, 0x3c, 0x26, 0x11, 0xcf, 0x48, 0x57, 0x90,
		0xe2, 0x1e, 0xa8, 0x35, 0xbd, 0xfc, 0x4d, 0xe6, 0xb2, 0x37, 0xae, 0x54, 0xd5, 0x08, 0x51, 0x70,
		0xa5, 0xaa, 0x22, 0x0a, 0x1a, 0x5f, 0xa9, 0xfa, 0x60, 0x41, 0xb1, 0xda, 0x4e, 0xf8, 0xa5, 0xd3,
		0x94, 0xbb, 0x62, 0xf5, 0xc9, 0xd6, 0x65, 0xae, 0x5c, 0xcd, 0x73, 0xe5, 0x6a, 0x0a, 0x71, 0x46,
		0xae, 0x5c, 0xcd, 0x40, 0x58, 0x48, 0x2c, 0x6e, 0x28, 0x9e, 0x47, 0x2f, 0x99, 0x37, 0x2f, 0x9b,
		0x27, 0xaf, 0x10, 0x64, 0xd5, 0xc9, 0xc6, 0xd6, 0xc8, 0xbe, 0xd6, 0xcd, 0xb6, 0x9e, 0x76, 0x48,
		0xb5, 0x5a, 0xad, 0xbf, 0x3f, 0xb9, 0xfc, 0xed, 0xec, 0xb8, 0x7e, 0xf9, 0xe7, 0xf9, 0x89, 0xf4,
		0xce, 0x83, 0x62, 0x22, 0xb5, 0x52, 0x7e, 0xc7, 0xa4, 0x63, 0x2e, 0xaa, 0xc7, 0xa7, 0xbf, 0x7f,
		0xac, 0x57, 0xdf, 0xbd, 0x53, 0xc8, 0x86, 0xd8, 0x59, 0xb6, 0xde, 0x78, 0x77, 0xf6, 0xa6, 0x4a,
		0x47, 0x1c, 0x6d, 0xe6, 0x2e, 0xab, 0x6f, 0xaa, 0x6f, 0xb4, 0xcc, 0x22, 0xab, 0x25, 0x0d, 0xb2,
		0xb4, 0x03, 0xa7, 0xb0, 0x28, 0x88, 0x27, 0xe7, 0x08, 0x27, 0xe5, 0x98, 0xf7, 0x7f, 0x2d, 0x55,
		0xf6, 0x61, 0x0f, 0x4b, 0x62, 0x0f, 0x8b, 0x8d, 0x0e, 0xc3, 0x38, 0xf7, 0xd4, 0xa9, 0x35, 0x2f,
		0xe0, 0x29, 0x1b, 0xf5, 0x9e, 0xbe, 0x98, 0x51, 0x91, 0xce, 0x18, 0x1b, 0x1d, 0x31, 0x22, 0xb4,
		0xce, 0xb7, 0xf1, 0x1c, 0x31, 0x0c, 0xfa, 0x8d, 0xdb, 0x21, 0xe8, 0x47, 0xd0, 0x8f, 0xa0, 0xdf,
		0xc2, 0x13, 0x4f, 0x2e, 0xca, 0x37, 0x6a, 0x4e, 0x26, 0xac, 0x57, 0x20, 0xac, 0x47, 0x58, 0x6f,
		0x3d, 0xc3, 0x7a, 0x52, 0xd5, 0x68, 0x4d, 0x37, 0xd3, 0xe6, 0x9a, 0xaf, 0x68, 0xad, 0x72, 0xb5,
		0x72, 0xd6, 0xe4, 0x13, 0x4b, 0xc6, 0x2a, 0xc8, 0x27, 0x5e, 0x9a, 0x68, 0x86, 0x7c, 0x39, 0xeb,
		0xe1, 0xc2, 0x3e, 0x2a, 0xaf, 0xa6, 0x16, 0x34, 0xbe, 0xf7, 0x0c, 0xce, 0x4a, 0x72, 0x56, 0x32,
		0x35, 0x21, 0x4a, 0x4c, 0x90, 0x12, 0x11, 0x26, 0x59, 0x81, 0x12, 0x16, 0xaa, 0x69, 0x0f, 0xe8,
		0x9f, 0x95, 0xd4, 0xad, 0x98, 0xa4, 0x59, 0x29, 0x29, 0x99, 0x0a, 0x49, 0x0f, 0xf6, 0xee, 0xaa,
		0xbf, 0x5f, 0xfe, 0x76, 0x76, 0x71, 0xfa, 0x57, 0xf5, 0xf2, 0xf4, 0xec, 0x43, 0xfd, 0xe4, 0x8f,
		0x93, 0x0f, 0x97, 0xa3, 0x8d, 0xbc, 0xac, 0x9b, 0x25, 0x07, 0x4c, 0x23, 0xb5, 0xab, 0x19, 0x0e,
		0x1d, 0xc5, 0xe2, 0x46, 0xbf, 0x64, 0xfd, 0x72, 0xa3, 0xbb, 0x58, 0xe9, 0xc9, 0xf0, 0xad, 0x47,
		0xbf, 0xac, 0xe0, 0xed, 0x46, 0x0a, 0x1c, 0xa7, 0xc7, 0x6f, 0x1c, 0x34, 0xc5, 0x31, 0xc4, 0x31,
		0x14, 0x5d, 0x48, 0x38, 0x68, 0x3a, 0x73, 0xd0, 0xf4, 0x9e, 0x6c, 0x71, 0x8d, 0xdd, 0x4b, 0xa3,
		0xcc, 0x35, 0x76, 0xc8, 0x3b, 0xf2, 0x4e, 0xdc, 0x8f, 0xb8, 0x1f, 0x71, 0x3f, 0xe2, 0x7e, 0xc4,
		0xfd, 0x88, 0xfb, 0x11, 0xf7, 0x23, 0xee, 0x47, 0xdc, 0x6f, 0x5e, 0xdc, 0x2f, 0xdb, 0x95, 0xe5,
		0xe6, 0x84, 0xfd, 0xb2, 0x55, 0x5a, 0x2e, 0x0b, 0x75, 0x87, 0xc4, 0x10, 0x8d, 0xac, 0x6d, 0x2a,
		0x0f, 0xc5, 0x97, 0x93, 0xcc, 0x95, 0x1e, 0x7a, 0x5a, 0x40, 0xa8, 0x3d, 0x94, 0x2d, 0xe3, 0xc9,
		0x60, 0x4a, 0xfe, 0xc8, 0x5c, 0xb2, 0x9c, 0x92, 0x6f, 0x16, 0x40, 0x14, 0x09, 0x18, 0x8a, 0x25,
		0xe4, 0x17, 0x49, 0xc8, 0x57, 0xf4, 0xa3, 0x49, 0xc8, 0x97, 0x0b, 0xc0, 0x51, 0x85, 0x83, 0x74,
		0xfd, 0x4c, 0x04, 0xc5, 0x48, 0xd7, 0x4f, 0x21, 0x88, 0x45, 0x15, 0x8e, 0xec, 0x45, 0xfa, 0xa8,
		0xc2, 0x31, 0xef, 0x31, 0x54, 0xe1, 0x50, 0x0c, 0xfd, 0x25, 0xd8, 0x1b, 0x54, 0xe1, 0xa0, 0x0a,
		0x47, 0x36, 0xc6, 0x9a, 0x2a, 0x1c, 0x89, 0xdb, 0x02, 0x55, 0x38, 0xe2, 0x35, 0x4a, 0x15, 0x8e,
		0x8c, 0x86, 0xfc, 0x4c, 0x77, 0x9c, 0xb4, 0x22, 0x7e, 0x06, 0x9b, 0x4a, 0x14, 0x1b, 0x5f, 0x78,
		0xf8, 0x53, 0xaf, 0x35, 0x7e, 0xf7, 0x26, 0x19, 0x28, 0x35, 0x1e, 0xf3, 0xf8, 0xb7, 0xd9, 0x31,
		0x6f, 0x8a, 0x8b, 0xa7, 0x12, 0xc0, 0x59, 0xa7, 0xe2, 0xe2, 0xd9, 0x12, 0xa0, 0xd8, 0x67, 0x9b,
		0xe4, 0x94, 0x27, 0xce, 0x41, 0x25, 0x1d, 0xc9, 0x09, 0x1c, 0xff, 0x9b, 0xe3, 0x5b, 0x37, 0x7e,
		0xa7, 0xd7, 0x0d, 0xe2, 0x2b, 0xcf, 0xc3, 0x66, 0x10, 0x20, 0x04, 0x28, 0x53, 0x02, 0x14, 0xfb,
		0x76, 0x83, 0xfb, 0x76, 0x2d, 0xb0, 0xb9, 0x7a, 0xbf, 0x35, 0x8a, 0x9e, 0xb1, 0xc7, 0x9a, 0xf0,
		0x24, 0x4b, 0xc7, 0x0b, 0x35, 0xde, 0x63, 0x15, 0xaa, 0x8a, 0x24, 0x5b, 0x0d, 0x89, 0xb2, 0x67,
		0x69, 0x4c, 0x54, 0xb5, 0x09, 0xab, 0x36, 0x71, 0x55, 0x26, 0xb0, 0x4c, 0x34, 0x32, 0x33, 0x65,
		0xcf, 0x74, 0xae, 0x51, 0xe6, 0x0a, 0xe5, 0x8c, 0x89, 0x80, 0x96, 0x18, 0xa8, 0x8b, 0x82, 0xba,
		0x38, 0xa8, 0x8a, 0x84, 0x8c, 0x58, 0x08, 0x89, 0xc6, 0xf4, 0x9b, 0xea, 0x9d, 0x6c, 0x5f, 0xfd,
		0x2d, 0x24, 0x89, 0x03, 0xe7, 0x3a, 0x35, 0x45, 0xa8, 0x26, 0x82, 0xe6, 0xa2, 0xb9, 0xeb, 0xa7,
		0xb9, 0xe4, 0x72, 0x3d, 0xea, 0x90, 0x6a, 0xb5, 0x5a, 0xff, 0x78, 0x72, 0xf1, 0xc7, 0xc9, 0x05,
		0xb9, 0x5c, 0x9b, 0xb3, 0xb9, 0x5c, 0xa4, 0x2f, 0x4d, 0xd2, 0x97, 0x48, 0x5d, 0x4a, 0x9c, 0x9e,
		0x38, 0xcb, 0x37, 0x77, 0x6f, 0xec, 0xc1, 0x3e, 0xce, 0x83, 0x3f, 0xc9, 0x95, 0x04, 0x94, 0xdb,
		0x46, 0xfb, 0x38, 0x7c, 0xbf, 0x5f, 0x87, 0x2f, 0x7b, 0xff, 0x0f, 0x22, 0x85, 0x00, 0x0d, 0x92,
		0x7c, 0x0c, 0x02, 0xda, 0x22, 0xa1, 0x10, 0xc9, 0x10, 0x08, 0xe7, 0x45, 0xd2, 0xc4, 0x6c, 0xe2,
		0x9c, 0x19, 0x90, 0x6c, 0xf9, 0xf3, 0x22, 0x72, 0xc5, 0xf7, 0x24, 0x8b, 0xee, 0x3d, 0x51, 0x6c,
		0x6f, 0x28, 0x20, 0x4b, 0x28, 0xa3, 0xa3, 0x95, 0x2b, 0x90, 0x53, 0xd2, 0x49, 0x83, 0x6c, 0x1a,
		0x21, 0xa6, 0x88, 0xa9, 0xc1, 0x37, 0x12, 0xdb, 0x34, 0x1a, 0xcd, 0x48, 0x85, 0x92, 0x99, 0xa3,
		0x76, 0xb9, 0x2b, 0x27, 0x3b, 0x42, 0xa0, 0x25, 0x08, 0xea, 0xc2, 0xa0, 0x2e, 0x10, 0xaa, 0x42,
		0x21, 0xec, 0xb8, 0x67, 0xb5, 0x66, 0xa6, 0xdd, 0x6c, 0xfa, 0x4e, 0x10, 0xe8, 0xc5, 0x02, 0x27,
		0x0f, 0xa0, 0x5a, 0x26, 0xd5, 0x32, 0x53, 0x93, 0xa0, 0xc4, 0xa4, 0x28, 0x11, 0x49, 0x92, 0x95,
		0x26, 0x61, 0x89, 0x92, 0x77, 0x1c, 0x13, 0x70, 0x24, 0x35, 0x1d, 0xcb, 0x05, 0x1c, 0xcd, 0x89,
		0x46, 0x66, 0xb5, 0xcc, 0xa4, 0x20, 0xc4, 0x08, 0x5f, 0xf2, 0x38, 0x63, 0x13, 0xe2, 0x77, 0xb7,
		0x28, 0x80, 0x2c, 0xab, 0x0d, 0xab, 0x0d, 0xab, 0x8d, 0xac, 0xc5, 0x4b, 0x83, 0xb1, 0x3a, 0x20,
		0x27, 0x04, 0xca, 0xca, 0xc0, 0xac, 0x2e, 0x65, 0x49, 0x48, 0x5a, 0x72, 0xd2, 0x96, 0x94, 0xc4,
		0x25, 0x2e, 0x75, 0x89, 0x4b, 0x5e, 0xa2, 0xd2, 0xa7, 0x23, 0x81, 0x4a, 0x52, 0xa8, 0x0f, 0xe0,
		0x33, 0xf3, 0xc5, 0xed, 0x5a, 0xba, 0xea, 0xb5, 0x29, 0x5c, 0x1e, 0xec, 0xa5, 0x3e, 0xfb, 0xa4,
		0x6a, 0xb3, 0xba, 0x73, 0xfe, 0xd1, 0xc8, 0x7c, 0x2b, 0x25, 0x30, 0x36, 0x33, 0x63, 0x74, 0x90,
		0xc0, 0xb3, 0xce, 0xed, 0x30, 0x74, 0x7c, 0x4f, 0x7d, 0xb8, 0xa6, 0x0f, 0xfc, 0xcf, 0xd6, 0xd6,
		0xa7, 0xbc, 0x75, 0x58, 0xfb, 0xf9, 0xa9, 0x60, 0x1d, 0xd6, 0x46, 0xbf, 0x2d, 0x0c, 0x7f, 0x19,
		0xfd, 0xbe, 0xf8, 0x29, 0x6f, 0x95, 0x26, 0xbf, 0x2f, 0x7f, 0xca, 0x5b, 0xe5, 0xda, 0xf6, 0xd5,
		0xd5, 0xab, 0xed, 0x1f, 0x7b, 0xfd, 0xe8, 0x1f, 0xfc, 0x47, 0x4e, 0xfd, 0x4b, 0xd5, 0x54, 0x9f,
		0xd0, 0xdf, 0x59, 0xa1, 0x49, 0x54, 0x61, 0x12, 0xc9, 0x4e, 0x22, 0xdb, 0xba, 0xae, 0x5a, 0x6f,
		0x6b, 0x3f, 0x0a, 0x3b, 0xa5, 0xfe, 0xd1, 0xf6, 0x8f, 0xfd, 0xfe, 0xe3, 0xbf, 0xfc, 0xf9, 0xd4,
		0x8f, 0x15, 0x76, 0xf6, 0xfb, 0x47, 0x73, 0xfe, 0xa5, 0xd2, 0x3f, 0x5a, 0xb0, 0x8d, 0x72, 0x7f,
		0x6b, 0xe6, 0x47, 0x07, 0x7f, 0x5f, 0x9c, 0xf7, 0x81, 0xd2, 0x9c, 0x0f, 0xec, 0xcd, 0xfb, 0xc0,
		0xde, 0x9c, 0x0f, 0xcc, 0x7d, 0xa5, 0xe2, 0x9c, 0x0f, 0x94, 0xfb, 0x3f, 0x67, 0x7e, 0x7e, 0xeb,
		0xe9, 0x1f, 0xad, 0xf4, 0xb7, 0x7f, 0xce, 0xfb, 0xb7, 0xfd, 0xfe, 0xcf, 0xa3, 0xed, 0x15, 0x90,
		0x94, 0x8d, 0xe5, 0x7a, 0xef, 0xfe, 0x32, 0x24, 0xfa, 0xca, 0x1e, 0x40, 0x9c, 0x2b, 0xa2, 0x82,
		0x07, 0x12, 0xf1, 0x6d, 0xf1, 0x6d, 0xf1, 0x6d, 0xf1, 0x6d, 0x13, 0x99, 0x2f, 0xe2, 0x07, 0x2a,
		0xe7, 0xe3, 0xde, 0x1a, 0xaf, 0x41, 0xa1, 0xdb, 0x76, 0x3a, 0xbd, 0x50, 0x7f, 0x19, 0x9a, 0x3c,
		0x88, 0x95, 0x88, 0x95, 0x88, 0x95, 0x88, 0x95, 0x68, 0x89, 0x56, 0xa2, 0x9e, 0xeb, 0x85, 0x85,
		0x4a, 0x02, 0x2b, 0x51, 0x45, 0xf1, 0x11, 0x17, 0xb6, 0x77, 0xb3, 0x12, 0x11, 0xd6, 0xf7, 0xae,
		0xa7, 0x2e, 0x2c, 0x09, 0x2d, 0x2b, 0x33, 0x8f, 0x1b, 0x1e, 0xb0, 0x4d, 0xf0, 0x79, 0x6f, 0x7d,
		0xbb, 0x11, 0xba, 0x1d, 0xef, 0xd8, 0xbd, 0x71, 0x87, 0x75, 0xaf, 0xf3, 0xea, 0xcf, 0xed, 0x27,
		0x10, 0x5b, 0x7b, 0x6f, 0x7f, 0x5f, 0x79, 0x13, 0xa9, 0x94, 0xcb, 0x7b, 0xe5, 0x15, 0x36, 0x13,
		0xe2, 0x59, 0xba, 0xbe, 0x44, 0xa6, 0x93, 0x4a, 0x94, 0x6e, 0x34, 0x9e, 0xb6, 0x9f, 0xd8, 0xf1,
		0xe5, 0xf1, 0x01, 0xae, 0xf1, 0xaf, 0xbb, 0x2a, 0x49, 0x72, 0x9b, 0xc9, 0x9c, 0x6e, 0x1e, 0xfd,
		0x7e, 0xf2, 0x77, 0x22, 0x87, 0x9d, 0xf5, 0x8c, 0x52, 0x32, 0x73, 0xd2, 0xb7, 0x9b, 0x6e, 0x4f,
		0x31, 0x51, 0x7f, 0xdc, 0x3e, 0x99, 0x93, 0x64, 0x4e, 0xa6, 0xee, 0xe8, 0x92, 0x39, 0x99, 0xdc,
		0x22, 0xa7, 0x96, 0x39, 0xa9, 0x94, 0xea, 0x3d, 0x33, 0x9d, 0xd4, 0x56, 0x33, 0x45, 0x01, 0x53,
		0x17, 0xb2, 0x24, 0x04, 0x2d, 0x39, 0x61, 0x4b, 0x4a, 0xe0, 0x12, 0x17, 0xba, 0xc4, 0x05, 0x2f,
		0x51, 0xe1, 0xd3, 0xf5, 0x73, 0xb4, 0x22, 0x7a, 0x5a, 0x82, 0x38, 0x7d, 0x80, 0xdd, 0x68, 0x84,
		0x56, 0xb7, 0xe3, 0x87, 0xfa, 0x76, 0x3c, 0x4d, 0x2e, 0x9f, 0x3e, 0x52, 0xd9, 0xac, 0x8e, 0x9d,
		0x6b, 0xbb, 0xd7, 0x1a, 0x5a, 0x55, 0xe1, 0xa0, 0xb0, 0xa7, 0xfd, 0xb8, 0x64, 0xa2, 0x1e, 0xea,
		0x2a, 0x9d, 0xa4, 0x5a, 0x27, 0xaf, 0xda, 0x49, 0xab, 0x77, 0x6a, 0x2a, 0x9e, 0x9a, 0x9a, 0xa7,
		0xa2, 0xea, 0x09, 0xc5, 0xc8, 0x94, 0x67, 0x9c, 0xfa, 0xfe, 0xcd, 0xcc, 0x7c, 0x1b, 0xc8, 0xb0,
		0xe5, 0xf5, 0xda, 0x9f, 0xc5, 0x0a, 0x6d, 0x2c, 0x22, 0x91, 0x95, 0x04, 0x1e, 0x95, 0xcc, 0xe6,
		0xce, 0xe4, 0xbf, 0x64, 0x44, 0x64, 0x33, 0xe9, 0xcd, 0x9e, 0x84, 0xd7, 0xb6, 0x99, 0xc7, 0x26,
		0xbc, 0xf9, 0x33, 0x7d, 0x6e, 0x0a, 0xd1, 0xfd, 0x84, 0x34, 0xe6, 0xa1, 0x29, 0x25, 0xb8, 0x29,
		0x94, 0x15, 0x53, 0x4a, 0x70, 0x93, 0x28, 0x13, 0xe6, 0xb4, 0xb1, 0x1a, 0x4f, 0x59, 0xd6, 0x64,
		0x6e, 0xc5, 0xe9, 0x9c, 0xb3, 0x7b, 0xe1, 0x97, 0xa4, 0x7d, 0xb7, 0xe9, 0x23, 0x13, 0xf5, 0xdd,
		0x8a, 0xf8, 0x6e, 0xf8, 0x6e, 0xf8, 0x6e, 0xf8, 0x6e, 0xf8, 0x6e, 0xf8, 0x6e, 0xf8, 0x6e, 0xf8,
		0x6e, 0xf8, 0x6e, 0xf8, 0x6e, 0xf8, 0x6e, 0xf8, 0x6e, 0x4b, 0xeb, 0xbb, 0xf9, 0x4e, 0xe8, 0xdb,
		0x5e, 0xd0, 0x76, 0x43, 0xcb, 0x0e, 0x43, 0xa7, 0xdd, 0x0d, 0x83, 0xe4, 0xbc, 0xb8, 0xa7, 0x1e,
		0x8e, 0x83, 0x85, 0x83, 0x85, 0x83, 0x85, 0x83, 0x85, 0x83, 0xf5, 0xe0, 0x90, 0xd3, 0x41, 0x82,
		0xae, 0x55, 0x19, 0xd7, 0x0a, 0xd7, 0x0a, 0xd7, 0x0a, 0xd7, 0x2a, 0x05, 0x53, 0x2a, 0x96, 0x71,
		0xac, 0x70, 0xac, 0x56, 0xc0, 0xb1, 0x0a, 0x9c, 0x86, 0xef, 0x84, 0xd6, 0x57, 0xe7, 0x36, 0x39,
		0x7f, 0xea, 0xde, 0x33, 0x71, 0xa3, 0x70, 0xa3, 0x70, 0xa3, 0x70, 0xa3, 0x70, 0xa3, 0xee, 0xa2,
		0x4d, 0x9d, 0x5e, 0xe8, 0x7a, 0x37, 0x56, 0xd7, 0x0e, 0x82, 0xa1, 0x79, 0x26, 0x59, 0xb6, 0x92,
		0x15, 0x72, 0x76, 0x85, 0x1c, 0xaa, 0x92, 0xa5, 0x5d, 0x4c, 0x7e, 0x76, 0x95, 0x7c, 0xf8, 0x5c,
		0x56, 0x4a, 0x56, 0x4a, 0x56, 0x4a, 0x56, 0x4a, 0x56, 0xca, 0x64, 0x6b, 0xd7, 0xcf, 0xac, 0x91,
		0x87, 0x09, 0x3c, 0x2b, 0x91, 0x5a, 0xf6, 0x93, 0xff, 0x12, 0x8c, 0x3a, 0xa6, 0x54, 0xdb, 0x7e,
		0x96, 0x73, 0x12, 0x7c, 0x66, 0xd2, 0x65, 0xba, 0xa7, 0x0f, 0x5e, 0xb5, 0x9a, 0xf7, 0xc9, 0x84,
		0x71, 0x12, 0x92, 0xcb, 0x74, 0x27, 0x5f, 0x85, 0xc9, 0x97, 0xcc, 0xe4, 0xa3, 0x56, 0xfe, 0x4a,
		0xd6, 0xca, 0x4f, 0x58, 0x8a, 0x88, 0x8c, 0x27, 0xda, 0xb2, 0x56, 0x75, 0x02, 0xe5, 0x9a, 0x64,
		0x77, 0x11, 0x8b, 0x94, 0x6a, 0x93, 0x8d, 0xca, 0x50, 0xed, 0xaa, 0x16, 0x75, 0xd9, 0x4c, 0xa5,
		0x54, 0xd9, 0xc5, 0xf0, 0x9b, 0xa9, 0x54, 0x2c, 0xd3, 0x33, 0xe5, 0xbe, 0x4a, 0x91, 0x38, 0x3b,
		0x4c, 0xe0, 0xc6, 0x89, 0xd1, 0x63, 0x96, 0xbc, 0x2c, 0x50, 0x91, 0xb2, 0x40, 0xd9, 0x09, 0x65,
		0x51, 0x16, 0x68, 0x8d, 0x17, 0x5e, 0xca, 0x02, 0x99, 0x74, 0x1e, 0x65, 0x81, 0x32, 0xae, 0xd6,
		0xc9, 0xab, 0x76, 0xd2, 0xea, 0x9d, 0x9a, 0x8a, 0xa7, 0xa6, 0xe6, 0xa9, 0xa8, 0x7a, 0x32, 0x0e,
		0x27, 0x47, 0x4b, 0x65, 0x24, 0x92, 0xa3, 0xa5, 0x06, 0x5f, 0x8c, 0xfc, 0x67, 0xfd, 0xe7, 0x92,
		0xff, 0xbc, 0xb2, 0xa6, 0xc4, 0xd1, 0xd2, 0xa5, 0x7c, 0x0a, 0x19, 0xd0, 0x4f, 0xf8, 0x6e, 0x94,
		0x05, 0xc2, 0x77, 0xc3, 0x77, 0xc3, 0x77, 0xc3, 0x77, 0xc3, 0x77, 0xc3, 0x77, 0xc3, 0x77, 0xc3,
		0x77, 0xc3, 0x77, 0xc3, 0x77, 0xc3, 0x77, 0xc3, 0x77, 0xcb, 0xbc, 0xef, 0xd6, 0xe8, 0xf4, 0xbc,
		0xd0, 0xf1, 0x13, 0x3c, 0x95, 0x33, 0x7d, 0x62, 0x32, 0xae, 0x54, 0x01, 0x57, 0x0a, 0x57, 0x0a,
		0x57, 0x0a, 0x57, 0x2a, 0x46, 0xec, 0x47, 0x39, 0xe9, 0x61, 0xfa, 0xa0, 0x71, 0xe2, 0xe0, 0xe0,
		0x97, 0x24, 0xca, 0xb2, 0xcd, 0x4c, 0xf3, 0x47, 0xcf, 0xdf, 0x59, 0xc9, 0x4b, 0x9b, 0x93, 0x12,
		0xea, 0x34, 0x04, 0x3b, 0x3d, 0xe1, 0x4e, 0x4b, 0xc0, 0x53, 0x17, 0xf2, 0xd4, 0x05, 0x3d, 0x55,
		0x61, 0x4f, 0xd8, 0x35, 0x48, 0x68, 0xc6, 0x26, 0x16, 0x3b, 0x9b, 0x07, 0xc5, 0x95, 0x52, 0x0a,
		0xc7, 0x89, 0x92, 0x3c, 0x4d, 0x94, 0x6c, 0x44, 0x6d, 0xf2, 0x5f, 0xb2, 0x92, 0xb4, 0x99, 0x56,
		0x84, 0x2d, 0xe5, 0xf0, 0xc8, 0x4c, 0x98, 0x24, 0xad, 0xe7, 0xa7, 0x18, 0x2a, 0x49, 0x58, 0xb1,
		0x1e, 0x9a, 0x5c, 0x0a, 0x91, 0xb8, 0xac, 0x99, 0x5c, 0xe1, 0xa0, 0x54, 0xaa, 0xec, 0x97, 0x4a,
		0xf9, 0xfd, 0xbd, 0xfd, 0xfc, 0x61, 0xb9, 0x5c, 0xa8, 0x14, 0xca, 0x6b, 0x6c, 0x85, 0x1b, 0xab,
		0xf9, 0xb4, 0x55, 0x39, 0x34, 0x98, 0x80, 0x4a, 0x4c, 0x7c, 0x3b, 0xdf, 0xf9, 0x7f, 0x4e, 0x23,
		0x45, 0xdf, 0x72, 0xf2, 0x7c, 0x7c, 0x4b, 0x7c, 0x4b, 0x7c, 0x4b, 0x7c, 0x4b, 0x7c, 0x4b, 0x7c,
		0x4b, 0x7c, 0x4b, 0x7c, 0x4b, 0x7c, 0x4b, 0x7c, 0x4b, 0x7c, 0x4b, 0x7c, 0x4b, 0x7c, 0xcb, 0x25,
		0xf4, 0x2d, 0x7d, 0x27, 0xf4, 0x5d, 0xa7, 0x69, 0x4d, 0x7d, 0xbc, 0xff, 0xf6, 0x9c, 0x20, 0x0d,
		0x27, 0x73, 0xde, 0x8b, 0xe0, 0x6d, 0xe2, 0x6d, 0xe2, 0x6d, 0xe2, 0x6d, 0xe2, 0x6d, 0xe2, 0x6d,
		0xe2, 0x6d, 0xe2, 0x6d, 0xe2, 0x6d, 0xe2, 0x6d, 0xe2, 0x6d, 0xe2, 0x6d, 0xe2, 0x6d, 0x2e, 0xa1,
		0xb7, 0x19, 0xba, 0x6d, 0xa7, 0xd3, 0x0b, 0xd3, 0xf7, 0x36, 0xe7, 0xbd, 0x08, 0xde, 0x26, 0xde,
		0x26, 0xde, 0x26, 0xde, 0x26, 0xde, 0x26, 0xde, 0x26, 0xde, 0x26, 0xde, 0x26, 0xde, 0x26, 0xde,
		0x26, 0xde, 0x26, 0xde, 0x26, 0xde, 0xe6, 0x52, 0x3d, 0x41, 0xfb, 0x58, 0x69, 0x42, 0x97, 0x58,
		0x4c, 0x9f, 0x97, 0xf2, 0x65, 0x16, 0xc3, 0x9b, 0x08, 0x76, 0x13, 0x3a, 0xf5, 0xbf, 0x99, 0xe6,
		0xe5, 0x16, 0x1f, 0x07, 0xdf, 0xb4, 0xfe, 0x66, 0xf2, 0x4d, 0xa9, 0x36, 0x31, 0x33, 0x32, 0xbe,
		0x13, 0xfa, 0xb6, 0x17, 0xb4, 0xdd, 0xd0, 0xb2, 0xc3, 0xd0, 0x69, 0x27, 0x71, 0xda, 0xf9, 0x41,
		0x92, 0xc0, 0xe3, 0x87, 0x53, 0xce, 0x2f, 0xab, 0xa1, 0x19, 0x6a, 0x50, 0xac, 0x5e, 0xe8, 0x85,
		0x1a, 0x14, 0xd9, 0x0d, 0xad, 0x4c, 0xe7, 0x5b, 0xcf, 0xf5, 0xc2, 0x83, 0x04, 0x0b, 0xf9, 0x95,
		0x29, 0xe4, 0xb7, 0x5c, 0xe1, 0x12, 0x0a, 0xf9, 0x51, 0xc8, 0x6f, 0x45, 0x4c, 0xa9, 0x58, 0xa6,
		0x8c, 0xdf, 0xd2, 0x3d, 0x85, 0x32, 0x7e, 0x4f, 0xb8, 0xbc, 0x4e, 0xc3, 0x77, 0x42, 0xeb, 0xab,
		0x73, 0x9b, 0x9c, 0x3f, 0x75, 0xef, 0x99, 0xb8, 0x51, 0xb8, 0x51, 0xb8, 0x51, 0xb8, 0x51, 0xb8,
		0x51, 0x77, 0xd1, 0xa6, 0x4e, 0x2f, 0x74, 0xbd, 0x1b, 0xab, 0x6b, 0x07, 0xc1, 0xd0, 0x3c, 0x93,
		0xf3, 0xa8, 0x0a, 0x07, 0xac, 0x90, 0xb3, 0x2b, 0xe4, 0x50, 0x95, 0x2c, 0xbb, 0xd9, 0xf4, 0x9d,
		0x20, 0xc1, 0xa8, 0xe3, 0xa3, 0xe7, 0xb2, 0x52, 0xb2, 0x52, 0xb2, 0x52, 0xb2, 0x52, 0xb2, 0x52,
		0x4e, 0xe7, 0x9b, 0xdb, 0x4d, 0x48, 0x1d, 0x1f, 0xac, 0x91, 0x87, 0x09, 0x3c, 0x6b, 0xdc, 0x97,
		0x2b, 0x17, 0x75, 0xbc, 0x1b, 0xb9, 0x6f, 0xa5, 0x04, 0xc7, 0x6e, 0x96, 0x73, 0x12, 0x7c, 0xe6,
		0xb9, 0x1d, 0x86, 0x8e, 0xef, 0x25, 0x9e, 0x83, 0x97, 0xfb, 0xcf, 0xd6, 0xd6, 0xa7, 0xbc, 0x75,
		0x58, 0xfb, 0xf9, 0xa9, 0x60, 0x1d, 0xd6, 0x46, 0xbf, 0x2d, 0x0c, 0x7f, 0x19, 0xfd, 0xbe, 0xf8,
		0x29, 0x6f, 0x95, 0x26, 0xbf, 0x2f, 0x7f, 0xca, 0x5b, 0xe5, 0xda, 0xf6, 0xd5, 0xd5, 0xab, 0xed,
		0x1f, 0x7b, 0xfd, 0xe8, 0x1f, 0xfc, 0x47, 0x6e, 0xd5, 0x92, 0x51, 0x76, 0x56, 0x78, 0xf2, 0x55,
		0x98, 0x7c, 0xc9, 0x4c, 0x3e, 0xdb, 0xba, 0xae, 0x5a, 0x6f, 0x6b, 0x3f, 0x0a, 0x3b, 0xa5, 0xfe,
		0xd1, 0xf6, 0x8f, 0xfd, 0xfe, 0xe3, 0xbf, 0xfc, 0xf9, 0xd4, 0x8f, 0x15, 0x76, 0xf6, 0xfb, 0x47,
		0x73, 0xfe, 0xa5, 0xd2, 0x3f, 0x5a, 0xb0, 0x8d, 0x72, 0x7f, 0x6b, 0xe6, 0x47, 0x07, 0x7f, 0x5f,
		0x9c, 0xf7, 0x81, 0xd2, 0x9c, 0x0f, 0xec, 0xcd, 0xfb, 0xc0, 0xde, 0x9c, 0x0f, 0xcc, 0x7d, 0xa5,
		0xe2, 0x9c, 0x0f, 0x94, 0xfb, 0x3f, 0x67, 0x7e, 0x7e, 0xeb, 0xe9, 0x1f, 0xad, 0xf4, 0xb7, 0x7f,
		0xce, 0xfb, 0xb7, 0xfd, 0xfe, 0xcf, 0xa3, 0xed, 0x15, 0x94, 0x22, 0x22, 0xe3, 0x89, 0xb6, 0xac,
		0x24, 0xfd, 0x49, 0xe5, 0xef, 0x65, 0x22, 0x6f, 0x2f, 0xa7, 0x19, 0x91, 0x49, 0x33, 0x4d, 0x4f,
		0x47, 0x5c, 0xe4, 0x0d, 0x59, 0xb6, 0x45, 0xe1, 0x29, 0xa1, 0x3d, 0x15, 0x52, 0x9e, 0x02, 0x0a,
		0xc6, 0x9f, 0x96, 0xd1, 0xcb, 0x9a, 0xbb, 0x9c, 0x51, 0x0a, 0x1a, 0x64, 0x6e, 0x24, 0x58, 0xd2,
		0x76, 0x78, 0x17, 0xc8, 0x55, 0xd0, 0x43, 0xa5, 0x4b, 0xca, 0xee, 0xe2, 0xb3, 0x45, 0xe1, 0x86,
		0x15, 0xe3, 0xb1, 0xfa, 0xf1, 0x57, 0xed, 0x78, 0x6b, 0x62, 0xf1, 0xd5, 0xc4, 0xe2, 0xa9, 0x89,
		0xc4, 0x4f, 0xb3, 0xbd, 0xc4, 0x69, 0x5d, 0x02, 0x96, 0xd3, 0xde, 0x89, 0xba, 0xab, 0xc0, 0xae,
		0x1a, 0x23, 0x50, 0xde, 0x72, 0x52, 0xdf, 0x6a, 0x4a, 0x62, 0x8b, 0x29, 0xb9, 0xad, 0xa5, 0xa4,
		0xb6, 0x94, 0x12, 0xdf, 0x4a, 0x4a, 0x7c, 0x0b, 0x29, 0xd1, 0xad, 0xa3, 0xe5, 0x72, 0x80, 0xd5,
		0xb7, 0x88, 0x92, 0xdd, 0x1a, 0x4a, 0x62, 0x4b, 0x28, 0x99, 0xad, 0xa0, 0x44, 0x37, 0xed, 0x12,
		0xdd, 0xfa, 0x49, 0x32, 0xea, 0x9c, 0x78, 0xb4, 0x79, 0xe5, 0xb6, 0x78, 0x6a, 0xcb, 0xbc, 0x03,
		0x9e, 0xec, 0x24, 0xaa, 0x30, 0x89, 0x64, 0x27, 0x11, 0x5b, 0x35, 0x2b, 0xb9, 0x55, 0xb3, 0xac,
		0x5b, 0x1b, 0xb5, 0x65, 0x89, 0x33, 0x2b, 0x84, 0x5b, 0x1a, 0x1d, 0xcf, 0x73, 0x86, 0xa7, 0x5d,
		0x2c, 0xfb, 0x73, 0xc7, 0x0f, 0x13, 0xf0, 0x75, 0x67, 0x1f, 0x89, 0xd7, 0x8b, 0xd7, 0x8b, 0xd7,
		0x8b, 0xd7, 0xbb, 0x44, 0x5e, 0x6f, 0x12, 0x45, 0xed, 0x12, 0x28, 0x62, 0x97, 0xd0, 0xa9, 0xeb,
		0x04, 0x78, 0x3d, 0xc9, 0x53, 0xd6, 0x49, 0x97, 0x77, 0x4d, 0xf8, 0x54, 0x75, 0x1a, 0x07, 0x60,
		0x93, 0x28, 0x4e, 0x9c, 0xe4, 0xe9, 0xe9, 0xb4, 0x4c, 0x24, 0xbd, 0x22, 0x71, 0xa9, 0x58, 0x0d,
		0x1e, 0xc7, 0x32, 0x7b, 0x1c, 0x8d, 0x56, 0x27, 0x70, 0x92, 0xf5, 0x38, 0xc6, 0x8f, 0xc4, 0xe3,
		0xc0, 0xe3, 0xc0, 0xe3, 0xc0, 0xe3, 0xc0, 0xe3, 0xc0, 0xe3, 0xc0, 0xe3, 0xc0, 0xe3, 0xc0, 0xe3,
		0xc0, 0xe3, 0xc0, 0xe3, 0x58, 0x7d, 0x8f, 0xe3, 0xda, 0x76, 0x5b, 0x3d, 0x3f, 0x61, 0x9f, 0x63,
		0xfa, 0x50, 0xbc, 0x0e, 0xbc, 0x0e, 0xbc, 0x0e, 0xbc, 0x0e, 0xbc, 0x0e, 0xbc, 0x0e, 0xbc, 0x0e,
		0xbc, 0x0e, 0xbc, 0x0e, 0xbc, 0x0e, 0xbc, 0x8e, 0xd5, 0xf7, 0x3a, 0x3a, 0x5d, 0xc7, 0x4b, 0xd6,
		0xe5, 0x18, 0x3d, 0x11, 0x7f, 0x03, 0x7f, 0x03, 0x7f, 0x03, 0x7f, 0x03, 0x7f, 0x03, 0x7f, 0x03,
		0x7f, 0x03, 0x7f, 0x03, 0x7f, 0x03, 0x7f, 0x03, 0x7f, 0x63, 0xf5, 0xfd, 0x8d, 0xd0, 0x6d, 0x3b,
		0x9d, 0x5e, 0xc2, 0x67, 0x39, 0xa6, 0x0f, 0xc5, 0xeb, 0xc0, 0xeb, 0xc0, 0xeb, 0xc0, 0xeb, 0xc0,
		0xeb, 0xc0, 0xeb, 0xc0, 0xeb, 0xc0, 0xeb, 0xc0, 0xeb, 0xc0, 0xeb, 0xc0, 0xeb, 0x58, 0x51, 0xaf,
		0xc3, 0xf1, 0xfd, 0x8e, 0x1f, 0x58, 0xbe, 0xd3, 0x70, 0xdc, 0x6f, 0x4e, 0x53, 0xdf, 0xe3, 0x78,
		0xfc, 0x40, 0xbc, 0x0d, 0xbc, 0x0d, 0xbc, 0x0d, 0xbc, 0x0d, 0xbc, 0x0d, 0xbc, 0x0d, 0xbc, 0x0d,
		0xbc, 0x0d, 0xbc, 0x0d, 0xbc, 0x0d, 0xbc, 0x8d, 0x15, 0xf5, 0x36, 0xda, 0x4e, 0x10, 0xd8, 0x37,
		0x4e, 0x92, 0xfe, 0xc6, 0xec, 0x23, 0xf1, 0x38, 0xf0, 0x38, 0xf0, 0x38, 0xf0, 0x38, 0xf0, 0x38,
		0xf0, 0x38, 0xf0, 0x38, 0xf0, 0x38, 0xf0, 0x38, 0xf0, 0x38, 0xf0, 0x38, 0x56, 0xdd, 0xe3, 0x08,
		0x46, 0x08, 0x93, 0x94, 0xb7, 0x31, 0x7c, 0x1c, 0x9e, 0x06, 0x9e, 0x06, 0x9e, 0x06, 0x9e, 0x06,
		0x9e, 0x06, 0x9e, 0x06, 0x9e, 0x06, 0x9e, 0x06, 0x9e, 0x06, 0x9e, 0x06, 0x9e, 0xc6, 0x8a, 0x7a,
		0x1a, 0xe3, 0xfb, 0x86, 0x95, 0x1d, 0x8c, 0xe1, 0x53, 0xf0, 0x2b, 0xf0, 0x2b, 0xf0, 0x2b, 0xf0,
		0x2b, 0x96, 0xc8, 0xaf, 0x08, 0x42, 0xdf, 0xf5, 0x6e, 0x92, 0xb8, 0x61, 0xf2, 0x60, 0x8d, 0xd7,
		0xa0, 0xf1, 0x19, 0x3e, 0xfd, 0x65, 0x68, 0xf2, 0x20, 0x56, 0x22, 0x56, 0x22, 0x56, 0x22, 0x56,
		0xa2, 0x25, 0x5a, 0x89, 0x7a, 0xae, 0x17, 0x16, 0x2a, 0x09, 0xac, 0x44, 0x15, 0xc2, 0x5b, 0x0b,
		0xc4, 0x2e, 0x08, 0x6f, 0x2d, 0x75, 0xa0, 0x82, 0xf0, 0x96, 0x88, 0x89, 0x54, 0xca, 0xe5, 0x3d,
		0xe2, 0x59, 0x99, 0x6b, 0x7d, 0x69, 0xe2, 0x59, 0x1b, 0x19, 0x9e, 0xd4, 0xb9, 0xaa, 0xe7, 0x75,
		0x42, 0x7b, 0x60, 0x72, 0x2a, 0xf3, 0x38, 0x17, 0x34, 0xbe, 0x38, 0x6d, 0xbb, 0x6b, 0x87, 0x5f,
		0x06, 0xeb, 0xfb, 0x6e, 0xa7, 0xeb, 0x78, 0x8d, 0x21, 0xe1, 0x5b, 0x76, 0xa3, 0xe1, 0x04, 0x81,
		0xd5, 0xed, 0xb8, 0x5e, 0x18, 0xec, 0xce, 0xff, 0xd3, 0x6e, 0x70, 0x1b, 0x84, 0x4e, 0x7b, 0xd7,
		0xb6, 0xed, 0xdd, 0xc0, 0xf1, 0xbf, 0x39, 0xbe, 0x75, 0xe3, 0x77, 0x7a, 0xdd, 0xe0, 0xc1, 0x9f,
		0xc6, 0x7f, 0x98, 0xfc, 0xe5, 0x6e, 0x10, 0xda, 0xa1, 0x46, 0x30, 0x6e, 0xe0, 0x2c, 0xf7, 0x1a,
		0xe1, 0x38, 0xa0, 0x98, 0x3b, 0x9b, 0x7e, 0x9f, 0xea, 0xf0, 0x95, 0xcf, 0x87, 0xef, 0x5f, 0x9f,
		0xf7, 0x87, 0xfa, 0xc7, 0xe1, 0x77, 0xa9, 0x57, 0x6d, 0xbb, 0xfe, 0x71, 0xf8, 0xa2, 0xbf, 0x0e,
		0xbf, 0xca, 0xfd, 0x3f, 0x8c, 0x7f, 0x3f, 0xf9, 0xbb, 0xfa, 0xc7, 0xe1, 0x37, 0xd9, 0xc8, 0xa6,
		0x49, 0x0a, 0x9a, 0x63, 0x2e, 0xb4, 0x1b, 0x76, 0x43, 0xbe, 0xae, 0xce, 0x9d, 0x5f, 0x3c, 0x6a,
		0x5f, 0x78, 0x02, 0x4d, 0x42, 0x1b, 0xc2, 0xcd, 0x6a, 0xb9, 0xc1, 0x9a, 0xee, 0xaf, 0xbe, 0xdb,
		0xab, 0xed, 0xee, 0x26, 0xe6, 0xe6, 0x26, 0xe6, 0xde, 0x26, 0xe2, 0xd6, 0x66, 0x7b, 0x89, 0x3b,
		0x76, 0x7d, 0x1d, 0x73, 0x6f, 0x4c, 0xe6, 0xa8, 0x7e, 0x21, 0xb0, 0xc1, 0x73, 0x74, 0xe3, 0x79,
		0x05, 0xe2, 0x79, 0x29, 0x0a, 0x5b, 0x52, 0x02, 0x97, 0xb8, 0xd0, 0x25, 0x2e, 0x78, 0x89, 0x0a,
		0x9f, 0xae, 0x97, 0xa3, 0x15, 0xcf, 0xd3, 0x12, 0xc4, 0xe9, 0x03, 0xba, 0x1d, 0x3f, 0xd4, 0x37,
		0xe1, 0xc9, 0xa4, 0x1c, 0x3e, 0x4d, 0xd9, 0x98, 0x8e, 0x9d, 0x6b, 0xbb, 0xd7, 0x1a, 0xda, 0x52,
		0xe9, 0x50, 0xfb, 0x61, 0xc9, 0xc4, 0x39, 0xd4, 0x95, 0x39, 0x49, 0x85, 0x4e, 0x5e, 0xa9, 0x93,
		0x56, 0xec, 0xd4, 0x94, 0x3b, 0x35, 0x05, 0x4f, 0x45, 0xc9, 0x13, 0x8a, 0x8a, 0x29, 0xcf, 0x38,
		0xf5, 0x1d, 0x9b, 0x27, 0x45, 0xd8, 0xf2, 0x7a, 0xed, 0xcf, 0x8e, 0x9f, 0xc4, 0xa4, 0xd3, 0xdf,
		0xc6, 0x99, 0x3e, 0x2a, 0x99, 0xed, 0x9c, 0xc9, 0x7f, 0xc9, 0x88, 0xc8, 0x66, 0xd2, 0xdb, 0x3b,
		0x09, 0xaf, 0x6d, 0x33, 0x8f, 0x4d, 0x78, 0xbb, 0x67, 0xfa, 0xdc, 0x14, 0xe2, 0xf9, 0x09, 0x69,
		0xcc, 0x43, 0x53, 0x4a, 0x70, 0x1b, 0x28, 0x2b, 0xa6, 0x94, 0xe0, 0xb6, 0x50, 0x26, 0xcc, 0x69,
		0x63, 0x35, 0x9e, 0x52, 0x5b, 0xd2, 0xed, 0x2e, 0xc5, 0xe9, 0x9c, 0x0b, 0x9c, 0x86, 0xef, 0x84,
		0xd6, 0x57, 0xe7, 0x36, 0x39, 0xaf, 0xed, 0xde, 0x33, 0x71, 0xa7, 0x70, 0xa7, 0x70, 0xa7, 0x70,
		0xa7, 0x70, 0xa7, 0xa6, 0xf3, 0xcd, 0xef, 0xf4, 0x42, 0xd7, 0xbb, 0xb1, 0xba, 0x76, 0x10, 0x0c,
		0xcd, 0x33, 0x39, 0x9f, 0x4a, 0x29, 0x49, 0x7b, 0xc9, 0x57, 0xc8, 0xa1, 0x2a, 0x59, 0x76, 0xb3,
		0xe9, 0x3b, 0x41, 0x90, 0xe0, 0x2a, 0xf9, 0xf0, 0xb9, 0xac, 0x94, 0xac, 0x94, 0xac, 0x94, 0xac,
		0x94, 0xac, 0x94, 0xd3, 0xf9, 0xe6, 0x76, 0x13, 0x52, 0xc7, 0x07, 0x6b, 0xe4, 0x61, 0x02, 0xcf,
		0x1a, 0xf7, 0xe5, 0xca, 0xc5, 0x1d, 0xef, 0x46, 0xee, 0x5b, 0x29, 0xc1, 0xb1, 0x9b, 0xe5, 0x9c,
		0x04, 0x9f, 0x79, 0x6e, 0x87, 0xa1, 0xe3, 0x7b, 0x89, 0x0d, 0xe7, 0xf4, 0xc1, 0xff, 0xd9, 0xda,
		0xfa, 0x94, 0xb7, 0x0e, 0x6b, 0x3f, 0x3f, 0x15, 0xac, 0xc3, 0xda, 0xe8, 0xb7, 0x85, 0xe1, 0x2f,
		0xa3, 0xdf, 0x17, 0x3f, 0xe5, 0xad, 0xd2, 0xe4, 0xf7, 0xe5, 0x4f, 0x79, 0xab, 0x5c, 0xdb, 0xbe,
		0xba, 0x7a, 0xb5, 0xfd, 0x63, 0xaf, 0x1f, 0xfd, 0x83, 0xff, 0xc8, 0x25, 0xf6, 0xe5, 0x6a, 0xc9,
		0x84, 0xa3, 0x76, 0x56, 0x78, 0xf2, 0x55, 0x98, 0x7c, 0xc9, 0x4c, 0x3e, 0xdb, 0xba, 0xae, 0x5a,
		0x6f, 0x6b, 0x3f, 0x0a, 0x3b, 0xa5, 0xfe, 0xd1, 0xf6, 0x8f, 0xfd, 0xfe, 0xe3, 0xbf, 0xfc, 0xf9,
		0xd4, 0x8f, 0x15, 0x76, 0xf6, 0xfb, 0x47, 0x73, 0xfe, 0xa5, 0xd2, 0x3f, 0x5a, 0xb0, 0x8d, 0x72,
		0x7f, 0x6b, 0xe6, 0x47, 0x07, 0x7f, 0x5f, 0x9c, 0xf7, 0x81, 0xd2, 0x9c, 0x0f, 0xec, 0xcd, 0xfb,
		0xc0, 0xde, 0x9c, 0x0f, 0xcc, 0x7d, 0xa5, 0xe2, 0x9c, 0x0f, 0x94, 0xfb, 0x3f, 0x67, 0x7e, 0x7e,
		0xeb, 0xe9, 0x1f, 0xad, 0xf4, 0xb7, 0x7f, 0xce, 0xfb, 0xb7, 0xfd, 0xfe, 0xcf, 0xa3, 0xed, 0x15,
		0x94, 0x22, 0x22, 0xe3, 0x89, 0xb6, 0xac, 0x95, 0x7c, 0xa5, 0x7c, 0xe0, 0xe2, 0x2e, 0x62, 0x91,
		0xd2, 0xc1, 0x8b, 0x51, 0x96, 0xfd, 0xae, 0x6a, 0xce, 0xea, 0x66, 0x2a, 0x07, 0x31, 0x2e, 0x87,
		0xdf, 0xac, 0x3e, 0x8e, 0x5e, 0xac, 0x71, 0x25, 0x83, 0xd1, 0xd9, 0x1a, 0xf5, 0xb4, 0x67, 0xad,
		0x23, 0x3c, 0x9b, 0x49, 0x66, 0x3d, 0x17, 0xc9, 0x7a, 0xce, 0x4e, 0x28, 0x8b, 0xac, 0xe7, 0x35,
		0x5e, 0x78, 0xc9, 0x7a, 0x8e, 0xde, 0x65, 0x64, 0x3d, 0x67, 0x5a, 0xa1, 0x93, 0x57, 0xea, 0xa4,
		0x15, 0x3b, 0x35, 0xe5, 0x4e, 0x4d, 0xc1, 0x53, 0x51, 0xf2, 0x64, 0x9c, 0x4c, 0xb2, 0x9e, 0x65,
		0x24, 0x92, 0xac, 0x67, 0x83, 0x2f, 0x46, 0xd6, 0xb3, 0xfe, 0x73, 0xc9, 0x7a, 0x5e, 0x59, 0x53,
		0x22, 0xeb, 0x79, 0x29, 0x9f, 0x42, 0xd6, 0xf3, 0xac, 0x59, 0x91, 0xf5, 0x8c, 0x3b, 0x85, 0x3b,
		0x85, 0x3b, 0x85, 0x3b, 0x95, 0x15, 0x77, 0x8a, 0xac, 0xe7, 0x8c, 0xad, 0x90, 0x64, 0x3d, 0xb3,
		0x52, 0xb2, 0x52, 0xb2, 0x52, 0xb2, 0x52, 0x66, 0x6c, 0xa5, 0x24, 0xeb, 0x59, 0xe4, 0x3f, 0xb2,
		0x9e, 0x75, 0x57, 0x22, 0xb2, 0x9e, 0x97, 0x29, 0x8c, 0x93, 0x90, 0x5c, 0xa6, 0x3b, 0xf9, 0xc8,
		0x7a, 0x4e, 0x68, 0xf2, 0x91, 0xf5, 0x4c, 0xd6, 0x73, 0xc6, 0xb9, 0x70, 0x93, 0xac, 0xe7, 0x64,
		0xa4, 0x7f, 0x5d, 0xb2, 0x9e, 0x35, 0x53, 0x56, 0x37, 0xd3, 0x4c, 0x7a, 0x56, 0x28, 0x42, 0xaf,
		0x67, 0xc8, 0xdc, 0xb8, 0x90, 0xde, 0x14, 0x58, 0x89, 0x2b, 0x17, 0x46, 0x46, 0x9f, 0xd9, 0x3b,
		0x17, 0x36, 0x32, 0x64, 0xd6, 0xb9, 0x7f, 0x0d, 0xb7, 0x4f, 0x73, 0xb2, 0x50, 0x9d, 0x7b, 0xe7,
		0x06, 0x61, 0x35, 0x0c, 0x65, 0x33, 0x76, 0x73, 0xef, 0x5d, 0xef, 0xa4, 0xe5, 0xb4, 0x1d, 0x6f,
		0x98, 0x45, 0xe0, 0xf5, 0x5a, 0x2d, 0xc1, 0xeb, 0x2b, 0xde, 0xdb, 0xdf, 0xf5, 0x1a, 0x3f, 0xf3,
		0x9b, 0x8e, 0xef, 0x34, 0x5f, 0xdf, 0x8e, 0x9b, 0xce, 0x94, 0x09, 0x28, 0x29, 0x5a, 0x5a, 0x4a,
		0x26, 0x28, 0x61, 0x89, 0x4b, 0x97, 0x8c, 0x66, 0x99, 0x2b, 0x8c, 0x59, 0x0b, 0x86, 0x86, 0x29,
		0x6d, 0x90, 0x89, 0x1b, 0xa2, 0x80, 0x05, 0x26, 0x67, 0x79, 0x66, 0x26, 0x17, 0xdf, 0x50, 0x0c,
		0x8c, 0x44, 0xe8, 0x04, 0x9b, 0xe8, 0x49, 0x35, 0xa1, 0x13, 0x69, 0x62, 0x27, 0xcf, 0x24, 0xb7,
		0x11, 0xe5, 0xb7, 0x09, 0xa5, 0xb7, 0x01, 0xd5, 0xb6, 0xf9, 0xd4, 0xb6, 0xf1, 0x54, 0xb6, 0xe9,
		0xd2, 0x95, 0x6d, 0xa9, 0x13, 0x5a, 0xb9, 0xb1, 0xea, 0x09, 0x99, 0xc6, 0xc4, 0x78, 0x87, 0xad,
		0x4a, 0x51, 0xb3, 0x68, 0xce, 0x81, 0x78, 0x6e, 0x81, 0x46, 0x0e, 0x81, 0x5e, 0xae, 0x80, 0x56,
		0x4e, 0x80, 0xfa, 0xde, 0xbf, 0xfa, 0x1e, 0xbf, 0xea, 0x5e, 0x7e, 0xb6, 0xfc, 0x50, 0xf1, 0x3d,
		0xf8, 0x7b, 0xab, 0xbb, 0xef, 0x7a, 0x92, 0xa5, 0x0c, 0x84, 0x73, 0xce, 0x04, 0x68, 0x5d, 0x60,
		0x41, 0x0e, 0x25, 0xfb, 0xff, 0xee, 0xce, 0xc6, 0x41, 0xab, 0x68, 0x2e, 0x9a, 0x8b, 0xe6, 0xae,
		0x95, 0xe6, 0xba, 0x4d, 0xc7, 0x0b, 0xdd, 0xf0, 0xd6, 0x77, 0xae, 0x35, 0x84, 0x57, 0xf0, 0x04,
		0x53, 0xee, 0x74, 0xfc, 0xaa, 0xaf, 0xed, 0xc0, 0xd1, 0xbb, 0xbc, 0xb6, 0x5a, 0xad, 0xd6, 0x3f,
		0x9e, 0x5c, 0xfc, 0x71, 0x72, 0x51, 0xbf, 0xfc, 0xf3, 0xfc, 0x44, 0x7a, 0x52, 0x0c, 0x8f, 0x77,
		0x05, 0x2a, 0xb9, 0x02, 0xca, 0x55, 0x62, 0x2e, 0xaa, 0xc7, 0xa7, 0xbf, 0x7f, 0xcc, 0x2d, 0x43,
		0xe1, 0x1c, 0xe5, 0x9e, 0xb8, 0xac, 0xbe, 0xa9, 0xbe, 0xf9, 0x98, 0xf5, 0xdb, 0x5d, 0x6b, 0x59,
		0xd3, 0x42, 0x62, 0x9d, 0x0f, 0x43, 0x63, 0x89, 0xc5, 0x3a, 0x85, 0xf6, 0xca, 0x93, 0x88, 0x74,
		0x9a, 0xef, 0x7e, 0x1b, 0xc4, 0x39, 0x37, 0x12, 0x34, 0xab, 0xc9, 0x76, 0x9e, 0x41, 0xac, 0x43,
		0x66, 0xef, 0x4e, 0x74, 0xaf, 0x4e, 0x74, 0x6f, 0x4e, 0x66, 0x2f, 0x2e, 0xee, 0xf8, 0x08, 0x4d,
		0xf7, 0xc4, 0xa6, 0x79, 0xce, 0x28, 0x4a, 0xaf, 0x3c, 0xb1, 0xe3, 0x4d, 0xe9, 0xe8, 0x13, 0x32,
		0xda, 0x27, 0x22, 0x9a, 0x86, 0xa9, 0x49, 0x68, 0x9a, 0x42, 0x8c, 0xd1, 0xd7, 0x19, 0xf5, 0x68,
		0x23, 0xbd, 0xf8, 0x78, 0x45, 0x18, 0xab, 0x98, 0x9b, 0x4e, 0x46, 0x9b, 0x4c, 0x31, 0x37, 0x95,
		0x62, 0x6f, 0x22, 0x99, 0xc4, 0x30, 0xcc, 0x63, 0x15, 0xa6, 0x31, 0x09, 0xb1, 0xd8, 0x83, 0x58,
		0x8c, 0x41, 0x24, 0x96, 0xb0, 0x56, 0xea, 0x13, 0x13, 0x2a, 0x05, 0x55, 0x27, 0x3a, 0x2b, 0x46,
		0x90, 0x9b, 0x0d, 0xc1, 0x21, 0x8c, 0x3b, 0x74, 0xb2, 0x43, 0x96, 0x8b, 0xa4, 0xa0, 0x32, 0x83,
		0xb4, 0xd8, 0xf0, 0xbc, 0xdc, 0xd9, 0x0b, 0x74, 0x74, 0xce, 0x6e, 0xd9, 0x7e, 0x7b, 0xf1, 0xb3,
		0xd3, 0x53, 0x15, 0x1c, 0x7f, 0x6e, 0xc1, 0xa1, 0x8c, 0xa6, 0xf3, 0x91, 0xf5, 0x3d, 0x8e, 0xae,
		0x3f, 0xd0, 0xf3, 0x28, 0x5f, 0xc6, 0x44, 0xca, 0x8d, 0x25, 0xdc, 0x58, 0xba, 0x67, 0x24, 0x7b,
		0xf4, 0xd5, 0x53, 0x9a, 0xe2, 0x51, 0xb7, 0xd4, 0x47, 0x66, 0x17, 0x1f, 0x52, 0x46, 0x1f, 0x4f,
		0x18, 0x52, 0xf2, 0x29, 0x41, 0x4a, 0x54, 0xa3, 0x5e, 0x23, 0x4e, 0x89, 0x68, 0xf4, 0xc9, 0xa0,
		0x4a, 0xdc, 0xfc, 0x92, 0x5c, 0x63, 0x62, 0x69, 0x31, 0xc7, 0x6b, 0x62, 0x34, 0x46, 0x45, 0xf1,
		0x0d, 0x13, 0xc4, 0x8c, 0xf7, 0x2b, 0x25, 0xf6, 0x27, 0x45, 0xa6, 0x8f, 0xd4, 0x34, 0x12, 0x9f,
		0x4e, 0xe2, 0xd3, 0x4a, 0x7a, 0x7a, 0xa5, 0x13, 0x52, 0xcc, 0x60, 0xc8, 0x6a, 0xd8, 0x7f, 0xa3,
		0x5f, 0xcc, 0x6f, 0xaa, 0x10, 0xc2, 0xd2, 0xe1, 0x3b, 0x8d, 0x7e, 0x31, 0xba, 0x63, 0x22, 0x46,
		0x78, 0x2a, 0xc6, 0x12, 0xe6, 0x36, 0xcd, 0xe5, 0xd0, 0x6d, 0x1a, 0x4a, 0x61, 0x1e, 0x29, 0x44,
		0x0a, 0x97, 0x49, 0x0a, 0x8d, 0x13, 0x26, 0xa6, 0x56, 0xd3, 0x72, 0xec, 0x6b, 0xb3, 0xe4, 0x88,
		0x29, 0x4f, 0xec, 0x1b, 0xb4, 0x71, 0x3e, 0x56, 0xe3, 0x57, 0xaf, 0x46, 0xa1, 0x97, 0x5d, 0xb7,
		0x99, 0x65, 0xd5, 0x32, 0xcb, 0xfb, 0x17, 0xc9, 0xf7, 0x17, 0xc3, 0xb8, 0x22, 0xda, 0x85, 0x76,
		0x25, 0xa8, 0x5d, 0xa6, 0xd9, 0xf9, 0x26, 0xc8, 0x20, 0x87, 0x0e, 0x42, 0x08, 0x21, 0x86, 0x12,
		0x92, 0xd3, 0x52, 0x65, 0x7a, 0x4a, 0x4f, 0x53, 0xb5, 0xe9, 0xaa, 0x36, 0x6d, 0xb5, 0xa6, 0xaf,
		0xd9, 0x34, 0x36, 0x9c, 0xce, 0x72, 0x48, 0xf2, 0xc4, 0xea, 0x28, 0x94, 0x2f, 0x2f, 0x94, 0x27,
		0x9f, 0xce, 0x11, 0x43, 0xdf, 0x09, 0x84, 0xd6, 0xb5, 0x69, 0x75, 0xdc, 0x49, 0x8b, 0x28, 0x1f,
		0xca, 0x87, 0xf2, 0xa1, 0x7c, 0x19, 0x55, 0xbe, 0xc0, 0xf9, 0xe6, 0xf8, 0x6e, 0x78, 0x2b, 0x78,
		0xbe, 0x7a, 0xd2, 0x22, 0xca, 0x87, 0xf2, 0xa1, 0x7c, 0x19, 0x54, 0x3e, 0xd9, 0xf3, 0x3a, 0x92,
		0xe7, 0x74, 0x74, 0xce, 0xe7, 0x4c, 0xbf, 0xf8, 0xd9, 0xf9, 0xc9, 0x87, 0x37, 0x67, 0x1f, 0xde,
		0x9e, 0xfe, 0x5a, 0xaf, 0xbe, 0xab, 0x5e, 0xbc, 0xaf, 0x7f, 0x3c, 0xf9, 0xe3, 0xe4, 0xe2, 0xf4,
		0xf2, 0x4f, 0x29, 0xcb, 0x56, 0x38, 0x99, 0xa3, 0x74, 0x44, 0xe9, 0xf7, 0x0f, 0xff, 0xfa, 0x70,
		0xf6, 0xef, 0x0f, 0x82, 0x87, 0xdd, 0x76, 0xb2, 0xfe, 0x95, 0xdf, 0x5c, 0x9c, 0x5e, 0x9e, 0xbe,
		0xa9, 0xbe, 0x5b, 0xa7, 0xef, 0xfc, 0xef, 0xea, 0xc5, 0x87, 0xd3, 0x0f, 0xbf, 0xae, 0xd3, 0x57,
		0x7e, 0x7f, 0xfa, 0xe1, 0xec, 0x62, 0xad, 0xbe, 0x70, 0xf5, 0xff, 0x13, 0xfd, 0xc2, 0x22, 0x2d,
		0xd5, 0xd2, 0x5e, 0x75, 0x53, 0xa1, 0xe9, 0xd0, 0xf9, 0x1e, 0xca, 0x91, 0xf4, 0xb0, 0x35, 0x28,
		0x1a, 0x8a, 0x86, 0xa2, 0x89, 0x1f, 0x64, 0x55, 0xf1, 0xdc, 0xb6, 0x63, 0x35, 0x7c, 0xc7, 0x0e,
		0x1d, 0xc1, 0x1d, 0xa3, 0x07, 0xad, 0xa2, 0x80, 0x28, 0x20, 0x0a, 0x98, 0x41, 0x05, 0x1c, 0xcc,
		0xd2, 0xd0, 0x6d, 0x7c, 0x0d, 0x2a, 0x25, 0x41, 0x19, 0x14, 0xb8, 0x76, 0x43, 0xf8, 0x42, 0x74,
		0xd9, 0xa2, 0xc6, 0x0a, 0x55, 0x78, 0x54, 0xee, 0xc4, 0xd3, 0xba, 0x90, 0x5c, 0xf3, 0x86, 0xe8,
		0xbe, 0x6c, 0x89, 0xe8, 0xa5, 0x1b, 0xaa, 0xc2, 0x41, 0xa9, 0x54, 0xd9, 0x2f, 0x95, 0xf2, 0xfb,
		0x7b, 0xfb, 0xf9, 0xc3, 0x72, 0xb9, 0x50, 0x29, 0x94, 0x97, 0x68, 0xf4, 0x32, 0x52, 0x23, 0xa4,
		0xb6, 0x8c, 0x1c, 0x76, 0xdb, 0x75, 0x2c, 0xc9, 0xa4, 0x9d, 0x49, 0x83, 0xd0, 0x17, 0xf4, 0x05,
		0x7d, 0x65, 0x90, 0xbe, 0x7a, 0x9e, 0xdb, 0xf1, 0x24, 0xdd, 0x4f, 0x81, 0x0b, 0x23, 0x65, 0x2f,
		0x84, 0x5c, 0xc7, 0xf2, 0xa0, 0x3b, 0x59, 0xed, 0x39, 0x8a, 0xfc, 0x3d, 0xea, 0x90, 0x99, 0xcd,
		0xc4, 0xcb, 0x3f, 0xcf, 0x4f, 0xea, 0xa7, 0xc7, 0x54, 0xfb, 0x9b, 0xf4, 0xd0, 0xbb, 0x33, 0x4a,
		0xfd, 0x1d, 0x6d, 0xe6, 0xaa, 0xa7, 0x74, 0xc3, 0x60, 0xbe, 0x5c, 0xd2, 0x0d, 0x47, 0x9b, 0xb9,
		0x93, 0xff, 0x3b, 0xbf, 0xa4, 0xec, 0xe3, 0xda, 0xb8, 0x74, 0x1c, 0xde, 0xbd, 0x3b, 0xbc, 0x6b,
		0x5a, 0x44, 0x52, 0xe1, 0xec, 0xae, 0x41, 0xb1, 0xc8, 0xac, 0x55, 0x96, 0x1b, 0x17, 0x83, 0x8c,
		0xec, 0xb2, 0x9b, 0x95, 0x80, 0x14, 0x29, 0xfd, 0x28, 0x52, 0xf2, 0xd1, 0xac, 0xd4, 0xe3, 0x12,
		0x57, 0xd2, 0xba, 0x37, 0xc5, 0xd2, 0x2b, 0xa6, 0x75, 0x6f, 0x52, 0x51, 0x4f, 0x2b, 0xca, 0xc0,
		0x25, 0x5f, 0x52, 0x2b, 0x42, 0x3c, 0x45, 0xa6, 0xaa, 0x56, 0xa3, 0xd5, 0x69, 0x7c, 0x8d, 0x5e,
		0x54, 0x6b, 0xf4, 0x31, 0xe5, 0x9a, 0x5a, 0xf9, 0x64, 0x6a, 0x6a, 0x05, 0xb7, 0xeb, 0x59, 0x50,
		0x6b, 0xf0, 0xbd, 0x97, 0xa5, 0x9a, 0x56, 0xcc, 0xc2, 0x41, 0x66, 0x05, 0x83, 0x96, 0xb5, 0x9e,
		0x56, 0x34, 0x83, 0x36, 0x35, 0x6c, 0x31, 0x03, 0x17, 0x33, 0x74, 0x11, 0x83, 0x4f, 0x06, 0x0c,
		0x63, 0x57, 0xd2, 0x0a, 0xdd, 0xb6, 0xf3, 0xbf, 0x8e, 0xe7, 0x58, 0x46, 0x57, 0xb4, 0x3d, 0x48,
		0x17, 0xb8, 0x6b, 0x8e, 0x62, 0x32, 0xf1, 0xa7, 0x91, 0xd4, 0x74, 0x12, 0x9f, 0x56, 0xe2, 0xd3,
		0x4b, 0x74, 0x9a, 0xa5, 0xe3, 0x94, 0xcb, 0x95, 0x91, 0x79, 0x30, 0x81, 0x2c, 0xc3, 0xdb, 0xb6,
		0x0c, 0x37, 0x2e, 0xa8, 0xab, 0x3e, 0x0f, 0xeb, 0x87, 0xd8, 0x1a, 0xbf, 0x50, 0x99, 0x0c, 0xe4,
		0xbf, 0x19, 0xbc, 0x44, 0xac, 0xca, 0x64, 0x94, 0x53, 0x4f, 0xb9, 0x9c, 0x3a, 0x64, 0x05, 0x59,
		0x41, 0x56, 0x90, 0x15, 0x64, 0x05, 0x59, 0x41, 0x56, 0xb3, 0x64, 0x95, 0xee, 0xad, 0x11, 0x23,
		0xb0, 0xe2, 0xde, 0x88, 0xa8, 0xc3, 0x96, 0x78, 0x98, 0x7b, 0x38, 0x50, 0x89, 0x46, 0xb9, 0xa3,
		0x85, 0x0f, 0xe3, 0x85, 0x0d, 0x89, 0x73, 0x13, 0xe7, 0x36, 0x8d, 0x73, 0x37, 0x3b, 0x6d, 0xdb,
		0xf5, 0xe2, 0xa1, 0xe7, 0x74, 0xac, 0xef, 0x37, 0x12, 0xcf, 0x2f, 0xcb, 0x13, 0xf1, 0xc6, 0x2f,
		0xd3, 0x41, 0x96, 0xd8, 0x60, 0x28, 0x60, 0xde, 0x0f, 0x09, 0x30, 0xc6, 0x67, 0xdf, 0x39, 0xde,
		0xcd, 0x70, 0xd1, 0x8d, 0x97, 0xef, 0x69, 0x76, 0x8b, 0xa7, 0x80, 0xc3, 0x23, 0x73, 0xe0, 0x63,
		0x7a, 0xa2, 0xc9, 0xb0, 0x1d, 0xc1, 0xe3, 0x4a, 0x7d, 0xb3, 0x3b, 0x4d, 0x33, 0xd7, 0xb5, 0xc5,
		0xf2, 0x5e, 0x86, 0x3a, 0x37, 0x21, 0x5f, 0xa9, 0x16, 0x63, 0x46, 0x9e, 0xdb, 0x61, 0xe8, 0xf8,
		0x5e, 0xec, 0x29, 0x99, 0xdb, 0xda, 0xda, 0xfa, 0x64, 0x5b, 0xff, 0xab, 0x5a, 0x7f, 0xe5, 0xad,
		0xc3, 0x7a, 0xed, 0xde, 0x1f, 0xae, 0xae, 0xac, 0x7a, 0x6d, 0xfb, 0x47, 0x7e, 0xa7, 0x52, 0xe8,
		0x6f, 0xff, 0x72, 0xf7, 0xf7, 0xb5, 0xab, 0xab, 0x57, 0xdb, 0xff, 0x8c, 0xf3, 0xa9, 0x5f, 0xb6,
		0x7f, 0x5e, 0x5d, 0xbd, 0x8a, 0xae, 0xc8, 0xb5, 0x0c, 0x44, 0x89, 0xbf, 0x74, 0x82, 0xd0, 0x0c,
		0x4b, 0xa6, 0x2d, 0xc0, 0x24, 0x30, 0x09, 0x4c, 0x02, 0x93, 0xc0, 0x24, 0x30, 0x09, 0x4c, 0x02,
		0x93, 0xc4, 0x66, 0x92, 0x56, 0xe7, 0xc6, 0xf5, 0xac, 0xcf, 0xb6, 0xe7, 0x39, 0x7e, 0x7c, 0x2e,
		0x79, 0xd0, 0x0a, 0x6c, 0x02, 0x9b, 0xac, 0x18, 0x9b, 0xc4, 0x3e, 0x57, 0x1d, 0x73, 0xb3, 0x4c,
		0x67, 0xae, 0xb7, 0x3b, 0x61, 0xd3, 0x78, 0xaa, 0xdf, 0x6f, 0x84, 0x99, 0xce, 0x4c, 0x67, 0xa6,
		0x27, 0x35, 0xd3, 0x57, 0x6d, 0xdf, 0x34, 0x6a, 0x0a, 0xa1, 0xd0, 0xc6, 0x69, 0x84, 0xa4, 0x41,
		0xa1, 0x9d, 0xd3, 0x6e, 0x2f, 0xc6, 0x9d, 0xfb, 0xc3, 0x4f, 0xad, 0xc6, 0x8d, 0xfb, 0xec, 0x9a,
		0x26, 0x3e, 0xbd, 0xa3, 0x9f, 0x0e, 0xea, 0xf6, 0x0c, 0x8e, 0x06, 0x75, 0x7b, 0x9c, 0x0b, 0x82,
		0x05, 0xb2, 0xc5, 0x02, 0xb1, 0xb3, 0x57, 0x5d, 0xaf, 0xe9, 0x7c, 0x17, 0xb8, 0x51, 0x7a, 0xd8,
		0x0c, 0xd9, 0xaa, 0x64, 0xab, 0x26, 0x3c, 0xad, 0x0c, 0xe3, 0x7b, 0x5c, 0x27, 0x3d, 0x0d, 0x41,
		0x3e, 0xba, 0x4e, 0x7a, 0x38, 0xa1, 0xb9, 0x51, 0x5a, 0x61, 0x5d, 0x47, 0xb8, 0x10, 0xae, 0xb4,
		0x84, 0xcb, 0xf8, 0x2e, 0xe9, 0x2f, 0xb6, 0xdf, 0xfc, 0xdb, 0xf6, 0x1d, 0xcb, 0xf5, 0x42, 0xc7,
		0xf7, 0x7b, 0x5d, 0xc1, 0x3b, 0x52, 0x9e, 0x68, 0x5b, 0xa6, 0x62, 0x6d, 0x61, 0xc5, 0x2b, 0xd6,
		0x9a, 0x4d, 0x5c, 0xe9, 0x09, 0xac, 0x36, 0x91, 0xd5, 0x26, 0xb4, 0xca, 0xc4, 0x36, 0x9b, 0xe0,
		0x86, 0x13, 0x5d, 0x6c, 0xc2, 0x4f, 0x1b, 0xb2, 0xbf, 0xdd, 0xc8, 0x5f, 0xe2, 0x37, 0x68, 0x54,
		0x68, 0xe8, 0x64, 0xab, 0xb1, 0x8b, 0x4d, 0x79, 0x8d, 0xa9, 0xff, 0x94, 0x04, 0x84, 0xb7, 0x5d,
		0x27, 0x90, 0x2c, 0xe6, 0x2a, 0x2c, 0x06, 0xea, 0xa2, 0xa0, 0x2e, 0x0e, 0xf3, 0x44, 0x62, 0xd4,
		0xf3, 0x59, 0xab, 0xb2, 0x28, 0x64, 0xb5, 0x62, 0xa5, 0xae, 0x67, 0x6c, 0xb6, 0xeb, 0xf8, 0x0d,
		0xc7, 0x0b, 0xed, 0x1b, 0x47, 0xa1, 0x04, 0xb1, 0x64, 0x05, 0x62, 0xd9, 0xfb, 0x47, 0x26, 0xff,
		0xc9, 0x57, 0x26, 0x55, 0xb9, 0x8f, 0x44, 0x49, 0x5e, 0x67, 0x9a, 0x57, 0xba, 0x9f, 0x64, 0xda,
		0xbe, 0xe2, 0x4d, 0x17, 0xc2, 0x53, 0xee, 0xe1, 0x90, 0x2a, 0xdc, 0x5b, 0x92, 0xf4, 0x90, 0x16,
		0xf2, 0xcb, 0x3c, 0xa8, 0x1b, 0xd9, 0x6c, 0xad, 0x96, 0x91, 0x5a, 0xbc, 0x02, 0x46, 0x9f, 0x73,
		0xbd, 0x20, 0xb4, 0xbd, 0x50, 0x9e, 0x2e, 0x27, 0x0d, 0x43, 0x98, 0x10, 0x26, 0x84, 0x09, 0x61,
		0x42, 0x98, 0x10, 0x26, 0x84, 0x09, 0x61, 0x42, 0x98, 0x6b, 0x47, 0x98, 0xa1, 0xe3, 0x7f, 0xb3,
		0x5b, 0x1a, 0x88, 0x39, 0x6e, 0x19, 0xc6, 0x84, 0x31, 0x61, 0xcc, 0xb5, 0x63, 0xcc, 0x20, 0xb4,
		0x43, 0x4b, 0x58, 0x04, 0x36, 0x65, 0x2f, 0x50, 0x9e, 0x36, 0xf9, 0xbb, 0x37, 0x5a, 0xc3, 0x72,
		0x9e, 0xed, 0x75, 0x02, 0xa7, 0xd1, 0xf1, 0x9a, 0xa2, 0x73, 0x0d, 0x8c, 0x05, 0x63, 0xc1, 0x58,
		0x03, 0x8c, 0x55, 0xbf, 0xf0, 0x19, 0xae, 0x5d, 0x2d, 0xae, 0x6d, 0x0b, 0x5a, 0xfd, 0xdd, 0x99,
		0x37, 0xfb, 0x3b, 0x34, 0x0b, 0xcd, 0x42, 0xb3, 0xeb, 0x47, 0xb3, 0x44, 0x4c, 0x41, 0x4d, 0x50,
		0x73, 0x1d, 0x50, 0x93, 0x88, 0x29, 0x64, 0xf9, 0x2c, 0x59, 0x0a, 0xea, 0xd6, 0x1d, 0x59, 0xba,
		0x1e, 0x64, 0x09, 0x59, 0x42, 0x96, 0x90, 0x25, 0x64, 0x09, 0x59, 0x42, 0x96, 0x90, 0x25, 0x64,
		0xb9, 0x54, 0x64, 0x99, 0xea, 0x51, 0x26, 0xc3, 0xcb, 0x6b, 0x66, 0xda, 0x13, 0xac, 0xee, 0xd3,
		0xed, 0x05, 0x83, 0xff, 0x1b, 0x9f, 0x9d, 0x16, 0x3f, 0xc7, 0xb8, 0x29, 0x57, 0x10, 0xa8, 0xdb,
		0x0b, 0x06, 0xff, 0x37, 0xba, 0xf5, 0xa6, 0xfe, 0xdb, 0xf8, 0x4d, 0x4f, 0xa7, 0x2f, 0xba, 0x91,
		0x8e, 0x7d, 0x98, 0xd4, 0x3e, 0x75, 0x9b, 0x2d, 0x47, 0xee, 0x10, 0xea, 0xb0, 0x35, 0x8e, 0x9d,
		0x2e, 0xe2, 0x85, 0x70, 0xec, 0x94, 0x63, 0xa7, 0x73, 0xbe, 0x11, 0xc7, 0x4e, 0x09, 0x44, 0x10,
		0x88, 0x20, 0x10, 0x41, 0x20, 0x82, 0x40, 0x04, 0x81, 0x08, 0x02, 0x11, 0x04, 0x22, 0x08, 0x44,
		0x48, 0x06, 0x22, 0x38, 0x76, 0x0a, 0x61, 0x42, 0x98, 0x10, 0x26, 0x84, 0x09, 0x61, 0x42, 0x98,
		0x10, 0x26, 0x84, 0x09, 0x61, 0x66, 0x90, 0x30, 0x39, 0x76, 0x0a, 0x63, 0xc2, 0x98, 0x30, 0xa6,
		0xb4, 0xcd, 0x72, 0xec, 0x14, 0x8c, 0x05, 0x63, 0xc1, 0x58, 0x11, 0x8c, 0xe5, 0xd8, 0x29, 0x5c,
		0x1b, 0x69, 0x18, 0x39, 0x76, 0x0a, 0xcd, 0x42, 0xb3, 0xd0, 0xac, 0x94, 0xcd, 0x12, 0x31, 0x05,
		0x35, 0x41, 0xcd, 0x75, 0x40, 0x4d, 0x22, 0xa6, 0x90, 0xe5, 0xb3, 0x64, 0xc9, 0xb1, 0x53, 0xc8,
		0x12, 0xb2, 0x84, 0x2c, 0x21, 0x4b, 0xc8, 0x12, 0xb2, 0x84, 0x2c, 0x21, 0x4b, 0xc8, 0x92, 0x63,
		0xa7, 0x8b, 0x1d, 0x3b, 0x15, 0x38, 0xb9, 0xb8, 0xa9, 0x75, 0xd0, 0xf4, 0x74, 0xf0, 0x6e, 0xcb,
		0x78, 0xb6, 0xd4, 0xe8, 0x7a, 0xf4, 0x19, 0x1e, 0x31, 0xb9, 0x26, 0x5d, 0x58, 0x52, 0x39, 0x5d,
		0x9a, 0x2d, 0xd7, 0x82, 0xd3, 0xa5, 0x29, 0x38, 0x0c, 0x53, 0x7b, 0xeb, 0x79, 0x03, 0x7d, 0x17,
		0x30, 0xb7, 0xc9, 0xd1, 0xef, 0x43, 0x81, 0xb6, 0xc6, 0x5f, 0x53, 0xc6, 0x27, 0x50, 0xf0, 0xae,
		0x1c, 0xaf, 0xd7, 0x76, 0xfc, 0xd1, 0xd2, 0x28, 0xef, 0x5e, 0x15, 0x4a, 0x82, 0x6d, 0x9e, 0x78,
		0xbd, 0xf6, 0xc0, 0x62, 0x32, 0xe5, 0xf8, 0x2a, 0x0c, 0x49, 0xcf, 0xf5, 0xc2, 0xbd, 0xa2, 0xc2,
		0x68, 0xec, 0xe3, 0xec, 0xe2, 0xec, 0xe2, 0xec, 0x66, 0x62, 0x48, 0x4b, 0xc5, 0xc3, 0xd2, 0x61,
		0x65, 0xbf, 0x78, 0x48, 0x9e, 0xce, 0xca, 0xfa, 0xbc, 0xb5, 0x25, 0x74, 0x96, 0xbe, 0x3a, 0xbe,
		0xe7, 0xb4, 0xe4, 0xbc, 0xa5, 0x71, 0x7b, 0x14, 0xe3, 0xc1, 0x5d, 0xc2, 0x5d, 0x32, 0xf8, 0x46,
		0x14, 0xe3, 0x49, 0x77, 0xca, 0x6b, 0x4c, 0xfd, 0xa7, 0x24, 0x80, 0xed, 0x59, 0x6d, 0x71, 0x98,
		0x27, 0x12, 0x6c, 0xcf, 0xc6, 0xb2, 0x59, 0xb6, 0x67, 0xf1, 0x58, 0xf1, 0x58, 0xd7, 0xc0, 0x63,
		0x65, 0x7b, 0x76, 0x85, 0x5d, 0x55, 0x8a, 0xf1, 0x40, 0x98, 0x10, 0x26, 0x84, 0x09, 0x61, 0x42,
		0x98, 0x10, 0x26, 0x84, 0x09, 0x61, 0x42, 0x98, 0x59, 0x24, 0x4c, 0x8a, 0xf1, 0xc0, 0x98, 0x30,
		0x26, 0x8c, 0x29, 0x6d, 0xb3, 0x14, 0xe3, 0x01, 0x63, 0xc1, 0x58, 0x30, 0x56, 0x04, 0x63, 0x29,
		0xc6, 0x03, 0xd7, 0x46, 0x1a, 0x46, 0x8a, 0xf1, 0x40, 0xb3, 0xd0, 0x2c, 0x34, 0x2b, 0x65, 0xb3,
		0x44, 0x4c, 0x41, 0x4d, 0x50, 0x73, 0x1d, 0x50, 0x93, 0x88, 0x29, 0x64, 0xf9, 0x2c, 0x59, 0x52,
		0x8c, 0x07, 0xb2, 0x84, 0x2c, 0x21, 0x4b, 0xc8, 0x12, 0xb2, 0x84, 0x2c, 0x21, 0x4b, 0xc8, 0x12,
		0xb2, 0xa4, 0x18, 0xcf, 0x62, 0xc5, 0x78, 0x44, 0xce, 0x2e, 0x6e, 0x6a, 0x95, 0xe3, 0xf9, 0xd7,
		0xe8, 0xed, 0x96, 0xf0, 0x8c, 0xa9, 0xe7, 0x0a, 0x20, 0xea, 0x14, 0x49, 0x86, 0xad, 0x71, 0xbe,
		0x74, 0x11, 0x77, 0x83, 0xf3, 0xa5, 0x9c, 0x2f, 0x9d, 0xf3, 0x8d, 0x38, 0x5f, 0x4a, 0xc4, 0x81,
		0x88, 0x03, 0x11, 0x07, 0x22, 0x0e, 0x44, 0x1c, 0x88, 0x38, 0x10, 0x71, 0x20, 0xe2, 0x40, 0xc4,
		0x41, 0x32, 0xe2, 0xc0, 0xf9, 0x52, 0x08, 0x13, 0xc2, 0x84, 0x30, 0x21, 0x4c, 0x08, 0x13, 0xc2,
		0x84, 0x30, 0x21, 0x4c, 0x08, 0x33, 0x83, 0x84, 0xc9, 0xf9, 0x52, 0x18, 0x13, 0xc6, 0x84, 0x31,
		0xa5, 0x6d, 0x96, 0xf3, 0xa5, 0x60, 0x2c, 0x18, 0x0b, 0xc6, 0x8a, 0x60, 0x2c, 0xe7, 0x4b, 0xe1,
		0xda, 0x48, 0xc3, 0xc8, 0xf9, 0x52, 0x68, 0x16, 0x9a, 0x85, 0x66, 0xa5, 0x6c, 0x96, 0x88, 0x29,
		0xa8, 0x09, 0x6a, 0xae, 0x03, 0x6a, 0x12, 0x31, 0x85, 0x2c, 0x9f, 0x25, 0x4b, 0xce, 0x97, 0x42,
		0x96, 0x90, 0x25, 0x64, 0x09, 0x59, 0x42, 0x96, 0x90, 0x25, 0x64, 0x09, 0x59, 0x42, 0x96, 0x9c,
		0x2f, 0x5d, 0xec, 0x7c, 0xa9, 0xc0, 0xc9, 0xc5, 0x4d, 0xad, 0xd3, 0xa5, 0x1f, 0x06, 0xef, 0xb6,
		0x84, 0x67, 0x4b, 0x83, 0xce, 0x75, 0xf8, 0xb7, 0xed, 0x3b, 0xa3, 0xcd, 0x56, 0xbf, 0xd7, 0x0d,
		0xe5, 0x4e, 0x9a, 0x3e, 0xd1, 0x36, 0xe7, 0x4e, 0x17, 0x71, 0x43, 0x38, 0x77, 0xca, 0xb9, 0xd3,
		0x39, 0xdf, 0x88, 0x73, 0xa7, 0x44, 0x22, 0x88, 0x44, 0x10, 0x89, 0x20, 0x12, 0x41, 0x24, 0x82,
		0x48, 0x04, 0x91, 0x08, 0x22, 0x11, 0x44, 0x22, 0x24, 0x23, 0x11, 0x9c, 0x3b, 0x85, 0x30, 0x21,
		0x4c, 0x08, 0x13, 0xc2, 0x84, 0x30, 0x21, 0x4c, 0x08, 0x13, 0xc2, 0x84, 0x30, 0x33, 0x48, 0x98,
		0x9c, 0x3b, 0x85, 0x31, 0x61, 0x4c, 0x18, 0x53, 0xda, 0x66, 0x39, 0x77, 0x0a, 0xc6, 0x82, 0xb1,
		0x60, 0xac, 0x08, 0xc6, 0x72, 0xee, 0x14, 0xae, 0x8d, 0x34, 0x8c, 0x9c, 0x3b, 0x85, 0x66, 0xa1,
		0x59, 0x68, 0x56, 0xca, 0x66, 0x89, 0x98, 0x82, 0x9a, 0xa0, 0xe6, 0x3a, 0xa0, 0x26, 0x11, 0x53,
		0xc8, 0xf2, 0x59, 0xb2, 0xe4, 0xdc, 0x29, 0x64, 0x09, 0x59, 0x42, 0x96, 0x90, 0x25, 0x64, 0x09,
		0x59, 0x42, 0x96, 0x90, 0x25, 0x64, 0xc9, 0xb9, 0xd3, 0xc5, 0xce, 0x9d, 0x8a, 0x9f, 0x63, 0xdc,
		0xd4, 0x3a, 0x85, 0xfa, 0x71, 0xfc, 0xa6, 0xa7, 0xd3, 0x17, 0x5d, 0xc2, 0x23, 0xa9, 0x61, 0x27,
		0x14, 0x48, 0xed, 0x98, 0xa2, 0xca, 0xa8, 0x39, 0x0e, 0x9e, 0x2e, 0xe2, 0x87, 0x70, 0xf0, 0x94,
		0x83, 0xa7, 0x73, 0xbe, 0x11, 0x07, 0x4f, 0x09, 0x45, 0x10, 0x8a, 0x20, 0x14, 0x41, 0x28, 0x82,
		0x50, 0x04, 0xa1, 0x08, 0x42, 0x11, 0x84, 0x22, 0x08, 0x45, 0x48, 0x86, 0x22, 0x38, 0x78, 0x0a,
		0x61, 0x42, 0x98, 0x10, 0x26, 0x84, 0x09, 0x61, 0x42, 0x98, 0x10, 0x26, 0x84, 0x09, 0x61, 0x66,
		0x90, 0x30, 0x39, 0x78, 0x0a, 0x63, 0xc2, 0x98, 0x30, 0xa6, 0xb4, 0xcd, 0x72, 0xf0, 0x14, 0x8c,
		0x05, 0x63, 0xc1, 0x58, 0x11, 0x8c, 0xe5, 0xe0, 0x29, 0x5c, 0x1b, 0x69, 0x18, 0x39, 0x78, 0x0a,
		0xcd, 0x42, 0xb3, 0xd0, 0xac, 0x94, 0xcd, 0x12, 0x31, 0x05, 0x35, 0x41, 0xcd, 0x75, 0x40, 0x4d,
		0x22, 0xa6, 0x90, 0xe5, 0xb3, 0x64, 0xc9, 0xc1, 0x53, 0xc8, 0x12, 0xb2, 0x84, 0x2c, 0x21, 0x4b,
		0xc8, 0x12, 0xb2, 0x84, 0x2c, 0x21, 0x4b, 0xc8, 0x92, 0x83, 0xa7, 0x8b, 0x1d, 0x3c, 0x95, 0x38,
		0xba, 0xb8, 0xa9, 0x75, 0xd6, 0xf4, 0x72, 0xf8, 0x72, 0x4b, 0x78, 0xbe, 0xb4, 0x17, 0x38, 0xbe,
		0xdc, 0xf1, 0xd2, 0x61, 0x6b, 0x9c, 0x2e, 0x5d, 0xc4, 0xd9, 0xe0, 0x74, 0x29, 0xa7, 0x4b, 0xe7,
		0x7c, 0x23, 0x4e, 0x97, 0x12, 0x6f, 0x20, 0xde, 0x40, 0xbc, 0x81, 0x78, 0x03, 0xf1, 0x06, 0xe2,
		0x0d, 0xc4, 0x1b, 0x88, 0x37, 0x10, 0x6f, 0x90, 0x8c, 0x37, 0x70, 0xba, 0x14, 0xc2, 0x84, 0x30,
		0x21, 0x4c, 0x08, 0x13, 0xc2, 0x84, 0x30, 0x21, 0x4c, 0x08, 0x13, 0xc2, 0xcc, 0x20, 0x61, 0x72,
		0xba, 0x14, 0xc6, 0x84, 0x31, 0x61, 0x4c, 0x69, 0x9b, 0xe5, 0x74, 0x29, 0x18, 0x0b, 0xc6, 0x82,
		0xb1, 0x22, 0x18, 0xcb, 0xe9, 0x52, 0xb8, 0x36, 0xd2, 0x30, 0x72, 0xba, 0x14, 0x9a, 0x85, 0x66,
		0xa1, 0x59, 0x29, 0x9b, 0x25, 0x62, 0x0a, 0x6a, 0x82, 0x9a, 0xeb, 0x80, 0x9a, 0x44, 0x4c, 0x21,
		0xcb, 0x67, 0xc9, 0x92, 0xd3, 0xa5, 0x90, 0x25, 0x64, 0x09, 0x59, 0x42, 0x96, 0x90, 0x25, 0x64,
		0x09, 0x59, 0x42, 0x96, 0x90, 0x25, 0xa7, 0x4b, 0x17, 0x3b, 0x5d, 0x2a, 0x70, 0x72, 0x71, 0x53,
		0xeb, 0x70, 0xe9, 0xef, 0x83, 0x77, 0x5b, 0xc2, 0xb3, 0xa5, 0x7f, 0xdb, 0x6e, 0x28, 0x77, 0xb6,
		0x74, 0xd8, 0x1a, 0x67, 0x4b, 0x17, 0x71, 0x35, 0x38, 0x5b, 0xca, 0xd9, 0xd2, 0x39, 0xdf, 0x88,
		0xb3, 0xa5, 0x44, 0x1b, 0x88, 0x36, 0x10, 0x6d, 0x20, 0xda, 0x40, 0xb4, 0x81, 0x68, 0x03, 0xd1,
		0x06, 0xa2, 0x0d, 0x44, 0x1b, 0x24, 0xa3, 0x0d, 0x9c, 0x2d, 0x85, 0x30, 0x21, 0x4c, 0x08, 0x13,
		0xc2, 0x84, 0x30, 0x21, 0x4c, 0x08, 0x13, 0xc2, 0x84, 0x30, 0x33, 0x48, 0x98, 0x9c, 0x2d, 0x85,
		0x31, 0x61, 0x4c, 0x18, 0x53, 0xda, 0x66, 0x39, 0x5b, 0x0a, 0xc6, 0x82, 0xb1, 0x60, 0xac, 0x08,
		0xc6, 0x72, 0xb6, 0x14, 0xae, 0x8d, 0x34, 0x8c, 0x9c, 0x2d, 0x85, 0x66, 0xa1, 0x59, 0x68, 0x56,
		0xca, 0x66, 0x89, 0x98, 0x82, 0x9a, 0xa0, 0xe6, 0x3a, 0xa0, 0x26, 0x11, 0x53, 0xc8, 0xf2, 0x59,
		0xb2, 0xe4, 0x6c, 0x29, 0x64, 0x09, 0x59, 0x42, 0x96, 0x90, 0x25, 0x64, 0x09, 0x59, 0x42, 0x96,
		0x90, 0x25, 0x64, 0xc9, 0xd9, 0xd2, 0xc5, 0xce, 0x96, 0x0a, 0x9c, 0x5c, 0xdc, 0xd4, 0x3a, 0x5b,
		0xfa, 0xef, 0xc1, 0xbb, 0xa5, 0x75, 0xb6, 0x74, 0x23, 0x41, 0xb3, 0x91, 0x32, 0x17, 0x35, 0x33,
		0x31, 0xb0, 0x10, 0x0d, 0xcb, 0x88, 0x67, 0x14, 0xd1, 0x87, 0x34, 0xda, 0x27, 0x22, 0x0e, 0xfe,
		0xc0, 0xdf, 0x18, 0xa5, 0xe5, 0x34, 0x9d, 0xa8, 0xae, 0x46, 0xee, 0x9d, 0x1b, 0x84, 0xd5, 0x30,
		0x8c, 0x77, 0x5e, 0x72, 0xc0, 0x63, 0x27, 0x2d, 0x67, 0xe0, 0x29, 0x0c, 0xd6, 0x26, 0xaf, 0xd7,
		0x6a, 0xed, 0x6c, 0xc4, 0x21, 0x00, 0xf3, 0x46, 0xce, 0xfc, 0xa6, 0xe3, 0x3b, 0xcd, 0xd7, 0xb7,
		0xe3, 0x26, 0x54, 0x3b, 0xdc, 0x70, 0x96, 0x29, 0xcc, 0xae, 0x18, 0xf3, 0x4a, 0x76, 0x3e, 0x45,
		0x9b, 0x49, 0x8b, 0xcf, 0x87, 0xc5, 0x7e, 0x72, 0xc1, 0x01, 0x8c, 0x3b, 0x70, 0xc2, 0x03, 0x16,
		0x61, 0xb0, 0xe4, 0x06, 0x69, 0xb1, 0x01, 0x7a, 0xb9, 0xbb, 0x17, 0xe8, 0xea, 0x5c, 0xd3, 0x0b,
		0x16, 0xee, 0xdf, 0xa9, 0xb7, 0x3c, 0xf8, 0xd0, 0x82, 0xc3, 0x18, 0xad, 0xc2, 0x41, 0xe4, 0x40,
		0x57, 0x9c, 0x40, 0x56, 0xfc, 0xca, 0x04, 0x71, 0xc3, 0x50, 0xc6, 0x61, 0x26, 0xe3, 0x30, 0x92,
		0x51, 0xe5, 0x00, 0xd9, 0x89, 0x1d, 0xf5, 0xc4, 0x7f, 0xae, 0x31, 0xb1, 0x89, 0x88, 0x9d, 0x3e,
		0x19, 0xe6, 0xf1, 0xe7, 0xa3, 0xae, 0xd4, 0xb1, 0x4a, 0x73, 0xc4, 0x8e, 0xd4, 0x9a, 0x44, 0x64,
		0xcd, 0x4b, 0x6d, 0x98, 0xc6, 0x57, 0xc5, 0xe2, 0xa8, 0x62, 0xf1, 0x52, 0x91, 0x52, 0x19, 0xba,
		0x2c, 0x18, 0xb7, 0xf4, 0x45, 0x2e, 0x70, 0x6c, 0xbf, 0xf1, 0x25, 0xfe, 0x60, 0x4d, 0x93, 0x43,
		0x47, 0xed, 0xc4, 0xec, 0x60, 0xb3, 0x80, 0x8d, 0xf1, 0x96, 0x86, 0xc4, 0x16, 0x86, 0x5c, 0x8d,
		0x1a, 0xa9, 0x0d, 0x0a, 0xf1, 0x0d, 0x09, 0xf1, 0x0d, 0x08, 0xd1, 0x1a, 0x34, 0xc9, 0x7a, 0xdc,
		0xc6, 0xdb, 0x07, 0x77, 0x00, 0xd4, 0x69, 0xdb, 0xae, 0x67, 0x0d, 0x59, 0xcf, 0xc0, 0x68, 0x26,
		0x6b, 0x8c, 0x41, 0x16, 0x75, 0xee, 0x9d, 0xe3, 0xdd, 0x0c, 0x59, 0xd7, 0x6c, 0x47, 0x40, 0x20,
		0x5e, 0x25, 0x19, 0xf1, 0x97, 0xde, 0x40, 0x9d, 0x86, 0x7f, 0x85, 0xda, 0x53, 0x08, 0xf6, 0x4a,
		0x6c, 0x8b, 0x4b, 0x46, 0xe8, 0xb5, 0x86, 0xa0, 0x58, 0xde, 0xcb, 0xf0, 0x20, 0xa4, 0x14, 0x7a,
		0xac, 0x19, 0x28, 0xc0, 0xb9, 0x1d, 0x86, 0x8e, 0xef, 0x19, 0x4b, 0x40, 0x6e, 0x6b, 0x6b, 0xeb,
		0x93, 0x6d, 0xfd, 0xaf, 0x6a, 0xfd, 0x95, 0xb7, 0x0e, 0xeb, 0xb5, 0x7b, 0x7f, 0xb8, 0xba, 0xb2,
		0xea, 0xb5, 0xed, 0x1f, 0xf9, 0x9d, 0x4a, 0xa1, 0xbf, 0xfd, 0xcb, 0xdd, 0xdf, 0xd7, 0xae, 0xae,
		0x5e, 0x6d, 0xff, 0x33, 0xce, 0xa7, 0x7e, 0xd9, 0xfe, 0x79, 0x75, 0xf5, 0x2a, 0xfe, 0xca, 0x51,
		0x4b, 0x74, 0xe5, 0x30, 0x0a, 0xbd, 0x89, 0x86, 0xe0, 0x44, 0x43, 0x71, 0x4f, 0x86, 0xe4, 0x84,
		0xca, 0x23, 0x0a, 0x14, 0xb0, 0x94, 0xcc, 0xfa, 0xb8, 0x0f, 0x56, 0x9d, 0xd1, 0xb7, 0xb5, 0x3e,
		0xdf, 0x4a, 0xec, 0x82, 0x68, 0x64, 0x78, 0x3c, 0x80, 0xac, 0x5e, 0x9a, 0xe5, 0x36, 0x57, 0x22,
		0xea, 0x9e, 0x9d, 0x20, 0x70, 0xd3, 0x0b, 0x76, 0x63, 0xc5, 0x23, 0xe4, 0x22, 0x8c, 0xc7, 0x5e,
		0x50, 0x1f, 0x3b, 0x5f, 0x5a, 0x81, 0xe0, 0x08, 0x11, 0xb5, 0x2f, 0x9d, 0x20, 0xb4, 0x1c, 0x2f,
		0xf4, 0x5d, 0x27, 0x88, 0x1f, 0xe2, 0x79, 0xd0, 0x0a, 0x81, 0x1e, 0x02, 0x3d, 0xab, 0x11, 0xe8,
		0x99, 0x9a, 0xf5, 0xad, 0x79, 0xb0, 0xe7, 0x5e, 0x5b, 0x66, 0x01, 0x9f, 0x02, 0x01, 0x1f, 0x02,
		0x3e, 0xcb, 0x11, 0xf0, 0x31, 0x2d, 0x2e, 0x1c, 0x77, 0xeb, 0x61, 0xae, 0xd9, 0xc5, 0x5e, 0xfa,
		0x05, 0x27, 0xa2, 0xd8, 0x84, 0x94, 0x9c, 0x98, 0xf2, 0x13, 0x54, 0xc3, 0x89, 0xd8, 0xa4, 0x6a,
		0xb8, 0x50, 0xa0, 0x24, 0x33, 0x55, 0xc3, 0x5b, 0xae, 0x1d, 0x28, 0xd4, 0x0d, 0x1f, 0x36, 0xcb,
		0x59, 0x92, 0xec, 0xc8, 0x80, 0x96, 0x1c, 0xa8, 0xcb, 0x82, 0xba, 0x3c, 0xa8, 0xca, 0x84, 0x8c,
		0x5c, 0x08, 0xc9, 0xc6, 0xf4, 0x9b, 0x6a, 0xd6, 0xdb, 0xf1, 0x5d, 0xef, 0x46, 0xe1, 0x0c, 0x49,
		0xe1, 0x20, 0x53, 0x3d, 0x28, 0x12, 0x10, 0x55, 0x0d, 0x90, 0xaa, 0x06, 0x4c, 0x67, 0x1a, 0x37,
		0xca, 0x69, 0xd4, 0x9b, 0x34, 0x12, 0x7b, 0x4a, 0x03, 0xc7, 0x71, 0x1c, 0x72, 0x12, 0x5e, 0x25,
		0xa7, 0x2d, 0xb3, 0x50, 0xb2, 0x50, 0xb2, 0x50, 0xb2, 0x50, 0x66, 0x69, 0xa1, 0xcc, 0x46, 0x61,
		0xd0, 0xee, 0xb7, 0x92, 0x65, 0x37, 0x9b, 0xbe, 0x13, 0x28, 0x78, 0x29, 0x0f, 0x5a, 0x47, 0x83,
		0xd1, 0x60, 0x34, 0x78, 0xad, 0x34, 0x58, 0x61, 0xfe, 0x6f, 0x0a, 0xa5, 0xb5, 0xcd, 0xce, 0x5b,
		0xa1, 0x24, 0x97, 0x99, 0x86, 0xff, 0xb3, 0xb5, 0xf5, 0x29, 0x6f, 0x1d, 0xd6, 0x7e, 0x7e, 0x2a,
		0x58, 0x87, 0xb5, 0xd1, 0x6f, 0x0b, 0xc3, 0x5f, 0x46, 0xbf, 0x2f, 0x7e, 0xca, 0x5b, 0xa5, 0xc9,
		0xef, 0xcb, 0x9f, 0xf2, 0x56, 0xb9, 0xb6, 0x7d, 0x75, 0xf5, 0x6a, 0xfb, 0xc7, 0x5e, 0x3f, 0xfa,
		0x07, 0xff, 0x91, 0xcb, 0xda, 0x99, 0x5b, 0xfc, 0x41, 0xfc, 0xc1, 0xc8, 0x4c, 0x52, 0x51, 0x65,
		0x92, 0x0a, 0x4c, 0x02, 0x93, 0xc0, 0x24, 0x6b, 0xcb, 0x24, 0x15, 0x98, 0x64, 0xc4, 0x24, 0xb6,
		0x75, 0x5d, 0xb5, 0xde, 0xd6, 0x7e, 0x14, 0x76, 0x4a, 0xfd, 0xa3, 0xed, 0x1f, 0xfb, 0xfd, 0xc7,
		0x7f, 0xf9, 0xf3, 0xa9, 0x1f, 0x2b, 0xec, 0xec, 0xf7, 0x8f, 0xe6, 0xfc, 0x4b, 0xa5, 0x7f, 0xb4,
		0x60, 0x1b, 0xe5, 0xfe, 0xd6, 0xcc, 0x8f, 0x0e, 0xfe, 0xbe, 0x38, 0xef, 0x03, 0xa5, 0x39, 0x1f,
		0xd8, 0x9b, 0xf7, 0x81, 0xbd, 0x39, 0x1f, 0x98, 0xfb, 0x4a, 0xc5, 0x39, 0x1f, 0x28, 0xf7, 0x7f,
		0xce, 0xfc, 0xfc, 0xd6, 0xd3, 0x3f, 0x5a, 0xe9, 0x6f, 0xff, 0x9c, 0xf7, 0x6f, 0xfb, 0xfd, 0x9f,
		0x47, 0xdb, 0x10, 0x1a, 0x84, 0x96, 0x2e, 0xa1, 0x51, 0xc2, 0x66, 0x6e, 0xe2, 0xec, 0xfd, 0x2c,
		0xcf, 0xbb, 0x3f, 0xdc, 0xee, 0x8a, 0x64, 0xd5, 0x6c, 0x8a, 0x26, 0xd8, 0xfe, 0xd6, 0x09, 0xc2,
		0x93, 0xd1, 0x9b, 0x4e, 0x7f, 0x7f, 0x1b, 0x2b, 0xed, 0x56, 0xce, 0x40, 0x0c, 0x8c, 0x43, 0x6e,
		0x13, 0x48, 0x7a, 0xf3, 0x47, 0x08, 0xee, 0x49, 0x86, 0xca, 0x16, 0xb4, 0x93, 0x0c, 0x95, 0x02,
		0x8c, 0x4f, 0xed, 0xad, 0xe5, 0xd8, 0xd7, 0xbe, 0x73, 0x2d, 0x61, 0x70, 0x13, 0xee, 0xde, 0x17,
		0x68, 0xeb, 0x7c, 0xbc, 0x8e, 0xbc, 0x7a, 0x35, 0x96, 0xfc, 0xdd, 0xa9, 0x88, 0x2c, 0xa1, 0xa4,
		0x8e, 0x8a, 0x6c, 0x89, 0xe9, 0xa9, 0x69, 0xcd, 0xae, 0x4d, 0x8d, 0xcc, 0xd2, 0x22, 0x62, 0x8a,
		0x98, 0x2e, 0x95, 0x98, 0x92, 0x59, 0x4a, 0x60, 0x94, 0xc0, 0x28, 0x81, 0xd1, 0xcc, 0x05, 0x46,
		0xc9, 0x2c, 0x25, 0x4e, 0x45, 0x66, 0x69, 0xb2, 0xc1, 0x05, 0x16, 0x4a, 0x16, 0x4a, 0x16, 0x4a,
		0x16, 0x4a, 0x32, 0x4b, 0x23, 0x8e, 0x01, 0x99, 0xa5, 0x68, 0x30, 0x1a, 0xbc, 0xbe, 0x1a, 0x4c,
		0x66, 0x29, 0x99, 0xa5, 0xf8, 0x83, 0xf8, 0x83, 0x91, 0x99, 0x84, 0xcc, 0x52, 0x98, 0x04, 0x26,
		0x81, 0x49, 0xc8, 0x2c, 0x25, 0xb3, 0x94, 0xcc, 0x52, 0x08, 0x0d, 0x42, 0x93, 0x23, 0x34, 0x32,
		0x4b, 0x23, 0x67, 0x96, 0x4a, 0x24, 0xd5, 0x6c, 0x26, 0x90, 0x58, 0x6a, 0x70, 0x43, 0x9e, 0xb9,
		0x79, 0x24, 0x5b, 0xd3, 0x6f, 0x7c, 0x83, 0x9e, 0xe1, 0x0e, 0xcf, 0x5a, 0x55, 0xf4, 0x8e, 0x2d,
		0x42, 0xab, 0x73, 0xb5, 0xe5, 0x33, 0x93, 0x3c, 0xf5, 0x7b, 0x2e, 0xe7, 0x4e, 0xeb, 0x1c, 0xc5,
		0xb7, 0x55, 0x8d, 0x20, 0xd5, 0x12, 0xdc, 0xf7, 0x46, 0x3c, 0x0b, 0x75, 0xb8, 0x03, 0xc7, 0xff,
		0xe6, 0xf8, 0x06, 0x25, 0xb8, 0x27, 0x0d, 0x50, 0x7d, 0x5b, 0x2f, 0xc2, 0x41, 0xf5, 0xed, 0x64,
		0xaf, 0x59, 0x1b, 0x58, 0xb4, 0xc4, 0x35, 0x6b, 0xc3, 0x76, 0xa8, 0xba, 0x4d, 0xd5, 0xed, 0x94,
		0x42, 0x7e, 0x4b, 0x56, 0x75, 0x5b, 0x6a, 0x0b, 0xe0, 0x2e, 0x69, 0x5a, 0x24, 0xea, 0xc7, 0x51,
		0xb3, 0x34, 0xa3, 0xf9, 0x9c, 0x8e, 0xc8, 0x40, 0x14, 0x67, 0x8d, 0x8f, 0x9a, 0x4d, 0x34, 0x64,
		0x09, 0x4f, 0x9a, 0x71, 0x8b, 0x01, 0x6a, 0x8a, 0x9a, 0x66, 0x4f, 0x4d, 0xe5, 0xce, 0x9a, 0x69,
		0xe5, 0x4c, 0x90, 0x2e, 0x91, 0x3d, 0x29, 0xd0, 0x92, 0x04, 0x75, 0x69, 0x50, 0x97, 0x08, 0x55,
		0xa9, 0x90, 0x91, 0x0c, 0x21, 0xe9, 0x90, 0x07, 0xb2, 0x19, 0x7b, 0x75, 0xbb, 0x9a, 0xc9, 0x12,
		0x87, 0x82, 0x6d, 0x8e, 0xfb, 0x40, 0x36, 0x53, 0x42, 0x76, 0x4e, 0x6d, 0x26, 0x90, 0x1c, 0x3b,
		0xd3, 0xc7, 0x07, 0x0a, 0x6d, 0x6b, 0x25, 0xa6, 0x4c, 0x1f, 0xb0, 0xac, 0x49, 0xb3, 0x93, 0xff,
		0x6a, 0xa2, 0x2d, 0xf6, 0x77, 0x96, 0xc8, 0xa8, 0x2b, 0x18, 0xf5, 0xf3, 0x46, 0x4d, 0xd6, 0xd5,
		0x52, 0x67, 0x5d, 0x29, 0x4d, 0xf1, 0xac, 0x65, 0x85, 0x65, 0x22, 0x15, 0xbc, 0xdb, 0xf1, 0x43,
		0x79, 0x77, 0x66, 0xd8, 0xaa, 0x10, 0x79, 0x1d, 0x3b, 0xd7, 0x76, 0xaf, 0x35, 0x44, 0xcc, 0xf2,
		0x1e, 0x0e, 0x12, 0x0e, 0x12, 0x0e, 0xd2, 0x7a, 0x39, 0x48, 0x03, 0x31, 0xb1, 0xbc, 0x5e, 0xfb,
		0x73, 0xec, 0xbd, 0xdd, 0xe7, 0x24, 0xa0, 0x22, 0xd8, 0xe4, 0x85, 0xed, 0xdd, 0x2c, 0x85, 0x87,
		0xf4, 0xde, 0xf5, 0xc4, 0x67, 0xab, 0x92, 0xb6, 0xce, 0x34, 0xff, 0x87, 0xdd, 0xea, 0x39, 0x8a,
		0xed, 0xbf, 0xf5, 0xed, 0x46, 0xe8, 0x76, 0xbc, 0x63, 0xf7, 0xc6, 0x1d, 0x26, 0x08, 0xe6, 0xc5,
		0x9f, 0xd3, 0x57, 0x60, 0xeb, 0xf7, 0xf6, 0xf7, 0xa5, 0x1f, 0xd2, 0x4a, 0xb9, 0xbc, 0x57, 0x5e,
		0xe2, 0x61, 0x85, 0x57, 0x15, 0x5b, 0x58, 0xed, 0xc4, 0xf8, 0x71, 0x56, 0xdf, 0xf8, 0xd7, 0x2c,
		0x56, 0x5a, 0xfe, 0x38, 0x7a, 0xc3, 0xf1, 0xaf, 0x4b, 0x5c, 0x62, 0x99, 0x7a, 0xa0, 0x89, 0xfa,
		0x1f, 0xec, 0xd1, 0xb2, 0x47, 0xbb, 0x88, 0x9b, 0xcf, 0x1e, 0x2d, 0x21, 0x08, 0x42, 0x10, 0x84,
		0x20, 0xb2, 0x18, 0x82, 0x60, 0x8f, 0x56, 0xda, 0x1d, 0x63, 0x8f, 0x76, 0x81, 0x07, 0xb0, 0x47,
		0xab, 0x18, 0x35, 0x61, 0x8f, 0x36, 0x55, 0xa3, 0x66, 0x8f, 0x96, 0x3d, 0xda, 0x75, 0x88, 0x79,
		0xb1, 0x47, 0x8b, 0x83, 0x84, 0x83, 0x84, 0x83, 0xb4, 0xda, 0x0e, 0x12, 0x7b, 0xb4, 0xe2, 0x9c,
		0xc4, 0x1e, 0xed, 0xfc, 0xf6, 0xd9, 0xa3, 0x4d, 0x6d, 0x48, 0xd9, 0xa3, 0x5d, 0x6d, 0x5e, 0x65,
		0x8f, 0x76, 0xd1, 0x3d, 0xda, 0xec, 0xd5, 0x2c, 0x7b, 0xb4, 0x45, 0xbb, 0x7e, 0xc5, 0xca, 0xcc,
		0x62, 0x2e, 0x6b, 0x55, 0xab, 0x4c, 0x68, 0xf7, 0xbb, 0x17, 0x18, 0x13, 0x9f, 0xa4, 0x6b, 0x72,
		0xdf, 0x1d, 0xe9, 0x8c, 0xbe, 0xad, 0xf5, 0xf9, 0x56, 0x62, 0x92, 0x6a, 0xb8, 0x21, 0x0f, 0x5c,
		0x8f, 0x61, 0x4f, 0xae, 0xc5, 0x64, 0xcd, 0x66, 0xd5, 0xba, 0x87, 0xea, 0x9e, 0x89, 0x62, 0x75,
		0x0f, 0xf5, 0x9c, 0x2a, 0x75, 0x6a, 0x83, 0x9e, 0x6a, 0x81, 0xba, 0xf1, 0x28, 0x67, 0xa2, 0x38,
		0x5d, 0xac, 0xd4, 0x28, 0xa3, 0x54, 0x28, 0xe3, 0xc2, 0x74, 0x45, 0x0a, 0xd3, 0xa5, 0xb9, 0x9e,
		0xad, 0x76, 0x61, 0x3a, 0xdb, 0x6f, 0x7c, 0x91, 0x28, 0x4c, 0x37, 0x6c, 0xc7, 0xac, 0x30, 0x5d,
		0x9e, 0xc2, 0x74, 0x14, 0xa6, 0x5b, 0x0e, 0xc0, 0x33, 0x8e, 0x33, 0x4f, 0xed, 0xa5, 0xd9, 0x69,
		0xdb, 0xae, 0x67, 0x19, 0x5e, 0x31, 0x2a, 0xb1, 0x61, 0x9e, 0x7b, 0xe7, 0x78, 0x37, 0x43, 0xe8,
		0x30, 0x8b, 0x1c, 0x0b, 0xf8, 0x38, 0x92, 0x91, 0x61, 0xe9, 0x5d, 0xb6, 0x49, 0x98, 0xb0, 0x20,
		0xd4, 0x9e, 0x42, 0x48, 0x50, 0x62, 0x4b, 0x56, 0x32, 0x92, 0xab, 0x35, 0x04, 0xc5, 0xf2, 0x5e,
		0x86, 0x07, 0x21, 0x25, 0x4f, 0xb7, 0x66, 0xa0, 0x00, 0x52, 0xa9, 0x31, 0xb9, 0xad, 0xad, 0xad,
		0x4f, 0xb6, 0xf5, 0xbf, 0xaa, 0xf5, 0x57, 0xde, 0x3a, 0xac, 0xd7, 0xee, 0xfd, 0xe1, 0xea, 0xca,
		0xaa, 0xd7, 0xb6, 0x7f, 0xe4, 0x77, 0x2a, 0x85, 0xfe, 0xf6, 0x2f, 0x77, 0x7f, 0x5f, 0xbb, 0xba,
		0x7a, 0xb5, 0xfd, 0xcf, 0x38, 0x9f, 0xfa, 0x65, 0xfb, 0xe7, 0xd5, 0xd5, 0xab, 0xf8, 0x2b, 0x47,
		0x2d, 0xd1, 0x95, 0x83, 0x08, 0x1c, 0x11, 0x38, 0x22, 0x70, 0x04, 0x77, 0x64, 0x82, 0x3b, 0x31,
		0x37, 0x68, 0x04, 0x43, 0x3b, 0xd1, 0x77, 0x60, 0x22, 0x04, 0x76, 0x36, 0x04, 0x87, 0x30, 0xee,
		0xd0, 0xc9, 0x0e, 0x59, 0x2e, 0x52, 0xac, 0x4a, 0x66, 0x90, 0x16, 0x1b, 0x9e, 0x97, 0x3b, 0x7b,
		0x81, 0x8e, 0xce, 0xb5, 0x3a, 0x37, 0x37, 0xae, 0xb7, 0x78, 0x85, 0xd8, 0xbb, 0xea, 0xbd, 0xe3,
		0x0f, 0x2e, 0x38, 0x98, 0xd1, 0x62, 0x6a, 0x91, 0x43, 0x04, 0x71, 0x42, 0x02, 0xf7, 0x43, 0x00,
		0xad, 0x4e, 0x94, 0xa3, 0xad, 0x71, 0x57, 0x27, 0x63, 0x17, 0xdf, 0x78, 0xc5, 0x79, 0xec, 0xc2,
		0x0f, 0xbe, 0x77, 0x4a, 0xd3, 0x3b, 0x6a, 0x0c, 0x2c, 0xd7, 0xe8, 0x78, 0x41, 0xa7, 0x65, 0x10,
		0x0c, 0x9e, 0x34, 0xb0, 0x1e, 0xf7, 0x94, 0x44, 0x33, 0xe9, 0xf5, 0x09, 0x07, 0x47, 0x32, 0xf9,
		0x8c, 0x87, 0x83, 0x0d, 0xcb, 0x7b, 0xcb, 0x94, 0xf5, 0x5e, 0xb5, 0x7b, 0x4a, 0xe2, 0x4d, 0x1c,
		0xc2, 0xc1, 0xb1, 0x26, 0x56, 0x3a, 0xe1, 0xe0, 0xec, 0xed, 0xf7, 0x8f, 0x71, 0x6a, 0x77, 0xbc,
		0x46, 0x99, 0x97, 0xdb, 0x90, 0xa1, 0xd1, 0x77, 0xa3, 0xd7, 0xaa, 0xbf, 0x19, 0xbd, 0x96, 0x51,
		0x8d, 0x8d, 0x18, 0xae, 0x61, 0x1c, 0x4f, 0xc9, 0x69, 0x39, 0x8d, 0xb0, 0xe3, 0x07, 0x12, 0x9b,
		0x64, 0x93, 0xa6, 0x10, 0x46, 0x84, 0x71, 0x2d, 0x84, 0xd1, 0xf8, 0x02, 0xa7, 0xc9, 0x9c, 0x11,
		0xac, 0x66, 0x33, 0x69, 0x91, 0x4b, 0x47, 0xf4, 0x27, 0xa9, 0x46, 0xfc, 0x75, 0x73, 0x25, 0x0a,
		0xda, 0x18, 0x4d, 0x62, 0xf3, 0x68, 0xec, 0x66, 0x96, 0x0a, 0xda, 0x08, 0xdd, 0x2a, 0x24, 0xeb,
		0x86, 0x28, 0x4d, 0x78, 0xf1, 0x89, 0xaf, 0x21, 0x00, 0x7a, 0x42, 0xa0, 0x25, 0x08, 0xea, 0xc2,
		0xa0, 0x2e, 0x10, 0xaa, 0x42, 0x21, 0x23, 0x18, 0x42, 0xc2, 0x21, 0x2e, 0x20, 0xd3, 0x06, 0xaf,
		0xed, 0x86, 0xdb, 0x72, 0xc3, 0x5b, 0x79, 0xb3, 0x9a, 0x4c, 0x84, 0xe9, 0x13, 0x84, 0x07, 0x5d,
		0xe7, 0x6c, 0x9b, 0xb8, 0xc8, 0x68, 0x8a, 0x8d, 0xbe, 0xe8, 0x68, 0x8b, 0x4f, 0x62, 0x22, 0x94,
		0x98, 0x18, 0x25, 0x22, 0x4a, 0xb2, 0xe2, 0x24, 0x2c, 0x52, 0xd3, 0x1e, 0x10, 0x3f, 0x5a, 0x3e,
		0x63, 0xef, 0x6e, 0xd3, 0xf1, 0x42, 0x37, 0xbc, 0x95, 0xb9, 0xc4, 0x72, 0x2e, 0xbf, 0x28, 0x9c,
		0x6d, 0xcd, 0x9d, 0x8e, 0x5f, 0xfd, 0xb5, 0x1d, 0x28, 0x4e, 0xab, 0x49, 0x47, 0x7d, 0xfc, 0xf3,
		0xe3, 0xbb, 0xb3, 0x5f, 0xeb, 0x6f, 0xab, 0x6f, 0x4e, 0xdf, 0x9d, 0x5e, 0xfe, 0x99, 0xd3, 0x3c,
		0x10, 0x1c, 0xa8, 0xd5, 0x09, 0xda, 0x54, 0x39, 0x55, 0xff, 0x4c, 0x87, 0xe5, 0xd4, 0x1e, 0xd6,
		0xdf, 0x59, 0xf6, 0x1e, 0x7a, 0x77, 0xf6, 0xa6, 0xfa, 0xae, 0x40, 0x0f, 0xbd, 0xd0, 0x43, 0x79,
		0x7a, 0x68, 0x7e, 0x0f, 0x55, 0x7f, 0x3f, 0x3e, 0xbd, 0xa4, 0x83, 0x5e, 0x30, 0xa1, 0x7d, 0x7a,
		0xe8, 0x39, 0x13, 0xba, 0xfc, 0x8d, 0xfe, 0x79, 0xc1, 0x82, 0x4a, 0xf4, 0xd0, 0xb3, 0x4b, 0xfd,
		0xe5, 0xc9, 0xfb, 0xfa, 0x71, 0xf5, 0xe4, 0xfd, 0xd9, 0x07, 0x3a, 0x6a, 0x7e, 0x47, 0xbd, 0x39,
		0xfb, 0xf0, 0xf1, 0xec, 0xdd, 0x09, 0x5d, 0x34, 0xbf, 0x8b, 0xde, 0x57, 0x4f, 0xdf, 0xd1, 0x3f,
		0x2f, 0xa8, 0x51, 0x91, 0x1e, 0x7a, 0xa1, 0x87, 0xf6, 0xe8, 0xa1, 0xe7, 0x57, 0xfc, 0xf3, 0x8b,
		0xd3, 0x3f, 0xe8, 0xa3, 0x67, 0xfa, 0xe8, 0x1d, 0x32, 0xf4, 0xd2, 0x24, 0x2b, 0xd3, 0x43, 0xf3,
		0x7b, 0xe8, 0xf7, 0x8f, 0x27, 0x17, 0xf4, 0xcf, 0xfc, 0xfe, 0xf9, 0x70, 0x79, 0x4e, 0xf7, 0xcc,
		0xef, 0x9e, 0x7f, 0x9d, 0x5c, 0x7c, 0x38, 0x41, 0x82, 0x5e, 0x92, 0xa0, 0x8a, 0x62, 0x0f, 0xa9,
		0xb4, 0x5c, 0x5b, 0x9b, 0xe2, 0x8b, 0x82, 0x16, 0x96, 0x0b, 0x9c, 0x6f, 0x8e, 0xaf, 0xba, 0xc9,
		0x3a, 0x7d, 0x02, 0x9b, 0xac, 0x6c, 0xb2, 0xce, 0x1f, 0x4d, 0x36, 0x59, 0xd3, 0x57, 0xa8, 0xa5,
		0xdb, 0x64, 0x0d, 0x6e, 0x83, 0x56, 0xe7, 0xc6, 0x52, 0x92, 0x98, 0xfb, 0x32, 0x53, 0x28, 0x29,
		0xb4, 0x7d, 0xe2, 0xf5, 0xda, 0x83, 0x0e, 0xca, 0xec, 0x42, 0x93, 0xa9, 0x04, 0x23, 0xe1, 0x6a,
		0xbb, 0x77, 0x4b, 0xa0, 0xda, 0x39, 0x8d, 0xe9, 0x19, 0x81, 0xe9, 0xef, 0x76, 0x45, 0xb3, 0x18,
		0x37, 0xd5, 0x8e, 0x72, 0x7c, 0x9c, 0xbc, 0xf9, 0xf4, 0x77, 0x22, 0x37, 0xa8, 0xca, 0x19, 0x96,
		0x44, 0x55, 0x1c, 0xf1, 0x04, 0x33, 0xad, 0xc4, 0xb2, 0x75, 0xbf, 0x5b, 0x84, 0x6c, 0xd5, 0x64,
		0xd8, 0x65, 0x8d, 0xb2, 0x55, 0xf5, 0xee, 0x16, 0x69, 0x39, 0xf6, 0xb5, 0x6c, 0xd2, 0xd7, 0x94,
		0x41, 0xf6, 0x05, 0xdb, 0x3c, 0x1f, 0xaf, 0x77, 0xaf, 0x5e, 0x8d, 0xd7, 0xa4, 0xdd, 0xa9, 0x68,
		0xad, 0x90, 0xc4, 0x8b, 0xbb, 0xb7, 0x5a, 0x6e, 0x2d, 0x12, 0x8f, 0xc4, 0x23, 0xf1, 0x48, 0xbc,
		0xae, 0xc4, 0x4f, 0x45, 0x6b, 0x95, 0x24, 0x3e, 0x56, 0x11, 0xf0, 0x97, 0xf5, 0x5d, 0xe8, 0xba,
		0x94, 0x4d, 0xcd, 0xd3, 0x66, 0x45, 0xc4, 0x1d, 0x71, 0x5f, 0x4b, 0x71, 0xe7, 0xb4, 0x99, 0x12,
		0x39, 0xaa, 0x11, 0xa4, 0xa6, 0xd8, 0xe8, 0x8b, 0x8e, 0xb6, 0xf8, 0x24, 0x26, 0x42, 0x89, 0x89,
		0x51, 0x22, 0xa2, 0x24, 0x2b, 0x4e, 0xc2, 0x22, 0xa5, 0x47, 0xa2, 0x33, 0xf6, 0xce, 0x69, 0xb3,
		0x05, 0x3b, 0x8a, 0xd3, 0x66, 0xb1, 0x3a, 0x8c, 0x74, 0x99, 0xf9, 0x3d, 0xc4, 0x69, 0xb3, 0x85,
		0x7a, 0x88, 0xd3, 0x66, 0xcf, 0xf4, 0x10, 0xa7, 0xcd, 0x16, 0x31, 0x21, 0x4e, 0x9b, 0x3d, 0x6b,
		0x42, 0x9c, 0x36, 0x7b, 0xd1, 0x82, 0x38, 0x6d, 0xf6, 0xfc, 0x52, 0xcf, 0x69, 0xb3, 0x45, 0x3a,
		0x8a, 0xd3, 0x66, 0x2f, 0x76, 0x11, 0xa7, 0xcd, 0x16, 0x50, 0x23, 0x4e, 0x9b, 0xbd, 0xd4, 0x43,
		0x9c, 0x36, 0x7b, 0x61, 0xc5, 0xe7, 0xb4, 0xd9, 0x0b, 0x7d, 0xc4, 0x69, 0xb3, 0x17, 0x27, 0x19,
		0xa7, 0xcd, 0x9e, 0xe9, 0x21, 0x4e, 0x9b, 0x3d, 0xdf, 0x3f, 0x9c, 0x36, 0x7b, 0xb6, 0x7b, 0x38,
		0x6d, 0xb6, 0x90, 0x04, 0x71, 0xda, 0x8c, 0xd3, 0x66, 0x22, 0xd6, 0xc4, 0x69, 0xb3, 0x51, 0xc3,
		0x6c, 0xb2, 0x3e, 0x3b, 0x9a, 0x6c, 0xb2, 0xa6, 0xaf, 0x50, 0x9c, 0x36, 0x9b, 0x2b, 0x33, 0x9c,
		0x36, 0x4b, 0xdb, 0xac, 0x56, 0xe3, 0xb4, 0x99, 0x64, 0x12, 0xe3, 0x66, 0x92, 0x87, 0xcd, 0x62,
		0xdc, 0x44, 0xaa, 0x67, 0x56, 0xe9, 0x5e, 0xcc, 0xf0, 0x2f, 0xe7, 0xf6, 0x7e, 0xf6, 0xd8, 0xa6,
		0x90, 0xfc, 0xc8, 0xdc, 0x5d, 0x3d, 0x6d, 0x4d, 0xf2, 0x0e, 0xeb, 0xbb, 0x46, 0x05, 0xef, 0xb2,
		0x9e, 0x36, 0x7a, 0xff, 0x4e, 0xeb, 0x41, 0x93, 0xa9, 0x0e, 0xae, 0xb0, 0xca, 0x24, 0xaa, 0x2e,
		0x39, 0x91, 0xe4, 0xed, 0x44, 0xf4, 0x64, 0xc9, 0xae, 0xc9, 0x5e, 0xd9, 0x8b, 0xeb, 0x4c, 0x2f,
		0x4d, 0x4b, 0xc0, 0x66, 0x32, 0x7d, 0x7d, 0x9d, 0xd1, 0x51, 0x07, 0x91, 0xa3, 0x0d, 0x62, 0xd7,
		0xd6, 0x15, 0xb9, 0xb6, 0x4e, 0xd1, 0x21, 0xe5, 0xda, 0xba, 0xa5, 0x92, 0x45, 0x43, 0x4c, 0x57,
		0x92, 0xc4, 0xf8, 0x0c, 0xde, 0xcf, 0xd8, 0x1d, 0xca, 0x86, 0x26, 0xa0, 0x37, 0xf4, 0xb9, 0x58,
		0xab, 0x80, 0xfc, 0x60, 0x47, 0x1b, 0xe6, 0xc5, 0x07, 0x2b, 0xc2, 0x40, 0xe5, 0x7c, 0xa7, 0xdd,
		0x09, 0x1d, 0x2b, 0x70, 0xfc, 0x6f, 0x4e, 0x8c, 0x1b, 0x5a, 0xa7, 0xaa, 0xfe, 0xa8, 0x1d, 0x2e,
		0x74, 0xd7, 0x5b, 0xbf, 0xb8, 0xd0, 0x3d, 0xc9, 0x0b, 0xdd, 0x1f, 0x18, 0xb6, 0x39, 0x06, 0x3e,
		0x6c, 0x8e, 0x5b, 0x8c, 0xc1, 0xc1, 0xb5, 0xc0, 0x41, 0xe3, 0x5b, 0x8c, 0x85, 0x2e, 0x38, 0x95,
		0xbd, 0xd8, 0x94, 0x1b, 0x8c, 0xd3, 0x98, 0xa8, 0x6a, 0x13, 0x56, 0x6d, 0xe2, 0xaa, 0x4c, 0xe0,
		0x6c, 0x04, 0xca, 0xc5, 0x6e, 0x30, 0xfe, 0xd2, 0x09, 0x42, 0xf9, 0x82, 0x12, 0xc3, 0x56, 0x29,
		0x16, 0x94, 0x1d, 0x11, 0xd0, 0x12, 0x03, 0x75, 0x51, 0x50, 0x17, 0x07, 0x55, 0x91, 0x90, 0x11,
		0x0b, 0x21, 0xd1, 0x98, 0x7e, 0x53, 0xbd, 0x62, 0x41, 0x82, 0xf3, 0xfe, 0xc1, 0x42, 0x7f, 0x28,
		0xd8, 0xe6, 0xf8, 0xdb, 0xcb, 0x1e, 0x56, 0xd6, 0x3c, 0xee, 0xde, 0xb5, 0xec, 0x66, 0xd3, 0x77,
		0x82, 0x40, 0x33, 0x09, 0xe3, 0x50, 0xa1, 0x6d, 0x95, 0x9e, 0xd6, 0xeb, 0xf1, 0x27, 0x7a, 0xfe,
		0x5b, 0x49, 0xb1, 0xef, 0x67, 0xc6, 0xe0, 0x40, 0xf1, 0x19, 0xe7, 0x76, 0x18, 0x3a, 0xbe, 0xa7,
		0x7a, 0x4a, 0x7f, 0xf8, 0xa0, 0xff, 0x6c, 0x6d, 0x7d, 0xca, 0x5b, 0x87, 0xb5, 0x9f, 0x9f, 0x0a,
		0xd6, 0x61, 0x6d, 0xf4, 0xdb, 0xc2, 0xf0, 0x97, 0xd1, 0xef, 0x8b, 0x9f, 0xf2, 0x56, 0x69, 0xf2,
		0xfb, 0xf2, 0xa7, 0xbc, 0x55, 0xae, 0x6d, 0x5f, 0x5d, 0xbd, 0xda, 0xfe, 0xb1, 0xd7, 0x8f, 0xfe,
		0xc1, 0x7f, 0xe8, 0xa5, 0xd2, 0xd6, 0x54, 0x5a, 0x56, 0x4a, 0x61, 0x4e, 0x66, 0x32, 0x54, 0x98,
		0x0c, 0xf1, 0x26, 0x83, 0x6d, 0x5d, 0x57, 0xad, 0xb7, 0xb5, 0x1f, 0x85, 0x9d, 0x52, 0xff, 0x68,
		0xfb, 0xc7, 0x7e, 0xff, 0xf1, 0x5f, 0xfe, 0x7c, 0xea, 0xc7, 0x0a, 0x3b, 0xfb, 0xfd, 0xa3, 0x39,
		0xff, 0x52, 0xe9, 0x1f, 0x2d, 0xd8, 0x46, 0xb9, 0xbf, 0x35, 0xf3, 0xa3, 0x83, 0xbf, 0x2f, 0xce,
		0xfb, 0x40, 0x69, 0xce, 0x07, 0xf6, 0xe6, 0x7d, 0x60, 0x6f, 0xce, 0x07, 0xe6, 0xbe, 0x52, 0x71,
		0xce, 0x07, 0xca, 0xfd, 0x9f, 0x33, 0x3f, 0xbf, 0xf5, 0xf4, 0x8f, 0x56, 0xfa, 0xdb, 0x3f, 0xe7,
		0xfd, 0xdb, 0x7e, 0xff, 0xe7, 0xd1, 0xf6, 0x12, 0x4a, 0xc3, 0x46, 0xb6, 0xdf, 0x53, 0x58, 0xba,
		0x14, 0x89, 0xa9, 0xd9, 0x69, 0xdb, 0xae, 0x67, 0x0d, 0x77, 0x8d, 0x14, 0x91, 0x49, 0x41, 0xa1,
		0x72, 0xef, 0x1c, 0xef, 0x66, 0xb8, 0xf1, 0xb6, 0x74, 0xd0, 0xf4, 0xde, 0xf5, 0xd4, 0x72, 0xd8,
		0x95, 0x62, 0x01, 0x73, 0x1f, 0x33, 0xac, 0x68, 0x24, 0x57, 0xc3, 0x72, 0xee, 0x73, 0xde, 0xfa,
		0x76, 0x23, 0x74, 0x3b, 0xde, 0xb1, 0x7b, 0xe3, 0x0e, 0xd3, 0xfe, 0xf2, 0xcb, 0x78, 0x76, 0x2a,
		0xf7, 0xde, 0xfe, 0xbe, 0x72, 0x43, 0x5f, 0x2c, 0xef, 0xad, 0xd0, 0xe0, 0x2f, 0xcb, 0x82, 0xa5,
		0xa0, 0xa8, 0xda, 0xac, 0x97, 0xdb, 0xda, 0xda, 0xfa, 0x64, 0x5b, 0xff, 0xab, 0x5a, 0x7f, 0xe5,
		0xad, 0xc3, 0x7a, 0xed, 0xde, 0x1f, 0xae, 0xae, 0xac, 0x7a, 0x6d, 0xfb, 0x47, 0x7e, 0xa7, 0x52,
		0xe8, 0x6f, 0xff, 0x72, 0xf7, 0xf7, 0xb5, 0x81, 0xbf, 0xf3, 0xcf, 0x38, 0x9f, 0xfa, 0x65, 0xfb,
		0xe7, 0xd5, 0xd5, 0xab, 0x5c, 0xd6, 0x49, 0x61, 0x23, 0x5b, 0xef, 0x95, 0x8d, 0xda, 0xcd, 0xe3,
		0x2d, 0xe8, 0x6e, 0xc7, 0x57, 0x08, 0xb8, 0xdf, 0x6f, 0x5c, 0xaa, 0xea, 0xac, 0x73, 0x6d, 0xf7,
		0x5a, 0xc3, 0x70, 0x68, 0xb9, 0x50, 0x22, 0x9a, 0x6f, 0x3e, 0x48, 0x44, 0xf3, 0xa7, 0x0f, 0x20,
		0x9a, 0xbf, 0x04, 0xd1, 0xfc, 0x81, 0x9a, 0x58, 0x5e, 0xaf, 0xfd, 0xd9, 0xf1, 0x15, 0x82, 0xfa,
		0x15, 0xc1, 0x26, 0x2f, 0x6c, 0xef, 0x66, 0x29, 0x82, 0xfa, 0x9a, 0x5e, 0x92, 0x32, 0x22, 0x4f,
		0xd1, 0x58, 0xab, 0xfd, 0x04, 0x80, 0x58, 0xc1, 0x0b, 0x52, 0xf5, 0x7e, 0x92, 0x1a, 0xd2, 0x4a,
		0xb9, 0xbc, 0x57, 0x5e, 0xe2, 0x61, 0x05, 0x5f, 0xd5, 0xf1, 0x35, 0x18, 0xa2, 0xc6, 0x74, 0x07,
		0x40, 0xfe, 0x0e, 0x92, 0x87, 0xed, 0x83, 0x9b, 0xe0, 0x26, 0xb8, 0xb9, 0x56, 0xb8, 0xa9, 0x92,
		0xe8, 0x40, 0x0a, 0x89, 0x7e, 0x22, 0x83, 0xea, 0x8e, 0x88, 0x7a, 0xfc, 0x6e, 0xd9, 0x13, 0x16,
		0xd6, 0x75, 0x97, 0x4f, 0x39, 0x21, 0x61, 0x25, 0x8c, 0x9a, 0xc4, 0x83, 0x95, 0x48, 0x3c, 0x20,
		0x3c, 0xaf, 0xd9, 0xc2, 0xea, 0xd7, 0x35, 0x79, 0x78, 0x4a, 0xf4, 0xe1, 0x1f, 0xe5, 0x6e, 0xe9,
		0x97, 0x3d, 0xac, 0x7b, 0x31, 0x7c, 0xc9, 0x8f, 0xa3, 0x57, 0x7e, 0xf0, 0x27, 0x91, 0xdb, 0xf9,
		0x0d, 0xea, 0x9c, 0x18, 0x9c, 0x99, 0x13, 0x39, 0x6d, 0x21, 0x99, 0x6d, 0x2d, 0xe4, 0x20, 0x73,
		0x94, 0x2a, 0x5b, 0x8e, 0x2f, 0x47, 0xa9, 0x52, 0x70, 0x68, 0x15, 0xae, 0x4c, 0x96, 0xbc, 0x2a,
		0xf9, 0x89, 0x2b, 0x92, 0x87, 0x02, 0xb2, 0x84, 0x32, 0x7a, 0x57, 0x5a, 0x49, 0x4c, 0x4b, 0x25,
		0xaa, 0x35, 0x6d, 0x72, 0x36, 0x15, 0x41, 0x45, 0x50, 0xc5, 0xce, 0xa6, 0x4e, 0x8b, 0xef, 0xc9,
		0x6f, 0x36, 0xc8, 0x95, 0xf5, 0xdb, 0xd4, 0xbc, 0xf3, 0x9c, 0x6d, 0x06, 0xd1, 0x88, 0x0e, 0xdb,
		0x0c, 0xea, 0x61, 0x81, 0xcc, 0xde, 0x79, 0x2e, 0x54, 0xc9, 0x62, 0xee, 0x34, 0x10, 0x73, 0xa3,
		0x15, 0x85, 0x45, 0x4d, 0x60, 0x34, 0x85, 0x46, 0x5f, 0x70, 0xb4, 0x85, 0x27, 0x31, 0x01, 0x4a,
		0x4c, 0x88, 0x12, 0x11, 0x24, 0xf9, 0x78, 0xe5, 0xa6, 0x42, 0x29, 0x7e, 0x69, 0xa1, 0x9a, 0x36,
		0x3c, 0x29, 0x82, 0xad, 0x7f, 0x4f, 0xf8, 0xf4, 0x49, 0x3b, 0x4b, 0x99, 0xc4, 0xa4, 0x25, 0x66,
		0x49, 0x88, 0x5a, 0x72, 0xe2, 0x96, 0x94, 0xc8, 0x25, 0x2e, 0x76, 0x89, 0x8b, 0x5e, 0xa2, 0xe2,
		0xa7, 0x23, 0x82, 0x4a, 0x62, 0x28, 0x1f, 0x53, 0x7b, 0x71, 0xbe, 0xb8, 0x4d, 0xc7, 0x0b, 0xdd,
		0xf0, 0x56, 0x26, 0xde, 0xf6, 0x22, 0x87, 0x95, 0x15, 0x9f, 0x71, 0x3a, 0xfe, 0x2a, 0xaf, 0xed,
		0x20, 0x81, 0xe9, 0x79, 0xef, 0x22, 0xe4, 0x77, 0x67, 0xbf, 0xd6, 0xdf, 0x56, 0xdf, 0x9c, 0xbe,
		0x3b, 0xbd, 0xfc, 0x33, 0x97, 0xc4, 0xf9, 0xba, 0x40, 0xfd, 0xe4, 0xfd, 0xa6, 0xfa, 0x9d, 0x6e,
		0x73, 0x3a, 0x32, 0xa7, 0xfe, 0xd0, 0xfe, 0xce, 0xaa, 0xf5, 0xdc, 0xf0, 0x56, 0xbc, 0x02, 0x3d,
		0x17, 0xb3, 0xe7, 0xf2, 0xf4, 0x5c, 0xf4, 0x9e, 0xab, 0xfe, 0x7e, 0x7c, 0x7a, 0x49, 0xc7, 0xc5,
		0x34, 0xb9, 0x7d, 0x7a, 0x2e, 0x8e, 0xc9, 0x5d, 0xfe, 0x46, 0xbf, 0xc5, 0xb4, 0xb8, 0x12, 0x3d,
		0x17, 0x0b, 0x49, 0x2e, 0x4f, 0xde, 0xd7, 0x8f, 0xab, 0x27, 0xef, 0xcf, 0x3e, 0xd0, 0x81, 0xd1,
		0x3b, 0xf0, 0xcd, 0xd9, 0x87, 0x8f, 0x67, 0xef, 0x4e, 0xe8, 0xba, 0xe8, 0x5d, 0xf7, 0xbe, 0x7a,
		0xfa, 0x8e, 0x7e, 0x8b, 0xa9, 0x76, 0x45, 0x7a, 0x2e, 0x66, 0xcf, 0xed, 0xd1, 0x73, 0xf1, 0xc8,
		0xe4, 0xfc, 0xe2, 0xf4, 0x0f, 0xfa, 0x2e, 0x46, 0xdf, 0xbd, 0x43, 0xe6, 0xe2, 0x4e, 0xd6, 0x32,
		0x3d, 0x17, 0xbd, 0xe7, 0x7e, 0xff, 0x78, 0x72, 0x41, 0xbf, 0x45, 0xef, 0xb7, 0x0f, 0x97, 0xe7,
		0x74, 0x5b, 0xf4, 0x6e, 0xfb, 0xd7, 0xc9, 0xc5, 0x87, 0x13, 0x24, 0x2e, 0xae, 0xc4, 0x55, 0x12,
		0xe8, 0x39, 0xd5, 0x27, 0xd4, 0xd6, 0xbe, 0x2a, 0x9d, 0x46, 0xd1, 0x90, 0xe9, 0xc5, 0xd6, 0xea,
		0x9b, 0xfb, 0x8a, 0x37, 0xf8, 0x6f, 0xb2, 0xb9, 0x1f, 0x6d, 0x2c, 0xd8, 0xdc, 0x8f, 0xfd, 0x40,
		0x36, 0xf7, 0xb3, 0xb2, 0xa2, 0x26, 0xb8, 0xb9, 0x1f, 0xdc, 0x06, 0xad, 0xce, 0x8d, 0xa5, 0x2c,
		0x61, 0xf7, 0x65, 0xac, 0x50, 0x52, 0x7c, 0xc6, 0x89, 0xd7, 0x6b, 0x0f, 0x3a, 0x6e, 0x69, 0x16,
		0xbe, 0x4c, 0x27, 0xde, 0x09, 0x1f, 0xbb, 0x9d, 0x5d, 0xa2, 0x93, 0x3d, 0x86, 0x3b, 0x3d, 0x80,
		0x34, 0xfd, 0xdd, 0xae, 0x4a, 0x4a, 0xf1, 0x66, 0x92, 0x27, 0x75, 0xa7, 0x37, 0xcd, 0x4f, 0x7f,
		0x27, 0x72, 0x78, 0x57, 0xcf, 0x50, 0x05, 0x8d, 0x54, 0x2f, 0x81, 0x53, 0x3b, 0x71, 0x53, 0x89,
		0xe9, 0xc8, 0x3a, 0x4f, 0x85, 0xd9, 0xc8, 0x3a, 0x5f, 0xc1, 0xc5, 0x4f, 0x8d, 0xc1, 0x14, 0x0e,
		0x31, 0xcf, 0x65, 0xad, 0x7d, 0x9d, 0xca, 0x3a, 0x8f, 0x0e, 0x39, 0x4f, 0x45, 0x72, 0x0d, 0x96,
		0x1c, 0xb5, 0xb0, 0x82, 0x76, 0x38, 0x81, 0x25, 0x87, 0x25, 0x87, 0x25, 0x87, 0x25, 0x67, 0x35,
		0x96, 0x9c, 0xa9, 0x48, 0xae, 0xc3, 0x92, 0x13, 0xda, 0xa1, 0xa3, 0xb8, 0xde, 0x0c, 0x9b, 0x5f,
		0xb2, 0x53, 0xb5, 0x45, 0x16, 0x1b, 0x16, 0x1b, 0x16, 0x1b, 0x83, 0x1e, 0xe0, 0x54, 0x6d, 0x4a,
		0xc4, 0xac, 0x4e, 0xce, 0x49, 0x88, 0x5a, 0x72, 0xe2, 0x96, 0x94, 0xc8, 0x25, 0x2e, 0x76, 0x89,
		0x8b, 0x5e, 0xa2, 0xe2, 0xa7, 0x23, 0x82, 0x4a, 0x62, 0xa8, 0x4f, 0xe0, 0x33, 0xf3, 0x85, 0x53,
		0xb5, 0x86, 0x1d, 0xc8, 0xa9, 0x5a, 0xd1, 0x8e, 0x24, 0xfd, 0x2c, 0x7a, 0xcf, 0x71, 0xaa, 0xd6,
		0xa8, 0xe7, 0x38, 0x55, 0x1b, 0xa3, 0xe7, 0x38, 0x55, 0x6b, 0x62, 0x72, 0x9c, 0xaa, 0x8d, 0x65,
		0x72, 0x9c, 0xaa, 0x8d, 0x6d, 0x71, 0x9c, 0xaa, 0x8d, 0x87, 0x24, 0x9c, 0xaa, 0x35, 0xe9, 0x40,
		0x4e, 0xd5, 0xc6, 0xee, 0x3a, 0x4e, 0xd5, 0x1a, 0xa8, 0x1d, 0xa7, 0x6a, 0xe3, 0xf6, 0x1c, 0xa7,
		0x6a, 0x63, 0x92, 0x09, 0xa7, 0x6a, 0x63, 0xf6, 0x1d, 0xa7, 0x6a, 0x63, 0x4f, 0x56, 0x4e, 0xd5,
		0xc6, 0xe8, 0x39, 0x4e, 0xd5, 0xc6, 0xeb, 0x37, 0x4e, 0xd5, 0xc6, 0xea, 0x36, 0x4e, 0xd5, 0x1a,
		0x49, 0x1c, 0xa7, 0x6a, 0x13, 0x7e, 0x6f, 0x4e, 0xd5, 0x3e, 0xb4, 0x42, 0x4e, 0xd5, 0x3e, 0xff,
		0x00, 0x36, 0xf7, 0x63, 0x8d, 0x3a, 0x9b, 0xfb, 0xd9, 0x57, 0x42, 0x4e, 0xd5, 0x46, 0x96, 0x31,
		0x4e, 0xd5, 0xaa, 0xb5, 0xc8, 0xa9, 0xda, 0xa8, 0xa7, 0x6a, 0x35, 0x32, 0x8a, 0x37, 0x53, 0x3e,
		0x54, 0xfb, 0x71, 0xf8, 0x9d, 0xb2, 0x9a, 0x6d, 0x9e, 0xa9, 0x8b, 0xa5, 0xfe, 0xe5, 0xdc, 0xde,
		0xcf, 0xce, 0xdc, 0x14, 0x96, 0xc1, 0xdc, 0x3b, 0x37, 0x08, 0xab, 0x61, 0x28, 0x7c, 0x7b, 0xd5,
		0x7b, 0xd7, 0x3b, 0x69, 0x39, 0x83, 0x95, 0x33, 0xc8, 0x1d, 0x6d, 0x7a, 0xbd, 0x56, 0x4b, 0x30,
		0x85, 0xff, 0xbd, 0xfd, 0x5d, 0xaf, 0xf1, 0x33, 0xbf, 0xe9, 0xf8, 0x4e, 0xf3, 0xf5, 0xed, 0xb8,
		0xe9, 0x4c, 0x19, 0x83, 0x92, 0xda, 0xa5, 0xaf, 0x72, 0x39, 0xd1, 0x13, 0x1e, 0x69, 0xe9, 0x5a,
		0x8e, 0xfb, 0xe5, 0x97, 0xff, 0x7e, 0x79, 0xa9, 0x9b, 0x75, 0xd3, 0xb1, 0xc5, 0xa5, 0xbc, 0x1e,
		0x59, 0xe4, 0x48, 0x96, 0xe8, 0x11, 0x2c, 0xf1, 0x6b, 0x91, 0x8b, 0x5c, 0x8b, 0x9c, 0x81, 0xc0,
		0x02, 0xd7, 0x22, 0x2f, 0xfe, 0x8d, 0xc4, 0xae, 0x45, 0x1e, 0xde, 0xda, 0x2e, 0x7e, 0x25, 0xf2,
		0xb0, 0x55, 0xd9, 0xeb, 0x90, 0xf3, 0x5c, 0x87, 0x9c, 0xe1, 0xe8, 0x23, 0xd7, 0x21, 0x2f, 0x91,
		0xd7, 0x2a, 0x1e, 0x1d, 0xd4, 0x98, 0xf7, 0x0f, 0x16, 0xfa, 0x43, 0xc1, 0x36, 0xc7, 0xdf, 0x5e,
		0xf6, 0x70, 0x8b, 0xe2, 0x59, 0x6a, 0xb7, 0x6b, 0xd9, 0xcd, 0xa6, 0xef, 0x04, 0x81, 0x66, 0x2d,
		0x83, 0x43, 0x85, 0xb6, 0x55, 0x7a, 0x5a, 0xaf, 0xc7, 0x9f, 0xe8, 0xf9, 0x6f, 0x25, 0xc5, 0xbe,
		0x9f, 0x19, 0x83, 0x03, 0xc5, 0x67, 0x9c, 0xdb, 0x61, 0xe8, 0xf8, 0x9e, 0xfa, 0xa9, 0xae, 0xdc,
		0x7f, 0xb6, 0xb6, 0x3e, 0xe5, 0xad, 0xc3, 0xda, 0xcf, 0x4f, 0x05, 0xeb, 0xb0, 0x36, 0xfa, 0x6d,
		0x61, 0xf8, 0xcb, 0xe8, 0xf7, 0xc5, 0x4f, 0x79, 0xab, 0x34, 0xf9, 0x7d, 0xf9, 0x53, 0xde, 0x2a,
		0xd7, 0xb6, 0xaf, 0xae, 0x5e, 0x6d, 0xff, 0xd8, 0xeb, 0x47, 0xff, 0xe0, 0x3f, 0xf4, 0x36, 0x7c,
		0x6a, 0xcb, 0xb4, 0xe1, 0x93, 0xcc, 0x64, 0xa8, 0x30, 0x19, 0xe2, 0x4d, 0x06, 0xdb, 0xba, 0xae,
		0x5a, 0x6f, 0x6b, 0x3f, 0x0a, 0x3b, 0xa5, 0xfe, 0xd1, 0xf6, 0x8f, 0xfd, 0xfe, 0xe3, 0xbf, 0xfc,
		0xf9, 0xd4, 0x8f, 0x15, 0x76, 0xf6, 0xfb, 0x47, 0x73, 0xfe, 0xa5, 0xd2, 0x3f, 0x5a, 0xb0, 0x8d,
		0x72, 0x7f, 0x6b, 0xe6, 0x47, 0x07, 0x7f, 0x5f, 0x9c, 0xf7, 0x81, 0xd2, 0x9c, 0x0f, 0xec, 0xcd,
		0xfb, 0xc0, 0xde, 0x9c, 0x0f, 0xcc, 0x7d, 0xa5, 0xe2, 0x9c, 0x0f, 0x94, 0xfb, 0x3f, 0x67, 0x7e,
		0x7e, 0xeb, 0xe9, 0x1f, 0xad, 0xf4, 0xb7, 0x7f, 0xce, 0xfb, 0xb7, 0xfd, 0xfe, 0xcf, 0xa3, 0xed,
		0x25, 0x94, 0x86, 0x8d, 0x6c, 0xbf, 0xa7, 0xb0, 0x74, 0x29, 0x12, 0x53, 0xb3, 0xd3, 0xb6, 0x5d,
		0xcf, 0x1a, 0x06, 0xf6, 0x14, 0x91, 0x49, 0x41, 0xa1, 0x72, 0xef, 0x1c, 0xef, 0x66, 0x18, 0x4a,
		0x5d, 0x3a, 0x68, 0x7a, 0xef, 0x7a, 0x09, 0xe4, 0xb4, 0xa8, 0x66, 0x32, 0x4d, 0x1f, 0x33, 0x3c,
		0x01, 0x2f, 0x5f, 0xd3, 0x69, 0xe6, 0x39, 0x6f, 0x7d, 0xbb, 0x11, 0xba, 0x1d, 0xef, 0xd8, 0xbd,
		0x71, 0x87, 0xdb, 0x65, 0x79, 0xbd, 0xfc, 0x15, 0xc5, 0xe5, 0xf4, 0xbd, 0xfd, 0x7d, 0xe5, 0x86,
		0xbe, 0x58, 0xde, 0x5b, 0xa1, 0xc1, 0x5f, 0x96, 0x05, 0x4b, 0xa7, 0xa0, 0x9e, 0x2a, 0xeb, 0xe5,
		0xb6, 0xb6, 0xb6, 0x3e, 0xd9, 0xd6, 0xff, 0xaa, 0xd6, 0x5f, 0x79, 0xeb, 0xb0, 0x5e, 0xbb, 0xf7,
		0x87, 0xab, 0x2b, 0xab, 0x5e, 0xdb, 0xfe, 0x91, 0xdf, 0xa9, 0x14, 0xfa, 0xdb, 0xbf, 0xdc, 0xfd,
		0x7d, 0x6d, 0xe0, 0xef, 0xfc, 0x33, 0xce, 0xa7, 0x7e, 0xd9, 0xfe, 0x79, 0x75, 0xf5, 0x2a, 0x97,
		0x75, 0x52, 0xd8, 0xc8, 0xd6, 0x7b, 0x09, 0xec, 0xd9, 0x0a, 0x6c, 0xc3, 0x8c, 0x37, 0x32, 0xbb,
		0x1d, 0x5f, 0x21, 0xe0, 0x7e, 0xbf, 0x71, 0xa1, 0x28, 0xe1, 0xb1, 0x73, 0x6d, 0xf7, 0x5a, 0xc3,
		0x70, 0x68, 0xb9, 0x50, 0x22, 0x9a, 0x6f, 0x3e, 0x48, 0x44, 0xf3, 0xa7, 0x0f, 0x20, 0x9a, 0xbf,
		0x04, 0xd1, 0xfc, 0x81, 0x9a, 0x58, 0x5e, 0xaf, 0xfd, 0xd9, 0xf1, 0x15, 0x82, 0xfa, 0x15, 0xc1,
		0x26, 0x2f, 0x6c, 0xef, 0x66, 0x29, 0x82, 0xfa, 0x9a, 0x5e, 0x92, 0xf6, 0x39, 0x8f, 0x09, 0x1a,
		0x6b, 0xb5, 0x9f, 0x00, 0x10, 0x6b, 0x9c, 0x13, 0xd2, 0xf4, 0x7e, 0x92, 0x1a, 0xd2, 0x4a, 0xb9,
		0xbc, 0x57, 0x5e, 0xe2, 0x61, 0x05, 0x5f, 0xd5, 0xf1, 0x35, 0x18, 0xa2, 0xc6, 0x74, 0x07, 0x40,
		0x9c, 0x60, 0x1f, 0xb5, 0x0f, 0x6e, 0x82, 0x9b, 0xe0, 0xe6, 0x5a, 0xe1, 0xa6, 0x4a, 0xa2, 0x03,
		0x29, 0x24, 0xfa, 0x89, 0x0c, 0xaa, 0x3b, 0x22, 0xea, 0xf1, 0xbb, 0x65, 0x4f, 0x58, 0x58, 0xd7,
		0x5d, 0x3e, 0xe5, 0x84, 0x84, 0x95, 0x30, 0x6a, 0x12, 0x0f, 0x56, 0x22, 0xf1, 0x80, 0xf0, 0xbc,
		0x66, 0x0b, 0xeb, 0x7e, 0xa4, 0x4a, 0xe8, 0x08, 0x73, 0x72, 0xc7, 0xa9, 0xcc, 0xcf, 0x27, 0x1b,
		0x1c, 0xa5, 0xda, 0x48, 0xd0, 0xc4, 0x26, 0xe7, 0x8b, 0x0d, 0xd2, 0xaa, 0x65, 0x8e, 0x10, 0x8b,
		0x1e, 0x19, 0x16, 0x3d, 0x22, 0x2c, 0x73, 0x24, 0x38, 0xee, 0xf8, 0x08, 0x4d, 0xfd, 0x84, 0xa7,
		0x7c, 0xce, 0xe8, 0x38, 0x60, 0x22, 0x93, 0x3c, 0xde, 0xf4, 0x8e, 0x3e, 0x39, 0xa3, 0x7d, 0x22,
		0xa2, 0x99, 0x98, 0x9a, 0x87, 0xba, 0x59, 0xc4, 0x30, 0x04, 0x45, 0x03, 0x88, 0x36, 0xe6, 0x8b,
		0x8f, 0xdc, 0x62, 0x3f, 0xb9, 0xe0, 0xd8, 0xc6, 0x1d, 0x53, 0xf9, 0xb1, 0x8c, 0x30, 0x78, 0xa2,
		0x83, 0xb6, 0xd8, 0x30, 0xbd, 0xdc, 0xe9, 0x0b, 0x74, 0x78, 0xae, 0xed, 0xb4, 0x3b, 0xfe, 0xe2,
		0x15, 0xd8, 0xa6, 0xbe, 0xe1, 0xf8, 0x73, 0x0b, 0x0e, 0x69, 0xb4, 0xe3, 0xc4, 0x91, 0x83, 0xc0,
		0x71, 0x82, 0xbc, 0xf7, 0x83, 0xb8, 0xc1, 0x6d, 0x94, 0x89, 0x1a, 0x37, 0x48, 0x6b, 0x1c, 0x84,
		0x35, 0x0e, 0xb2, 0x3e, 0x0e, 0xa2, 0x0e, 0xbe, 0x77, 0x4a, 0x93, 0x3c, 0xea, 0xf1, 0xda, 0x5c,
		0x63, 0x62, 0x13, 0x11, 0x3b, 0x7d, 0x32, 0xcc, 0xe3, 0xcf, 0x47, 0xec, 0xb0, 0x78, 0xe7, 0xe0,
		0x63, 0xef, 0x62, 0x98, 0xec, 0x56, 0xc4, 0x37, 0x68, 0xa9, 0xdd, 0x07, 0xb1, 0x5d, 0x06, 0xb1,
		0xdd, 0x04, 0x23, 0x83, 0x5f, 0x37, 0x82, 0x19, 0x49, 0xfa, 0x6e, 0xac, 0x89, 0x22, 0xb7, 0x06,
		0xbe, 0x1f, 0xbe, 0x45, 0x7d, 0x3c, 0x83, 0xb4, 0x80, 0x25, 0xd2, 0xca, 0x1e, 0xa7, 0x3c, 0x87,
		0x51, 0x39, 0x0e, 0x63, 0xd9, 0x29, 0x22, 0x3b, 0xc8, 0x8e, 0xe8, 0xfa, 0x3b, 0xfd, 0x60, 0xf7,
		0xcb, 0x6d, 0xe0, 0x36, 0xec, 0x56, 0xfc, 0xe1, 0x9a, 0x26, 0xbf, 0x4d, 0x5a, 0x8a, 0x1b, 0xba,
		0x31, 0xca, 0x3c, 0x30, 0xce, 0x34, 0x90, 0xc8, 0x2c, 0x30, 0x9f, 0x3c, 0x52, 0x93, 0x48, 0x7c,
		0x32, 0x89, 0x4f, 0x2a, 0xd1, 0xc9, 0x95, 0x4e, 0xb0, 0xd1, 0x78, 0x67, 0x7f, 0x6a, 0x2f, 0x3d,
		0xd7, 0x0b, 0x2b, 0x26, 0x29, 0xe3, 0x93, 0xd9, 0x63, 0xb0, 0xf7, 0x26, 0x94, 0x13, 0x2a, 0x10,
		0xcf, 0x97, 0xcc, 0xf9, 0x94, 0x4e, 0x68, 0x12, 0xce, 0xe9, 0xd4, 0x48, 0xf6, 0x93, 0x48, 0x5e,
		0x93, 0xcc, 0xd1, 0xd4, 0x1a, 0x82, 0xc2, 0x41, 0xa9, 0x54, 0xd9, 0x2f, 0x95, 0xf2, 0xfb, 0x7b,
		0xfb, 0xf9, 0xc3, 0x72, 0xb9, 0x50, 0x91, 0xba, 0xca, 0x58, 0x65, 0x54, 0x52, 0xda, 0x7f, 0xa9,
		0x25, 0x15, 0x18, 0x8e, 0x41, 0x8a, 0xbe, 0x33, 0x8c, 0xab, 0x36, 0xcd, 0xe1, 0x63, 0xda, 0x12,
		0xf0, 0x01, 0x7c, 0x00, 0x1f, 0xc0, 0x07, 0xf0, 0x01, 0x7c, 0xfc, 0xff, 0xd9, 0x3b, 0xbf, 0xe6,
		0xb4, 0x8d, 0xee, 0x8f, 0xdf, 0xfb, 0x55, 0x78, 0x34, 0xbd, 0x30, 0x6d, 0x64, 0x03, 0x06, 0x1c,
		0xe7, 0x26, 0xe3, 0x4c, 0xdd, 0xfe, 0x7e, 0xd3, 0xa4, 0xcd, 0x34, 0x79, 0x3a, 0xf3, 0xd4, 0x50,
		0x8f, 0x6c, 0x16, 0x47, 0x13, 0x21, 0x31, 0xd2, 0xca, 0x53, 0x27, 0xe6, 0xbd, 0x3f, 0x23, 0x21,
		0xb0, 0x30, 0x08, 0x4b, 0xbb, 0x67, 0xa5, 0x15, 0xfa, 0xe6, 0xc6, 0xc4, 0x46, 0x8b, 0xd8, 0x3f,
		0x67, 0x3f, 0xe7, 0xec, 0xd1, 0xf7, 0x00, 0x3e, 0x1a, 0x03, 0x1f, 0xcd, 0x8a, 0xe9, 0x8a, 0x66,
		0x20, 0x91, 0x86, 0x74, 0x05, 0xb2, 0x8a, 0x9a, 0x7b, 0x04, 0x5d, 0xe8, 0x7c, 0x95, 0x7a, 0xa8,
		0xca, 0x3c, 0x80, 0x76, 0xf9, 0xac, 0xf8, 0xe9, 0x73, 0x74, 0x11, 0x8e, 0x9e, 0x4b, 0x04, 0x6b,
		0x1c, 0x3d, 0xe3, 0xe8, 0x59, 0xa5, 0x27, 0x89, 0x33, 0xa0, 0x0a, 0x30, 0x45, 0xf8, 0x0c, 0x88,
		0xb9, 0xd6, 0x8d, 0xc3, 0x4c, 0x97, 0xcf, 0x4c, 0x2b, 0x8c, 0xf7, 0x3a, 0xc9, 0x68, 0xcc, 0xf3,
		0x06, 0x05, 0xbb, 0x3c, 0x25, 0xa8, 0x32, 0xb1, 0x9c, 0x80, 0x21, 0xb8, 0x83, 0xe0, 0x0e, 0x82,
		0x3b, 0xc5, 0xe6, 0xcb, 0x8d, 0xe7, 0x39, 0xcc, 0x72, 0x09, 0xa2, 0x3b, 0x9d, 0x8e, 0xc6, 0x91,
		0xe4, 0x85, 0xc5, 0x19, 0x53, 0x99, 0xae, 0x31, 0x4c, 0x16, 0x4c, 0x16, 0x4c, 0x16, 0x4c, 0x96,
		0x42, 0x93, 0x15, 0xd1, 0x11, 0x91, 0x46, 0x48, 0xda, 0x91, 0x36, 0x49, 0x74, 0x41, 0x60, 0x80,
		0x60, 0x80, 0x1a, 0x6b, 0x80, 0x48, 0x74, 0x35, 0x28, 0x74, 0x34, 0x68, 0x74, 0x33, 0x08, 0x6b,
		0xac, 0x11, 0xeb, 0x62, 0x50, 0x4a, 0x06, 0x90, 0x4b, 0x04, 0xd4, 0x4e, 0xe7, 0x62, 0x54, 0xe5,
		0x43, 0xdd, 0xb4, 0x93, 0x6c, 0xd0, 0xb4, 0x49, 0x06, 0xdd, 0x89, 0x5a, 0xea, 0x4e, 0x8c, 0x70,
		0xae, 0x2a, 0x11, 0xb0, 0xd4, 0xe7, 0x5c, 0xd5, 0xe5, 0xb3, 0xaa, 0x1f, 0x94, 0xf9, 0x9d, 0xcf,
		0x34, 0x7a, 0x4a, 0x26, 0x72, 0x24, 0xbe, 0xb2, 0x87, 0x40, 0xfc, 0x94, 0x64, 0xd5, 0x02, 0xce,
		0x49, 0xd4, 0x39, 0x16, 0x38, 0x27, 0x29, 0xf3, 0x9c, 0x24, 0x99, 0xd2, 0x34, 0x6e, 0x7a, 0xd4,
		0x90, 0x9c, 0x6f, 0xde, 0x81, 0x6f, 0x0e, 0xdf, 0xbc, 0x1e, 0xbe, 0xb9, 0x6c, 0xf5, 0x65, 0xd1,
		0x33, 0xfb, 0xcc, 0x69, 0x27, 0xbc, 0xd9, 0x13, 0x2e, 0x44, 0xb2, 0x05, 0x49, 0xb9, 0x30, 0xe9,
		0x17, 0x28, 0xf5, 0x42, 0x55, 0xb6, 0x60, 0x95, 0x2d, 0x5c, 0x25, 0x0b, 0x58, 0xde, 0x89, 0x38,
		0xd4, 0xa9, 0xac, 0xfa, 0x57, 0xf6, 0x60, 0xda, 0x63, 0x7a, 0x95, 0xec, 0xa4, 0x5d, 0xa8, 0x63,
		0xeb, 0x63, 0x08, 0x54, 0x19, 0x04, 0xe5, 0x86, 0x41, 0xb9, 0x81, 0x50, 0x6a, 0x28, 0x68, 0x0c,
		0x06, 0x91, 0xe1, 0x58, 0x7d, 0x53, 0x75, 0xea, 0xd8, 0xa1, 0xed, 0xf2, 0xce, 0x00, 0x75, 0x58,
		0x68, 0x6e, 0x14, 0x75, 0x58, 0xb2, 0xdb, 0x47, 0x1d, 0x96, 0xca, 0x86, 0x14, 0x75, 0x58, 0x94,
		0xb4, 0xb6, 0x4f, 0x75, 0x58, 0x22, 0x02, 0xe4, 0x94, 0xbb, 0xcc, 0x1a, 0x5b, 0xc6, 0x2d, 0x83,
		0x2e, 0x41, 0x97, 0xa0, 0xcb, 0x46, 0xd1, 0xa5, 0x3d, 0x66, 0x2e, 0xb7, 0xf9, 0x83, 0xcf, 0x26,
		0x2a, 0x8a, 0xaf, 0x10, 0xee, 0x69, 0xc6, 0xff, 0x27, 0xb7, 0xfa, 0xce, 0x0a, 0x14, 0x2c, 0x87,
		0x65, 0x87, 0xfc, 0xfe, 0xf9, 0xe3, 0xf5, 0xc5, 0x7f, 0x3e, 0xff, 0xdf, 0xf5, 0xe7, 0xff, 0x7e,
		0xbc, 0xa4, 0x5e, 0x12, 0xf1, 0x76, 0x1f, 0x28, 0xa9, 0xfe, 0xa0, 0x88, 0x7f, 0x36, 0xba, 0xe5,
		0xc3, 0xcf, 0x7d, 0x43, 0x73, 0x7e, 0x18, 0xe9, 0x66, 0x05, 0xb4, 0xe1, 0x87, 0xfb, 0x04, 0x37,
		0x15, 0x00, 0xc4, 0xa2, 0x69, 0x10, 0x04, 0x08, 0x02, 0x04, 0xd1, 0x28, 0x82, 0x08, 0xb8, 0x5f,
		0x4c, 0x94, 0x3c, 0x37, 0x3c, 0xbc, 0x46, 0x95, 0x19, 0xad, 0xab, 0xcc, 0xb8, 0x7c, 0x76, 0xb2,
		0x4c, 0x8f, 0x59, 0xbe, 0x38, 0x21, 0x39, 0x91, 0x3c, 0x24, 0x4d, 0x47, 0xfa, 0x9d, 0xcf, 0x7e,
		0x63, 0x0f, 0x41, 0xf2, 0x53, 0x28, 0x3b, 0x89, 0x6e, 0x4a, 0x48, 0x4c, 0x07, 0xaa, 0xc3, 0x25,
		0xda, 0x43, 0x25, 0xa2, 0xcd, 0x1a, 0xa7, 0xc7, 0x7a, 0x6d, 0xc2, 0x38, 0x3d, 0xae, 0x60, 0x73,
		0x5d, 0xcd, 0x37, 0x87, 0x59, 0x13, 0x1a, 0x97, 0x7c, 0xb5, 0x9b, 0x9e, 0xd1, 0xa4, 0x8d, 0xc7,
		0xbb, 0xc6, 0xf1, 0x71, 0x62, 0xe7, 0x4f, 0x12, 0x13, 0x52, 0x43, 0x63, 0x2a, 0x26, 0xa0, 0xbe,
		0x03, 0x83, 0xe4, 0xab, 0xa9, 0x91, 0x27, 0xe2, 0x74, 0x61, 0x4a, 0x61, 0x4a, 0x6b, 0x65, 0x4a,
		0x91, 0x88, 0x83, 0x40, 0x07, 0x02, 0x1d, 0x08, 0x74, 0x68, 0x18, 0xe8, 0x40, 0x22, 0x0e, 0xe5,
		0x8c, 0x44, 0x22, 0x4e, 0x76, 0xfb, 0x48, 0xc4, 0xa9, 0x6c, 0x48, 0x91, 0x88, 0xa3, 0xa4, 0x35,
		0x24, 0xe2, 0xe4, 0x65, 0x4b, 0x24, 0xe2, 0x80, 0x2e, 0x41, 0x97, 0xcd, 0xa3, 0x4b, 0x24, 0xe2,
		0x3c, 0xeb, 0x10, 0x24, 0xe2, 0xec, 0xee, 0x16, 0x24, 0xe2, 0xd4, 0x98, 0x1f, 0x90, 0x88, 0x03,
		0x82, 0x00, 0x41, 0x80, 0x20, 0x28, 0xe7, 0x2b, 0x12, 0x71, 0x94, 0x8e, 0x60, 0xdd, 0x12, 0x71,
		0x28, 0x0e, 0x24, 0x0f, 0x55, 0xe6, 0xe1, 0x08, 0x14, 0x5e, 0xa1, 0x9b, 0x10, 0xe5, 0xea, 0x46,
		0xfc, 0x16, 0xab, 0xad, 0xc8, 0x9d, 0x1d, 0x19, 0xef, 0xed, 0x80, 0x5f, 0x70, 0x2e, 0xa9, 0x40,
		0xf1, 0xc1, 0x76, 0x2f, 0x1d, 0x16, 0xd9, 0xda, 0x08, 0x7f, 0xdd, 0xd0, 0x71, 0x24, 0xce, 0xd0,
		0x3f, 0x58, 0xff, 0xd2, 0x35, 0xf6, 0x87, 0x3f, 0x66, 0x3e, 0x1b, 0xbf, 0x7b, 0x48, 0x9a, 0x2a,
		0x75, 0x84, 0x88, 0x16, 0xb7, 0xe2, 0x45, 0x6d, 0x48, 0xe5, 0x3b, 0x28, 0x59, 0xc6, 0x06, 0x24,
		0xdc, 0x94, 0x0d, 0x7b, 0xa5, 0x22, 0x6e, 0xc9, 0x30, 0xeb, 0xa0, 0xe2, 0x16, 0xd7, 0x44, 0xf5,
		0x25, 0x44, 0xdc, 0x96, 0x0d, 0x40, 0xc3, 0x4d, 0x9d, 0x77, 0x02, 0x0d, 0xb7, 0x32, 0x35, 0xdc,
		0x16, 0x33, 0x5a, 0x5e, 0xc2, 0x2d, 0x69, 0x07, 0x0a, 0x6e, 0x50, 0x70, 0xab, 0xc8, 0x5d, 0xaf,
		0x99, 0x82, 0x9b, 0x6c, 0x8d, 0x83, 0x8d, 0x79, 0x47, 0xa3, 0x10, 0x8d, 0x2c, 0xfc, 0x2a, 0x23,
		0x71, 0x48, 0x1d, 0xd5, 0x20, 0x3e, 0xd3, 0xe0, 0x2c, 0xfc, 0xa5, 0x0d, 0xa9, 0x61, 0x1a, 0x3e,
		0x14, 0x31, 0x61, 0x4d, 0x61, 0x4d, 0xf5, 0xb3, 0xa6, 0x64, 0x89, 0xf8, 0x54, 0xc0, 0xa4, 0x08,
		0x9c, 0x88, 0x01, 0x8a, 0x7c, 0xe9, 0xab, 0x30, 0x01, 0xea, 0x4c, 0x81, 0x2a, 0x93, 0xa0, 0xdc,
		0x34, 0x28, 0x37, 0x11, 0x4a, 0x4d, 0x05, 0x8d, 0xc9, 0x20, 0x32, 0x1d, 0xf4, 0x40, 0xb6, 0x31,
		0x5f, 0xbf, 0x78, 0x01, 0x57, 0x71, 0xd0, 0x79, 0x4e, 0xd8, 0x26, 0x49, 0xcd, 0xab, 0xe7, 0xff,
		0x14, 0x24, 0xe2, 0x93, 0x56, 0x0b, 0x2b, 0xb3, 0x87, 0xd5, 0xf6, 0xb4, 0xba, 0x1e, 0xdf, 0xd2,
		0xf3, 0xa4, 0xd5, 0xc8, 0x5e, 0x1c, 0x83, 0xd7, 0x0a, 0x3f, 0x83, 0xba, 0xb0, 0x54, 0xe6, 0x07,
		0xd5, 0xad, 0xaa, 0x59, 0xd6, 0xbf, 0x91, 0x92, 0x96, 0xe7, 0xaf, 0x6a, 0xbc, 0x18, 0x06, 0x58,
		0x0c, 0x62, 0x8b, 0x01, 0xd5, 0xd7, 0x6a, 0x59, 0x7d, 0xad, 0x64, 0xd3, 0x70, 0xa0, 0xf7, 0x7d,
		0x12, 0x9b, 0x2e, 0x85, 0xc4, 0x34, 0xf6, 0xa6, 0x96, 0xed, 0x9a, 0xf1, 0x59, 0xbb, 0x42, 0x64,
		0x52, 0x60, 0xa1, 0x8c, 0xf7, 0xcc, 0xbd, 0x8b, 0x83, 0x88, 0xb5, 0x83, 0x26, 0x95, 0xcf, 0x8d,
		0x2a, 0x8a, 0x05, 0x64, 0x7e, 0xcc, 0xf2, 0xa1, 0xc3, 0x8e, 0xe2, 0xcf, 0x29, 0xe1, 0xc1, 0x43,
		0xc5, 0xe0, 0x71, 0xa8, 0xfa, 0xf9, 0xd2, 0xaa, 0x86, 0xbe, 0xdb, 0x3f, 0xdd, 0xa3, 0xc1, 0xaf,
		0xcb, 0x86, 0xa5, 0xc0, 0xa2, 0xaa, 0x66, 0x3d, 0xe3, 0xe8, 0xe8, 0xe8, 0xca, 0x32, 0xbf, 0x5d,
		0x98, 0x7f, 0xb7, 0xcd, 0xf3, 0xeb, 0x51, 0xea, 0x3f, 0xc3, 0xa1, 0x79, 0x3d, 0x6a, 0x7d, 0x6f,
		0xbf, 0x1a, 0x74, 0xe6, 0xad, 0xb7, 0x4f, 0xbf, 0x1f, 0x45, 0xfe, 0xce, 0x8f, 0x22, 0x57, 0xbd,
		0x6d, 0x3d, 0x0e, 0x87, 0xc7, 0x86, 0xee, 0xa4, 0x80, 0xc7, 0x93, 0xb7, 0xcc, 0x13, 0x2b, 0x08,
		0xbc, 0x5b, 0x3b, 0xce, 0x65, 0x54, 0xf4, 0x98, 0xf2, 0xc6, 0x27, 0x10, 0xc5, 0x0b, 0x7f, 0x66,
		0x13, 0x2b, 0x74, 0xe2, 0xc0, 0xe8, 0xa7, 0xcb, 0x3f, 0xff, 0xba, 0xfc, 0x13, 0xa1, 0x7d, 0xf9,
		0xc1, 0x42, 0x68, 0x7f, 0xf5, 0x01, 0x08, 0xed, 0xd7, 0x20, 0xb4, 0xcf, 0xdc, 0x70, 0xca, 0xfc,
		0x45, 0x2a, 0xb6, 0x82, 0x08, 0x7f, 0x8f, 0xb0, 0xcd, 0x4b, 0x37, 0x9c, 0x46, 0x9d, 0xb0, 0x4f,
		0x0f, 0xa7, 0xda, 0x37, 0xa1, 0x1f, 0x70, 0xfa, 0x3d, 0x23, 0x69, 0x97, 0x7e, 0xa7, 0x98, 0x58,
		0x4e, 0x80, 0xc7, 0x5d, 0xb1, 0x51, 0x60, 0xa3, 0x68, 0xd8, 0x46, 0x71, 0xe3, 0x79, 0x0e, 0xb3,
		0x94, 0x6c, 0x12, 0x9d, 0x3d, 0x32, 0xe8, 0x33, 0xcf, 0x57, 0x60, 0xce, 0xe3, 0x56, 0xe9, 0x8d,
		0x79, 0xa7, 0x7b, 0x0a, 0x53, 0x0e, 0x53, 0x0e, 0x53, 0xde, 0x2c, 0x53, 0x1e, 0x59, 0x13, 0xd3,
		0x0d, 0xa7, 0x37, 0xc2, 0x4f, 0x22, 0xed, 0x32, 0x01, 0x90, 0xd7, 0xa4, 0x6e, 0x1c, 0xf2, 0x9a,
		0x25, 0xad, 0xb9, 0xf5, 0x21, 0x85, 0xbc, 0x66, 0xe5, 0xc3, 0x8a, 0xf8, 0xb5, 0x7a, 0x60, 0xf5,
		0xd9, 0x84, 0xf9, 0x0a, 0x90, 0x75, 0xd1, 0x2e, 0x22, 0x10, 0xc0, 0x56, 0x60, 0x2b, 0xb0, 0x15,
		0x11, 0x88, 0xb2, 0x0c, 0xfa, 0x3d, 0xf3, 0x03, 0x2a, 0xd1, 0xac, 0xb5, 0xfe, 0x5f, 0x36, 0x4c,
		0x6f, 0xd2, 0x7b, 0x30, 0xe7, 0x30, 0xe7, 0x30, 0xe7, 0xcd, 0x32, 0xe7, 0xa1, 0xed, 0xf2, 0xd7,
		0x0a, 0x8c, 0x79, 0x1f, 0xf1, 0x87, 0x7a, 0x3a, 0xab, 0x1d, 0xc4, 0x1f, 0xf6, 0x2d, 0xfe, 0xd0,
		0x43, 0xec, 0x61, 0x6f, 0x63, 0x0f, 0x10, 0x87, 0xcd, 0x14, 0x14, 0x4c, 0xf4, 0xef, 0x92, 0x9f,
		0x3a, 0xd6, 0x68, 0xfe, 0xb4, 0xb8, 0xc3, 0xe4, 0x67, 0x8d, 0x6b, 0x34, 0xa3, 0xac, 0x68, 0xa9,
		0x5e, 0x07, 0xd4, 0x4c, 0xa0, 0x66, 0x92, 0xc7, 0xb7, 0x87, 0x9a, 0x09, 0x02, 0x0f, 0x08, 0x3c,
		0x20, 0xf0, 0xa0, 0x63, 0xe0, 0x01, 0x6a, 0x26, 0x87, 0xe4, 0x7d, 0x0a, 0x35, 0x93, 0x92, 0x7a,
		0x7c, 0x4b, 0xcf, 0x43, 0xcd, 0xa4, 0xf0, 0x07, 0x41, 0xcd, 0xa4, 0xe4, 0x68, 0xd6, 0x21, 0xd4,
		0x4c, 0x74, 0x5f, 0x0c, 0x50, 0x33, 0x81, 0x9a, 0x49, 0xc9, 0x51, 0xd1, 0x43, 0xa8, 0x99, 0x40,
		0xcd, 0xa4, 0xcc, 0x7d, 0x02, 0x6a, 0x26, 0xc5, 0x3f, 0x07, 0x6a, 0x26, 0xda, 0x0e, 0x3d, 0xd4,
		0x4c, 0xaa, 0xd8, 0xb0, 0xa0, 0x66, 0x02, 0x35, 0x13, 0xfa, 0xfb, 0x82, 0x9a, 0x89, 0x5c, 0xfb,
		0x50, 0x33, 0x41, 0x68, 0x1f, 0xa1, 0x7d, 0xa5, 0xc6, 0x0e, 0x6a, 0x26, 0x50, 0x33, 0xd9, 0xf9,
		0x9d, 0xa0, 0x66, 0x82, 0x8d, 0x02, 0x1b, 0x05, 0x36, 0x0a, 0x3c, 0x4b, 0xb4, 0x27, 0x06, 0xdd,
		0x9b, 0x4c, 0x02, 0xa6, 0xc0, 0xa0, 0x27, 0xed, 0xc2, 0xf0, 0xc2, 0xf0, 0xc2, 0xf0, 0x36, 0xca,
		0xf0, 0x86, 0xb6, 0xcb, 0x07, 0x3d, 0x05, 0x76, 0xf7, 0x35, 0x1e, 0xfb, 0x21, 0x6e, 0x1c, 0xb2,
		0x23, 0x25, 0x2d, 0xb7, 0xf5, 0x21, 0xdd, 0x83, 0xc7, 0x7e, 0x3a, 0xaf, 0x7b, 0xbd, 0xc1, 0x59,
		0xaf, 0xd7, 0x3e, 0x3b, 0x3d, 0x6b, 0x9f, 0xf7, 0xfb, 0x9d, 0x41, 0x07, 0x2a, 0x24, 0xe4, 0xad,
		0xed, 0x95, 0x0a, 0x89, 0xe7, 0x38, 0xa6, 0xed, 0x72, 0xe6, 0xdf, 0x5b, 0x8e, 0x0a, 0xfd, 0xbc,
		0x74, 0xf3, 0xc0, 0x4e, 0x60, 0x27, 0xb0, 0xb3, 0x71, 0xd8, 0x79, 0xda, 0x55, 0x80, 0x9d, 0x67,
		0xc0, 0x4e, 0x60, 0x27, 0xb0, 0x53, 0x8b, 0x21, 0xed, 0x75, 0xcf, 0x7b, 0xe7, 0x83, 0xb3, 0xee,
		0x39, 0x60, 0x13, 0xb0, 0xb9, 0x13, 0x36, 0xa1, 0xd1, 0x0c, 0x60, 0x05, 0xb0, 0x02, 0x58, 0xf5,
		0x05, 0x56, 0x68, 0x34, 0x83, 0x5a, 0x41, 0xad, 0x4d, 0xa0, 0x56, 0x68, 0x34, 0x03, 0x58, 0x5f,
		0x02, 0x56, 0x68, 0x34, 0x03, 0x5b, 0x81, 0xad, 0xc0, 0x56, 0xe4, 0x55, 0xed, 0x87, 0x41, 0xf7,
		0x3d, 0x8f, 0x9b, 0x63, 0xe6, 0x58, 0x0f, 0xf4, 0x46, 0x3d, 0xd5, 0x36, 0x0c, 0x30, 0x0c, 0x30,
		0x0c, 0x70, 0xa3, 0x0c, 0x30, 0x0e, 0xba, 0x10, 0x32, 0x40, 0xc8, 0x60, 0xcf, 0x43, 0x06, 0x38,
		0xe8, 0x42, 0xdc, 0x20, 0x3f, 0x66, 0xda, 0xc1, 0x4c, 0x55, 0x49, 0x90, 0xe7, 0x1f, 0x00, 0xe0,
		0x04, 0x70, 0x02, 0x38, 0x1b, 0x07, 0x9c, 0x48, 0xe8, 0x07, 0x70, 0x02, 0x38, 0xf7, 0x18, 0x38,
		0x91, 0xd0, 0x0f, 0xf4, 0x2c, 0x36, 0x8c, 0x01, 0xf7, 0x2d, 0xbe, 0x50, 0x38, 0xa0, 0x45, 0xce,
		0x65, 0xc3, 0x40, 0x4d, 0xa0, 0x26, 0x50, 0xb3, 0x71, 0xa8, 0x89, 0x8a, 0x71, 0x20, 0x4d, 0x90,
		0xe6, 0xfe, 0x92, 0x66, 0xb7, 0x0f, 0xb0, 0x04, 0x58, 0xee, 0x18, 0x46, 0x94, 0x37, 0x06, 0xac,
		0x02, 0x56, 0x01, 0xab, 0x80, 0x55, 0xc0, 0x6a, 0xad, 0xc8, 0x06, 0xe5, 0x8d, 0xf7, 0x0e, 0x56,
		0x51, 0xde, 0x78, 0x7f, 0x51, 0x15, 0xe5, 0x8d, 0xf3, 0x96, 0x37, 0xa6, 0xa8, 0x99, 0x7b, 0xa8,
		0xb2, 0xba, 0xf1, 0xa7, 0xf8, 0x06, 0xab, 0x2a, 0x6e, 0x7c, 0x50, 0xe2, 0x04, 0x8a, 0xd8, 0x53,
		0xbe, 0xba, 0xa9, 0xf1, 0xde, 0x0e, 0xf8, 0x05, 0xe7, 0x72, 0x4f, 0x9c, 0x44, 0x9b, 0xf6, 0xa5,
		0xc3, 0x22, 0x8e, 0x8c, 0x4c, 0x98, 0x1b, 0x3a, 0x8e, 0x44, 0x9d, 0xe7, 0x0f, 0xd6, 0xbf, 0x74,
		0x8d, 0xfd, 0xe1, 0x8f, 0x99, 0xcf, 0xc6, 0xef, 0x1e, 0x92, 0xa6, 0x4a, 0x1d, 0x22, 0xa2, 0xb5,
		0xad, 0x74, 0x4d, 0x1b, 0x52, 0x15, 0xb9, 0x95, 0xac, 0x62, 0xb1, 0xf5, 0x5b, 0x7c, 0xf5, 0x15,
		0xbb, 0xa2, 0xe0, 0x24, 0x90, 0x1d, 0x7c, 0x35, 0x83, 0x2e, 0x30, 0xda, 0xe4, 0xa3, 0x5c, 0x6c,
		0x78, 0xf3, 0x0f, 0x52, 0x81, 0x01, 0x12, 0xac, 0x25, 0x2f, 0x55, 0x3b, 0x5e, 0xb0, 0x56, 0xbc,
		0x70, 0x6d, 0x78, 0x99, 0x10, 0x8d, 0x7c, 0x28, 0x46, 0x36, 0xe4, 0x42, 0x16, 0x5a, 0x21, 0x0b,
		0xa1, 0x90, 0x84, 0x4a, 0xd4, 0x9a, 0x1c, 0xd1, 0x5a, 0xec, 0x86, 0x15, 0xf2, 0x2f, 0xe6, 0xd4,
		0x0e, 0xa6, 0x16, 0xbf, 0xfd, 0x22, 0x3e, 0x66, 0xab, 0xc2, 0x2f, 0x6b, 0xcd, 0x89, 0xf2, 0x8d,
		0x94, 0x63, 0x27, 0x1d, 0xf1, 0xa4, 0x88, 0x70, 0xd2, 0x45, 0x34, 0xa9, 0x22, 0x98, 0xe4, 0x11,
		0x4b, 0xf2, 0x08, 0x25, 0x69, 0x44, 0xb2, 0x5c, 0x22, 0x97, 0x8e, 0x30, 0xae, 0xe6, 0xcb, 0xad,
		0x17, 0xba, 0x9c, 0xf9, 0x52, 0xc9, 0x96, 0x04, 0xc9, 0x95, 0x44, 0x51, 0x43, 0x02, 0xaf, 0x96,
		0x32, 0x2a, 0x48, 0x7d, 0xb6, 0x42, 0x7c, 0x44, 0xad, 0x22, 0x24, 0x44, 0x71, 0x1a, 0x47, 0x19,
		0xc5, 0x53, 0x35, 0x04, 0xea, 0x92, 0x17, 0x95, 0x8c, 0x4a, 0x45, 0x71, 0x8a, 0x51, 0x59, 0xfe,
		0x95, 0x00, 0x36, 0x32, 0xd7, 0xba, 0x71, 0x98, 0xe9, 0xf2, 0x99, 0x19, 0x51, 0x84, 0x3c, 0x8b,
		0x3c, 0x6f, 0x50, 0xd0, 0xb6, 0x13, 0x29, 0x5e, 0x80, 0x6a, 0x40, 0x35, 0x8d, 0xa5, 0x1a, 0x79,
		0xc5, 0x08, 0x49, 0x85, 0x88, 0x32, 0x4d, 0xd8, 0x98, 0xca, 0x74, 0x8d, 0x61, 0xb2, 0x60, 0xb2,
		0x60, 0xb2, 0x60, 0xb2, 0x14, 0x9a, 0xac, 0x88, 0x8e, 0x82, 0x78, 0x62, 0x9b, 0xcb, 0xf3, 0x24,
		0x69, 0xeb, 0xb5, 0xa5, 0x4d, 0x18, 0x20, 0x18, 0x20, 0x18, 0xa0, 0x42, 0xf3, 0xc5, 0x9e, 0x49,
		0xae, 0x9e, 0x35, 0x1b, 0x74, 0x2e, 0xd1, 0x46, 0xf2, 0x9d, 0x2a, 0x0f, 0x05, 0x3d, 0xf5, 0xcc,
		0x7d, 0x8f, 0xa0, 0x6f, 0x36, 0xfa, 0x88, 0xe0, 0x61, 0x64, 0xf2, 0x22, 0xff, 0xc6, 0x3f, 0x47,
		0x47, 0x57, 0x6d, 0xf3, 0x7c, 0xf4, 0x78, 0xd5, 0x31, 0xcf, 0x47, 0x8b, 0x97, 0x9d, 0xf8, 0xc7,
		0xe2, 0x75, 0xf7, 0xaa, 0x6d, 0xf6, 0x96, 0xaf, 0xfb, 0x57, 0x6d, 0xb3, 0x3f, 0x6a, 0x0d, 0x87,
		0xc7, 0xad, 0xef, 0xa7, 0xf3, 0xe2, 0x17, 0xfe, 0x20, 0x9f, 0x02, 0x3a, 0xaa, 0x32, 0xa7, 0x86,
		0x76, 0x92, 0x0d, 0x9a, 0x36, 0xc9, 0x2c, 0x73, 0x72, 0x61, 0xfe, 0x32, 0xfa, 0xde, 0x79, 0xd5,
		0x9b, 0xbf, 0x69, 0x7d, 0x3f, 0x9b, 0x3f, 0xff, 0xe5, 0xe3, 0xb6, 0xb7, 0x75, 0x5e, 0x9d, 0xcd,
		0xdf, 0x64, 0xfc, 0x65, 0x30, 0x7f, 0x93, 0xb3, 0x8d, 0xfe, 0xfc, 0x68, 0xe3, 0xad, 0xd1, 0xef,
		0xbb, 0x59, 0x17, 0xf4, 0x32, 0x2e, 0x38, 0xcd, 0xba, 0xe0, 0x34, 0xe3, 0x82, 0xcc, 0x5b, 0xea,
		0x66, 0x5c, 0xd0, 0x9f, 0x3f, 0x6e, 0xbc, 0xff, 0x68, 0xfb, 0x5b, 0x07, 0xf3, 0xd6, 0x63, 0xd6,
		0xdf, 0xce, 0xe6, 0x8f, 0x6f, 0x5a, 0x1a, 0x2c, 0x39, 0xfd, 0xa3, 0x89, 0x4d, 0xca, 0xd6, 0x10,
		0xcc, 0xb3, 0x23, 0xcc, 0xd5, 0x28, 0x9e, 0x48, 0x57, 0x20, 0x53, 0xe3, 0x80, 0x70, 0x08, 0x45,
		0x87, 0x8e, 0x76, 0xc8, 0x8c, 0x42, 0xc9, 0x27, 0x34, 0x83, 0x94, 0x6f, 0x78, 0x5e, 0xee, 0xec,
		0x1c, 0x1d, 0x6d, 0xcc, 0x7c, 0x2f, 0xba, 0x05, 0x96, 0xdf, 0x31, 0x4c, 0x49, 0x4f, 0x2f, 0x2f,
		0xcd, 0x39, 0xa0, 0xc5, 0x12, 0x65, 0x0a, 0xfb, 0x77, 0x22, 0xfe, 0x5c, 0xda, 0x7f, 0x8b, 0xbe,
		0x4f, 0x91, 0xe1, 0x16, 0x74, 0xd8, 0xa4, 0x1d, 0x34, 0x69, 0x87, 0xec, 0xb9, 0x03, 0x16, 0x7f,
		0xf1, 0x8a, 0x16, 0x79, 0xd1, 0xd4, 0x96, 0xe5, 0xac, 0x13, 0xcf, 0xf1, 0x5a, 0x36, 0xd0, 0x8c,
		0x2c, 0xaf, 0x82, 0x93, 0x9a, 0x2a, 0x1a, 0xa1, 0x7f, 0x9a, 0x57, 0xb1, 0x49, 0x5f, 0x0e, 0xac,
		0x08, 0xe7, 0x79, 0xcd, 0x6c, 0x82, 0x63, 0x89, 0xa8, 0x11, 0x44, 0xf2, 0x24, 0x16, 0x0d, 0x42,
		0x79, 0x62, 0x8b, 0xaa, 0xee, 0xb1, 0x3c, 0x87, 0x59, 0x13, 0x9f, 0x4d, 0x28, 0x02, 0x79, 0x12,
		0x12, 0xcd, 0xc6, 0xc7, 0x84, 0x78, 0x8f, 0x8f, 0x17, 0x7e, 0xc6, 0x49, 0xb4, 0xa0, 0x35, 0x3e,
		0x9c, 0x10, 0xcb, 0xd5, 0xde, 0xe8, 0x7d, 0x99, 0x67, 0x97, 0x04, 0x77, 0x75, 0xe9, 0xdd, 0x1d,
		0x86, 0x0b, 0x86, 0x4b, 0xd8, 0x70, 0x89, 0x52, 0xc2, 0xaa, 0x01, 0xcb, 0xbf, 0x0b, 0xe4, 0xc7,
		0x78, 0x95, 0x14, 0x1e, 0xb5, 0x26, 0x39, 0x1a, 0x34, 0x69, 0x83, 0x64, 0x6a, 0x18, 0x94, 0x2a,
		0x18, 0x84, 0xcb, 0x93, 0x7a, 0x99, 0x2a, 0x5b, 0xae, 0xca, 0x96, 0xad, 0x9a, 0xe5, 0x2b, 0x1f,
		0x2b, 0x3d, 0x24, 0x78, 0x60, 0x98, 0x4c, 0xc7, 0x22, 0xad, 0xb3, 0x68, 0xbb, 0x77, 0xa4, 0xc7,
		0x1b, 0x95, 0xf6, 0x10, 0xc9, 0x33, 0xad, 0xab, 0xd6, 0x28, 0x9f, 0x6d, 0x7d, 0x6a, 0x94, 0xf0,
		0x19, 0xd7, 0x55, 0xa3, 0x24, 0xcf, 0xba, 0xca, 0x4f, 0x72, 0x89, 0xe1, 0x33, 0x6e, 0x67, 0xa1,
		0x19, 0x06, 0xd6, 0x1d, 0x33, 0x17, 0xa1, 0x55, 0xba, 0xed, 0x67, 0xa3, 0x65, 0x6c, 0x45, 0xd8,
		0x8a, 0xb0, 0x15, 0x69, 0xb6, 0x15, 0x71, 0x7b, 0xca, 0xb8, 0x7d, 0xfb, 0x35, 0x20, 0xd1, 0x99,
		0x27, 0xd4, 0x97, 0x27, 0x16, 0x50, 0x22, 0x54, 0xa1, 0x52, 0x21, 0x98, 0xa4, 0x48, 0x55, 0x47,
		0x95, 0x9a, 0xa7, 0x4a, 0x15, 0x1d, 0x42, 0x41, 0x24, 0x25, 0x42, 0x48, 0xaa, 0x87, 0x4a, 0xbd,
		0x1e, 0xbc, 0xd2, 0xd1, 0xd3, 0x44, 0x63, 0x68, 0x54, 0x6b, 0x16, 0x0b, 0x03, 0x82, 0x92, 0xc4,
		0x5b, 0x48, 0x2c, 0x6e, 0x17, 0x1c, 0x06, 0x0e, 0x03, 0x87, 0x81, 0xc3, 0xc0, 0x61, 0xe0, 0x30,
		0x70, 0x18, 0x38, 0x0c, 0x1c, 0xb6, 0x8d, 0xc3, 0xb8, 0xed, 0xd8, 0xdf, 0x68, 0x64, 0x22, 0xd7,
		0x41, 0x2c, 0xd5, 0x30, 0x48, 0x0c, 0x24, 0x06, 0x12, 0xd3, 0x8c, 0xc4, 0x66, 0xcc, 0xbf, 0x65,
		0x2e, 0xb7, 0xee, 0x18, 0x21, 0x88, 0xf5, 0x01, 0x62, 0x00, 0x31, 0x80, 0x98, 0x18, 0x88, 0xb5,
		0xdb, 0xe0, 0xae, 0x26, 0x70, 0xd7, 0x94, 0x4d, 0x3d, 0xff, 0x61, 0x11, 0xaa, 0xa2, 0x83, 0xae,
		0xb5, 0x56, 0x41, 0x5c, 0x20, 0x2e, 0x10, 0x97, 0x66, 0xc4, 0x45, 0x56, 0xe6, 0x1a, 0x61, 0x2f,
		0xd0, 0x16, 0x68, 0x0b, 0x61, 0x2f, 0xe0, 0x97, 0x0c, 0x7e, 0xa9, 0x88, 0x7c, 0x6d, 0x69, 0x1b,
		0x28, 0x06, 0x14, 0x03, 0x8a, 0x21, 0xf8, 0x05, 0x1c, 0x03, 0x8e, 0x01, 0xc7, 0x10, 0xfc, 0x6a,
		0x38, 0x7d, 0x25, 0xea, 0x24, 0x44, 0xbc, 0x15, 0xb7, 0x06, 0xc2, 0x02, 0x61, 0x81, 0xb0, 0x34,
		0x23, 0x2c, 0xed, 0x9e, 0xfd, 0xaa, 0xc4, 0xda, 0xc9, 0xe8, 0x62, 0x6c, 0x42, 0xab, 0xb0, 0x3e,
		0x06, 0x6c, 0x1d, 0x6c, 0x1d, 0x6c, 0x9d, 0x32, 0x5b, 0x87, 0xc0, 0x3e, 0x3c, 0x49, 0x78, 0x92,
		0xba, 0x78, 0x92, 0x08, 0xec, 0x37, 0xd4, 0xb5, 0x0c, 0xb8, 0xe5, 0x73, 0x93, 0xdb, 0x94, 0x0e,
		0x66, 0xaa, 0x4d, 0xa0, 0x17, 0xd0, 0x0b, 0xe8, 0x05, 0xf4, 0x02, 0x7a, 0x01, 0xbd, 0x80, 0x5e,
		0x40, 0x2f, 0xa0, 0xd7, 0xd3, 0xb0, 0x84, 0x33, 0x5a, 0xec, 0x4a, 0xda, 0x03, 0x72, 0x01, 0xb9,
		0x80, 0x5c, 0x9a, 0x21, 0x17, 0x1e, 0xe1, 0x06, 0x77, 0x81, 0xbb, 0xc0, 0x5d, 0xe0, 0x2e, 0x22,
		0xee, 0x2a, 0x55, 0xbc, 0x57, 0xb2, 0x1e, 0xd1, 0x53, 0xb0, 0x8d, 0xac, 0xc8, 0xcd, 0xaa, 0x8c,
		0xcb, 0xf2, 0xd5, 0x89, 0x8c, 0xa2, 0xf6, 0x21, 0x59, 0x21, 0x9c, 0x8f, 0xcb, 0xfb, 0x5a, 0xbe,
		0x12, 0xa9, 0x5d, 0x24, 0x3e, 0xc8, 0x6a, 0x2b, 0x3d, 0xfc, 0xc6, 0x1e, 0xc4, 0x8e, 0x94, 0xe5,
		0x44, 0x50, 0x49, 0x44, 0x4f, 0x49, 0x44, 0x4e, 0xe5, 0x44, 0x4d, 0xeb, 0x5b, 0x05, 0x6c, 0x63,
		0xb5, 0x55, 0x56, 0x0d, 0x6c, 0x63, 0x7d, 0xa1, 0x2a, 0x58, 0xc1, 0x21, 0x2c, 0xbd, 0x36, 0xd8,
		0x6a, 0xc8, 0xca, 0xac, 0x10, 0x16, 0x04, 0x5f, 0xcc, 0x80, 0xf9, 0xf7, 0x05, 0xa4, 0xe2, 0x9e,
		0x8e, 0x6f, 0x9e, 0xae, 0xdd, 0x8f, 0x1a, 0x61, 0xc1, 0x43, 0x60, 0x72, 0xe6, 0x4f, 0x1b, 0x59,
		0x27, 0x6c, 0xf5, 0xe5, 0xeb, 0x52, 0x2b, 0xec, 0x76, 0x39, 0x3b, 0x04, 0x4b, 0x85, 0x25, 0xd7,
		0x97, 0x5c, 0x29, 0xac, 0x5d, 0x4d, 0xa5, 0x30, 0x81, 0xa9, 0x4d, 0x15, 0xba, 0xd2, 0xbf, 0x5a,
		0x58, 0xf1, 0xa9, 0x5f, 0x0e, 0x47, 0x0a, 0x57, 0x0c, 0x63, 0xae, 0x75, 0xe3, 0x10, 0x54, 0xdf,
		0x49, 0xda, 0x11, 0x2d, 0x65, 0xc2, 0x26, 0x56, 0xe8, 0xc4, 0x9d, 0x1c, 0x8d, 0x15, 0xca, 0x8f,
		0xc9, 0xae, 0x44, 0xea, 0x60, 0x72, 0xfd, 0x2a, 0xf9, 0x88, 0xaf, 0xd4, 0x6a, 0x02, 0x02, 0x74,
		0x65, 0xc8, 0x6e, 0x3c, 0xcf, 0x61, 0x96, 0x4b, 0x51, 0x86, 0xac, 0xa3, 0x71, 0xd9, 0xb0, 0x99,
		0xef, 0x71, 0xef, 0xd6, 0x73, 0xcc, 0x7b, 0xe6, 0x07, 0x32, 0x71, 0x94, 0x74, 0x45, 0xd0, 0xf5,
		0x16, 0xe5, 0xad, 0xd9, 0x5f, 0x5d, 0xd8, 0x32, 0xd8, 0x32, 0xd8, 0x32, 0x71, 0xac, 0x08, 0xa7,
		0xcc, 0x97, 0x7d, 0x82, 0x7f, 0x65, 0xcf, 0x7a, 0x12, 0x6d, 0x5c, 0xba, 0x61, 0x5c, 0xae, 0x66,
		0xae, 0xb1, 0x4d, 0xf4, 0x2d, 0xce, 0x4c, 0xc7, 0x9e, 0xda, 0x5c, 0xde, 0x1a, 0xa6, 0xda, 0x82,
		0x09, 0x83, 0x09, 0x83, 0x09, 0x13, 0x9c, 0x39, 0xa1, 0xed, 0xf2, 0xce, 0x80, 0xc0, 0x7a, 0x0d,
		0x24, 0x9a, 0xa0, 0x39, 0x92, 0xa7, 0xa9, 0xb6, 0x46, 0x98, 0xd9, 0x42, 0x7a, 0x9e, 0x4b, 0x7d,
		0xe4, 0xae, 0xe2, 0xb0, 0x76, 0x4e, 0x53, 0x9b, 0x4e, 0xfb, 0x21, 0x18, 0xf4, 0xfb, 0xa7, 0x7d,
		0x8d, 0x87, 0xa1, 0xa2, 0x33, 0xea, 0x91, 0xce, 0x65, 0x9c, 0x59, 0x10, 0x39, 0x4d, 0x54, 0xf8,
		0xb1, 0xde, 0x1c, 0x08, 0x04, 0x04, 0x02, 0x02, 0x01, 0x81, 0x80, 0x40, 0x40, 0x20, 0x20, 0x10,
		0x10, 0xc8, 0xd6, 0x6e, 0xe6, 0xf6, 0x94, 0x79, 0x21, 0x01, 0x7b, 0x2c, 0x1b, 0x02, 0x75, 0x80,
		0x3a, 0x40, 0x1d, 0xa0, 0x0e, 0x50, 0x07, 0xa8, 0x03, 0xd4, 0xd1, 0x04, 0xea, 0x68, 0x48, 0xf6,
		0xf1, 0x53, 0x3e, 0xe6, 0x89, 0x50, 0x6e, 0xdb, 0x21, 0x59, 0x2a, 0xeb, 0xa7, 0xe0, 0xcb, 0xa7,
		0xf8, 0x46, 0xae, 0x13, 0xec, 0x51, 0x95, 0x7c, 0x5c, 0x28, 0x47, 0xd7, 0xe2, 0x4c, 0x3c, 0x5b,
		0x50, 0xe4, 0xb1, 0x09, 0xe9, 0x64, 0xc1, 0x2e, 0x92, 0x05, 0x91, 0x2c, 0x98, 0xf3, 0x36, 0x91,
		0x2c, 0x08, 0x2f, 0x0d, 0x5e, 0x1a, 0xbc, 0x34, 0x24, 0x0b, 0x4a, 0x74, 0x1c, 0x92, 0x05, 0x61,
		0xcb, 0x60, 0xcb, 0xb4, 0xb2, 0x65, 0x48, 0x16, 0x2c, 0x74, 0x8f, 0x48, 0x16, 0x84, 0x09, 0x83,
		0x09, 0xd3, 0xcb, 0x84, 0x21, 0x68, 0x9e, 0xbe, 0x11, 0x04, 0xcd, 0xa5, 0xfe, 0x21, 0x68, 0xae,
		0xc7, 0x30, 0xe0, 0xa8, 0x7e, 0xa3, 0x9b, 0x91, 0x2c, 0x08, 0x02, 0x01, 0x81, 0x80, 0x40, 0x40,
		0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0xa4, 0x7c, 0x02, 0x41, 0xb2, 0x20, 0xa8, 0x03, 0xd4, 0x01,
		0xea, 0x00, 0x75, 0x80, 0x3a, 0x40, 0x1d, 0xa0, 0x0e, 0x24, 0x0b, 0xe6, 0x48, 0x16, 0x14, 0x55,
		0x04, 0xa6, 0xce, 0x15, 0x14, 0x50, 0x00, 0x6e, 0xae, 0x4e, 0x69, 0x61, 0xf1, 0x4d, 0x05, 0x23,
		0x56, 0xaa, 0x50, 0x69, 0xa1, 0xf4, 0x4d, 0xa1, 0xb4, 0x4d, 0x61, 0x79, 0xd2, 0x6e, 0x69, 0xf2,
		0xa4, 0x4d, 0x55, 0x26, 0xad, 0x8d, 0x28, 0xe9, 0x8d, 0xe7, 0x09, 0x56, 0x49, 0x4c, 0x27, 0x6f,
		0x09, 0x15, 0x45, 0x14, 0x04, 0x12, 0x1d, 0xa4, 0x49, 0x91, 0x68, 0x2c, 0x3b, 0xed, 0xcb, 0xc1,
		0x17, 0x61, 0xd7, 0x90, 0xa8, 0xbe, 0x8d, 0x44, 0x3d, 0x1b, 0x49, 0x3f, 0x50, 0xc2, 0x1b, 0xa6,
		0xf0, 0xfb, 0xa8, 0xaa, 0x6d, 0x11, 0xf9, 0x79, 0x94, 0x8e, 0x85, 0x4c, 0x65, 0x34, 0x0a, 0x7f,
		0x8e, 0xba, 0x6b, 0xe9, 0xeb, 0xc5, 0x90, 0xf6, 0x76, 0x49, 0x6e, 0xd4, 0x48, 0x83, 0x27, 0x7e,
		0x6e, 0x43, 0xdf, 0x67, 0x2e, 0x37, 0xc7, 0x16, 0x67, 0x72, 0x5b, 0xf2, 0x46, 0x4b, 0xd8, 0x99,
		0xb1, 0x33, 0xef, 0xd9, 0xce, 0x1c, 0xcd, 0x6d, 0xd3, 0x72, 0xc7, 0xa2, 0xf5, 0xb8, 0x57, 0xde,
		0x93, 0xc8, 0xe6, 0xfc, 0xd1, 0xe2, 0x9c, 0xf9, 0xae, 0xf0, 0xf6, 0x6c, 0xfc, 0x73, 0xd5, 0x36,
		0xcf, 0x47, 0xdf, 0x7b, 0xf3, 0xe1, 0xd0, 0x5c, 0xbc, 0xec, 0xa6, 0x5f, 0x7e, 0x5e, 0xbe, 0x78,
		0xb3, 0xf1, 0xe2, 0x68, 0x38, 0x3c, 0x8e, 0x5f, 0xff, 0xd4, 0x7a, 0xfb, 0xf7, 0xd5, 0x4f, 0xe6,
		0x68, 0xe3, 0x1d, 0x3f, 0x18, 0xb5, 0x34, 0x7f, 0x63, 0x6f, 0x6a, 0xd9, 0xae, 0x99, 0x38, 0xfb,
		0x82, 0x96, 0x2f, 0xdd, 0x08, 0x8c, 0x1e, 0x8c, 0xde, 0xbe, 0x19, 0x3d, 0xe1, 0xe9, 0x2d, 0x6d,
		0xf2, 0xde, 0x33, 0xf7, 0x2e, 0x0e, 0x03, 0xc2, 0x21, 0x29, 0xfe, 0x88, 0x34, 0x1c, 0x92, 0xfc,
		0x5d, 0xdb, 0xed, 0x9f, 0x36, 0xd0, 0xff, 0xa8, 0x02, 0x42, 0x8e, 0x8e, 0x8e, 0xae, 0x2c, 0xf3,
		0xdb, 0x85, 0xf9, 0x77, 0xdb, 0x3c, 0xbf, 0x1e, 0xa5, 0xfe, 0x33, 0x1c, 0x9a, 0xd7, 0xa3, 0xd6,
		0xf7, 0xf6, 0xab, 0x41, 0x67, 0xde, 0x7a, 0xfb, 0xf4, 0xfb, 0xd1, 0x70, 0x78, 0xdc, 0xfa, 0x51,
		0xe4, 0xaa, 0xb7, 0xad, 0xc7, 0xe1, 0xf0, 0xb8, 0x9e, 0x64, 0xf2, 0xc5, 0x0b, 0xb8, 0x1c, 0x96,
		0xac, 0x5a, 0x00, 0x93, 0x80, 0x49, 0xc0, 0x24, 0x60, 0x12, 0x30, 0x09, 0x98, 0x04, 0x4c, 0x02,
		0x26, 0x11, 0x66, 0x12, 0xc7, 0xbb, 0xb3, 0x5d, 0xf3, 0xc6, 0x72, 0x5d, 0xe6, 0x8b, 0x73, 0xc9,
		0x5a, 0x2b, 0x60, 0x13, 0xb0, 0xc9, 0x9e, 0xb1, 0x49, 0xc0, 0x7d, 0xdb, 0xbd, 0x93, 0xc2, 0x12,
		0x0d, 0xd6, 0xfa, 0xd4, 0xe3, 0x63, 0xe9, 0xa5, 0x9e, 0x6e, 0x04, 0x2b, 0x1d, 0x2b, 0x1d, 0x2b,
		0xbd, 0xac, 0x95, 0xbe, 0x6f, 0x99, 0x9c, 0x05, 0xd3, 0x6f, 0x89, 0x92, 0x38, 0xf3, 0x27, 0xdb,
		0xd2, 0x24, 0x70, 0x72, 0xe6, 0xb8, 0x8c, 0x0b, 0x17, 0x9b, 0x5f, 0xbf, 0x1c, 0xf5, 0xe6, 0x51,
		0x6f, 0x5e, 0x72, 0xe1, 0xa3, 0xde, 0xbc, 0x62, 0x56, 0x80, 0x84, 0x2c, 0xdd, 0xd4, 0x2f, 0x87,
		0x1a, 0xf6, 0x47, 0x42, 0x76, 0x62, 0x39, 0x01, 0x34, 0x64, 0xf1, 0xf0, 0x6e, 0x85, 0x4b, 0x55,
		0x32, 0xba, 0x08, 0x0d, 0x59, 0xe8, 0x25, 0xc2, 0xf4, 0xc0, 0xf4, 0x40, 0x37, 0x40, 0x62, 0x1d,
		0x41, 0x37, 0x80, 0xd6, 0xc0, 0x6c, 0x34, 0x07, 0xdd, 0x00, 0x6d, 0x86, 0x00, 0xba, 0x01, 0x5b,
		0xff, 0x41, 0x2f, 0x11, 0x04, 0x02, 0x02, 0x01, 0x81, 0x80, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10,
		0x08, 0x08, 0x24, 0xdd, 0xcd, 0xd0, 0x4b, 0x04, 0x75, 0x80, 0x3a, 0x40, 0x1d, 0xa0, 0x0e, 0x50,
		0x07, 0xa8, 0x03, 0xd4, 0x01, 0xbd, 0xc4, 0xac, 0x2c, 0xad, 0xb5, 0xfc, 0xa3, 0xaa, 0xeb, 0x2b,
		0x7f, 0x8e, 0x6f, 0x06, 0x25, 0x96, 0x51, 0x62, 0xb9, 0x4a, 0x22, 0x44, 0x7e, 0x4c, 0xde, 0x0b,
		0x91, 0x1f, 0x03, 0x67, 0x0d, 0xce, 0xda, 0x7e, 0x39, 0x6b, 0xc8, 0x8f, 0x29, 0xdc, 0x65, 0xc8,
		0x8f, 0x81, 0xe9, 0x81, 0xe9, 0x41, 0x9c, 0x08, 0x71, 0x22, 0xc4, 0x89, 0x10, 0x27, 0x6a, 0x58,
		0x9c, 0x08, 0xf9, 0x31, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x02, 0x02, 0x01, 0x81, 0x80,
		0x40, 0x6a, 0x41, 0x20, 0xc8, 0x8f, 0x01, 0x75, 0x80, 0x3a, 0x40, 0x1d, 0xa0, 0x0e, 0x50, 0x07,
		0xa8, 0x03, 0xd4, 0x81, 0xfc, 0x98, 0x7c, 0xf9, 0x31, 0xd5, 0x96, 0x14, 0x5d, 0x4b, 0x8f, 0x41,
		0x55, 0x51, 0xd1, 0x51, 0x2c, 0x5d, 0x93, 0x2a, 0x3d, 0x6e, 0x64, 0xd2, 0x54, 0x07, 0x12, 0x23,
		0x53, 0x74, 0x44, 0xe8, 0x46, 0xc2, 0xc8, 0x55, 0x12, 0x55, 0xbe, 0xcf, 0x77, 0x77, 0x73, 0x76,
		0xe7, 0x6d, 0xff, 0x4b, 0x46, 0x77, 0x46, 0x8c, 0x9d, 0x43, 0xb5, 0xdd, 0x78, 0x6f, 0x07, 0xfc,
		0x82, 0xf3, 0xdd, 0x49, 0x36, 0x11, 0xf7, 0x5c, 0x3a, 0x2c, 0x02, 0xe2, 0x68, 0x07, 0x72, 0x43,
		0xc7, 0x79, 0x75, 0xb0, 0x6b, 0x87, 0xce, 0xff, 0xe6, 0x3f, 0xfc, 0x31, 0xf3, 0xd9, 0xf8, 0xdd,
		0x43, 0xf2, 0xd6, 0x42, 0xdf, 0x31, 0xe7, 0x54, 0x21, 0x98, 0x22, 0x3b, 0xe6, 0x86, 0xdc, 0x9c,
		0xd8, 0x3e, 0x19, 0x36, 0x87, 0x7a, 0xfd, 0x37, 0xcf, 0x3a, 0xe4, 0xa5, 0x8e, 0x10, 0xeb, 0x80,
		0x2d, 0xdf, 0xb9, 0xf8, 0x77, 0x5d, 0xff, 0x7e, 0x4f, 0xdf, 0x22, 0xf5, 0x0d, 0x8c, 0x3b, 0x2b,
		0xf8, 0xca, 0x36, 0x1d, 0xfe, 0x95, 0x0f, 0x92, 0xfc, 0xfd, 0xd9, 0x77, 0xde, 0x9e, 0x85, 0x98,
		0xe9, 0x77, 0xef, 0xf2, 0xa7, 0x77, 0x7f, 0x52, 0x1e, 0xd7, 0x37, 0xb7, 0x4b, 0x9b, 0xdb, 0x55,
		0x5d, 0x73, 0x41, 0x93, 0xfb, 0x2a, 0x38, 0x2b, 0xb2, 0x72, 0xe7, 0x8c, 0x5b, 0xee, 0x3b, 0xa6,
		0xed, 0x72, 0xe6, 0x4f, 0xac, 0x5d, 0x5f, 0x6a, 0x25, 0xa3, 0xb6, 0xfe, 0xfe, 0x2c, 0x8b, 0xb3,
		0x13, 0xa6, 0x5f, 0x0c, 0x88, 0xe4, 0x09, 0x78, 0xbc, 0x3c, 0x50, 0x45, 0x63, 0x15, 0x85, 0x63,
		0x11, 0x85, 0x63, 0x0d, 0xb9, 0x06, 0x52, 0xcc, 0xc6, 0xbf, 0xe8, 0xe6, 0xe7, 0x97, 0x16, 0x7d,
		0x41, 0x42, 0x74, 0x8b, 0x41, 0xda, 0xb2, 0x48, 0x7c, 0x6b, 0x6c, 0x87, 0x81, 0x69, 0x71, 0xee,
		0xdb, 0x37, 0x21, 0xcf, 0x31, 0xb3, 0x36, 0xae, 0xc0, 0xdc, 0xc2, 0xdc, 0x52, 0xb6, 0xd9, 0x2d,
		0x7a, 0xe8, 0x24, 0xdb, 0xca, 0x67, 0x6d, 0x6f, 0xbf, 0xc6, 0x57, 0x5c, 0xff, 0xba, 0xa5, 0x87,
		0x53, 0x5b, 0xda, 0x41, 0xea, 0x6e, 0xb3, 0xee, 0xd2, 0xb0, 0x83, 0x5f, 0xac, 0xaf, 0xec, 0x4f,
		0xcf, 0xdb, 0x1c, 0xe1, 0xe7, 0x77, 0x6e, 0xa4, 0xff, 0xb4, 0x76, 0x67, 0x3f, 0xb3, 0x7b, 0xfb,
		0x36, 0xf1, 0xb0, 0xe6, 0x07, 0xf3, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff,
		0xff, 0x4a, 0xb4, 0x1a, 0x74, 0x78, 0xa3, 0x15, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/access-points/access-point/radios/radio/config/operating-frequency": {
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/access-points/access-point/radios/radio/state/channel-change-reason": {
		reflect.TypeOf((E_OpenconfigWifiTypes_CHANGE_REASON_TYPE)(0)),
	},
	"/access-points/access-point/radios/radio/state/operating-frequency": {
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/access-points/access-point/ssids/ssid/clients/client/client-capabilities/state/client-capabilities": {
		reflect.TypeOf((E_OpenconfigWifiTypes_CLIENT_CAPABILITIES)(0)),
	},
	"/access-points/access-point/ssids/ssid/clients/client/client-connection/state/client-state": {
		reflect.TypeOf((E_OpenconfigWifiTypes_CLIENT_STATE)(0)),
	},
	"/access-points/access-point/ssids/ssid/clients/client/client-rf/state/connection-mode": {
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Clients_Client_ClientRf_State_ConnectionMode)(0)),
	},
	"/access-points/access-point/ssids/ssid/config/basic-data-rates": {
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/access-points/access-point/ssids/ssid/config/operating-frequency": {
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/access-points/access-point/ssids/ssid/config/opmode": {
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode)(0)),
	},
	"/access-points/access-point/ssids/ssid/config/supported-data-rates": {
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/access-points/access-point/ssids/ssid/dot11r/config/dot11r-method": {
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod)(0)),
	},
	"/access-points/access-point/ssids/ssid/dot11r/state/dot11r-method": {
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Dot11R_Config_Dot11RMethod)(0)),
	},
	"/access-points/access-point/ssids/ssid/state/basic-data-rates": {
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/access-points/access-point/ssids/ssid/state/operating-frequency": {
		reflect.TypeOf((E_OpenconfigWifiTypes_OPERATING_FREQUENCY)(0)),
	},
	"/access-points/access-point/ssids/ssid/state/opmode": {
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_Ssids_Ssid_Config_Opmode)(0)),
	},
	"/access-points/access-point/ssids/ssid/state/supported-data-rates": {
		reflect.TypeOf((E_OpenconfigWifiTypes_DATA_RATE)(0)),
	},
	"/access-points/access-point/system/aaa/accounting/config/accounting-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/accounting/events/event/config/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/accounting/events/event/config/record": {
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record)(0)),
	},
	"/access-points/access-point/system/aaa/accounting/events/event/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/accounting/events/event/state/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/accounting/events/event/state/record": {
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Aaa_Accounting_Events_Event_Config_Record)(0)),
	},
	"/access-points/access-point/system/aaa/accounting/state/accounting-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/authentication/config/authentication-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/authentication/state/authentication-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/authentication/users/user/config/role": {
		reflect.TypeOf((E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES)(0)),
	},
	"/access-points/access-point/system/aaa/authentication/users/user/state/role": {
		reflect.TypeOf((E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES)(0)),
	},
	"/access-points/access-point/system/aaa/authorization/config/authorization-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/authorization/events/event/config/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/authorization/events/event/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/authorization/events/event/state/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/authorization/state/authorization-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/server-groups/server-group/config/type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_SERVER_TYPE)(0)),
	},
	"/access-points/access-point/system/aaa/server-groups/server-group/state/type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_SERVER_TYPE)(0)),
	},
	"/access-points/access-point/system/alarms/alarm/state/severity": {
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY)(0)),
	},
	"/access-points/access-point/system/alarms/alarm/state/type-id": {
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID)(0)),
	},
	"/access-points/access-point/system/cpus/cpu/index": {
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Cpus_Cpu_State_Index)(0)),
	},
	"/access-points/access-point/system/logging/console/selectors/selector/config/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/access-points/access-point/system/logging/console/selectors/selector/config/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/access-points/access-point/system/logging/console/selectors/selector/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/access-points/access-point/system/logging/console/selectors/selector/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/access-points/access-point/system/logging/console/selectors/selector/state/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/access-points/access-point/system/logging/console/selectors/selector/state/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector/config/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector/config/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector/state/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/access-points/access-point/system/logging/remote-servers/remote-server/selectors/selector/state/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/access-points/access-point/system/ntp/ntp-keys/ntp-key/config/key-type": {
		reflect.TypeOf((E_OpenconfigSystem_NTP_AUTH_TYPE)(0)),
	},
	"/access-points/access-point/system/ntp/ntp-keys/ntp-key/state/key-type": {
		reflect.TypeOf((E_OpenconfigSystem_NTP_AUTH_TYPE)(0)),
	},
	"/access-points/access-point/system/ntp/servers/server/config/association-type": {
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType)(0)),
	},
	"/access-points/access-point/system/ntp/servers/server/state/association-type": {
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_Ntp_Servers_Server_Config_AssociationType)(0)),
	},
	"/access-points/access-point/system/ssh-server/config/protocol-version": {
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion)(0)),
	},
	"/access-points/access-point/system/ssh-server/state/protocol-version": {
		reflect.TypeOf((E_OpenconfigAccessPoints_AccessPoints_AccessPoint_System_SshServer_Config_ProtocolVersion)(0)),
	},
}
